(dp1
S'output'
p2
S"<class 'sqlite3.OperationalError'> no such column: Project.projNum"
p3
sS'layer'
p4
S'/Users/hainna01/Desktop/SeniorProject/finholt-senior-project/web2py/applications/SeniorProject/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\r\n# this file is released under public domain and you can use without limitations\r\n\r\n#########################################################################\r\n## This is a samples controller\r\n## - index is the default action of any application\r\n## - user is required for authentication and authorization\r\n## - download is for downloading files uploaded in the db (does streaming)\r\n## - call exposes all registered services (none by default)\r\n#########################################################################\r\nccdForm = SQLFORM(db.CCD, labels={\'ccdNum\':\'CCD #\',\'projectNum\': "Project #"})\r\n\r\nrfiForm = SQLFORM(db.RFI, labels={\'rfiNum\':\'RFI #\',\'projectNum\':"Project #", \'requestBy\':\'Request by\', \'dateSent\':\'Date Sent\', \'reqRefTo\':\'Request Referred to\', \'dateRec\':\'Date Received\', \'drawingNum\':\'Drawing #\', \'detailNum\':\'Detail #\', \'specSection\':\'Spec Section #\', \'sheetName\':\'Sheet Name\', \'grids\':\'Grids\', \'sectionPage\':\'Section Page #\', \'description\':\'Description\', \'suggestion\':\'Contractor\\\'s Suggestion\', \'reply\':\'Reply\', \'responseBy\':\'Response by\', \'responseDate\':\'Response Date\'}, fields=[\'rfiNum\',\'projectNum\',\'requestBy\', \'dateSent\', \'reqRefTo\', \'dateRec\', \'drawingNum\', \'detailNum\', \'specSection\', \'sheetName\', \'grids\', \'sectionPage\', \'description\', \'suggestion\', \'reply\', \'responseBy\', \'responseDate\'])\r\n\r\nsubmittalForm = SQLFORM(db.Submittal, labels={\'statusFlag\':\'Status Flag\', \'assignedTo\':\'Assigned to\'})\r\n\r\nproposalRequestForm = SQLFORM(db.ProposalRequest, labels={\'reqNum\':\'Request #\', \'amendNum\':\'Amendment #\', \'projectNum\':\'Project #\', \'subject\':\'Subject\', \'propDate\':\'Proposal Date\', \'sentTo\':\'Sent to\', \'cc\':\'CC\', \'description\':\'Description\'})\r\n\r\nproposalForm = SQLFORM(db.Proposal, labels={\'reqNum\':\'Request #\', \'propDate\':\'Proposal Date\'})\r\n\r\nmeetingMinutesForm = SQLFORM(db.MeetingMinutes, labels={\'meetDate\':\'Meeting Date\'})\r\n\r\n\r\nprojects = db(db.Project).select()\r\n\r\n\r\nfooter = DIV("This website brought to you by the Supreme Leader and Minion #2 (Scott)", _id="footer")\r\n\r\n@auth.requires_login()\r\ndef index():\r\n    """\r\n    example action using the internationalization operator T and flash\r\n    rendered by views/default/index.html or views/generic.html\r\n    """\r\n    \r\n    if ccdForm.process().accepted:\r\n        response.flash = \'form accepted\'\r\n    elif ccdForm.errors:\r\n        response.flash = \'form has errors\'\r\n    else:\r\n        response.flash = \'please fill out the form\'\r\n        \r\n    if rfiForm.process().accepted:\r\n        response.flash = \'form accepted\'\r\n    elif rfiForm.errors:\r\n        response.flash = \'form has errors\'\r\n    else:\r\n        response.flash = \'please fill out the form\'\r\n        \r\n    if submittalForm.process().accepted:\r\n        response.flash = \'form accepted\'\r\n    elif submittalForm.errors:\r\n        response.flash = \'form has errors\'\r\n    else:\r\n        response.flash = \'please fill out the form\'\r\n        \r\n    if proposalRequestForm.process().accepted:\r\n        response.flash = \'form accepted\'\r\n    elif proposalRequestForm.errors:\r\n        response.flash = \'form has errors\'\r\n    else:\r\n        response.flash = \'please fill out the form\'\r\n        \r\n    if proposalForm.process().accepted:\r\n        response.flash = \'form accepted\'\r\n    elif proposalForm.errors:\r\n        response.flash = \'form has errors\'\r\n    else:\r\n        response.flash = \'please fill out the form\'\r\n    \r\n    if meetingMinutesForm.process().accepted:\r\n        response.flash = \'form accepted\'\r\n    elif meetingMinutesForm.errors:\r\n        response.flash = \'form has errors\'\r\n    else:\r\n        response.flash = \'please fill out the form\'\r\n    \r\n    return dict(ccdForm=ccdForm,\r\n                projects=projects,\r\n                rfiForm=rfiForm,\r\n                submittalForm=submittalForm,\r\n                proposalRequestForm=proposalRequestForm,\r\n                proposalForm=proposalForm,\r\n                meetingMinutesForm=meetingMinutesForm,\r\n                footer=footer)\r\n\r\ndef user():\r\n    """\r\n    exposes:\r\n    http://..../[app]/default/user/login\r\n    http://..../[app]/default/user/logout\r\n    http://..../[app]/default/user/register\r\n    http://..../[app]/default/user/profile\r\n    http://..../[app]/default/user/retrieve_password\r\n    http://..../[app]/default/user/change_password\r\n    use @auth.requires_login()\r\n        @auth.requires_membership(\'group name\')\r\n        @auth.requires_permission(\'read\',\'table name\',record_id)\r\n    to decorate functions that need access control\r\n    """\r\n    return dict(form=auth())\r\n\r\n\r\ndef download():\r\n    """\r\n    allows downloading of uploaded files\r\n    http://..../[app]/default/download/[filename]\r\n    """\r\n    return response.download(request,db)\r\n\r\n\r\ndef call():\r\n    """\r\n    exposes services. for example:\r\n    http://..../[app]/default/call/jsonrpc\r\n    decorate with @services.jsonrpc the functions to expose\r\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\r\n    """\r\n    return service()\r\n\r\n\r\n@auth.requires_signature()\r\ndef data():\r\n    """\r\n    http://..../[app]/default/data/tables\r\n    http://..../[app]/default/data/create/[table]\r\n    http://..../[app]/default/data/read/[table]/[id]\r\n    http://..../[app]/default/data/update/[table]/[id]\r\n    http://..../[app]/default/data/delete/[table]/[id]\r\n    http://..../[app]/default/data/select/[table]\r\n    http://..../[app]/default/data/search/[table]\r\n    but URLs must be signed, i.e. linked with\r\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\r\n    or with the signed load operator\r\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\r\n    """\r\n    return dict(form=crud())\r\n\r\n#def register():\r\n #   return dict(form=auth.register())\r\n\r\n\r\ndef createproject():\r\n    form = SQLFORM(db.Project)\r\n    if form.process().accepted:\r\n       response.flash = \'form accepted\'\r\n    elif form.errors:\r\n       response.flash = \'form has errors\'\r\n    else:\r\n       response.flash = \'please fill out the form\'\r\n    return dict(form=form)\r\n    \r\ndef manageprojects():\r\n    table = None\r\n    rows = db().select(db.Project.ALL)\r\n    #myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc:     IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\r\n    table = SQLTABLE(rows,columns=["Project.name","Project.projNum",\'Project.openDate\',"Project.closedDate"],headers={"Project.name":"Project Name","Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #", "Project.archived":"Archived"})\r\n    return dict(table=table)\r\n    \r\ndef archiveprojects():\r\n    table = None\r\n    rows = db(db.Project.archived == True).select()\r\n    #myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc:     IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\r\n    table = SQLTABLE(rows,columns=["Project.name","Project.projNum",\'Project.openDate\',"Project.closedDate"],headers={"Project.name":"Project Name","Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #", "Project.archived":"Archived"})\r\n    return dict(table=table)\r\n    \r\ndef manageusers():\r\n    table = None\r\n    #rows = db().select(db.Users.ALL)\r\n    #myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc:     IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\r\n    #table = SQLTABLE(rows,columns=["Project.name","Project.projNum",\'Project.openDate\',"Project.closedDate"],headers={"Project.name":"Project Name","Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #", "Project.archived":"Archived"})\r\n    return dict(table=table)\r\n\r\ndef formtable():\r\n    formType = request.vars.formType\r\n    if ccdForm.process().accepted:\r\n        response.flash = \'form accepted\'\r\n    elif ccdForm.errors:\r\n        response.flash = \'form has errors\'\r\n    else:\r\n        response.flash = \'please fill out the form\'    \r\n    table = None\r\n    image = None\r\n    fullTable = True\r\n    if formType == "CCD":\r\n        rows = db(db.CCD.projectNum == str(request.vars.projectNum)).select()\r\n        myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc: IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\r\n        table = SQLTABLE(rows,columns=["CCD.ccdNum",\'CCD.file\'],headers={"CCD.ccdNum":"CCD #","CCD.file":"CCD File"},extracolumns=myextracolumns)\r\n    elif formType == "RFI":\r\n        rows = db(db.RFI.projectNum == str(request.vars.projectNum)).select()\r\n        table = SQLTABLE(rows,_width="800px")\r\n    elif formType == "Submittal":\r\n        rows = db(db.Submittal.projectNum == str(request.vars.projectNum)).select()\r\n        table = SQLTABLE(rows)\r\n    elif formType == "ProposalRequest":\r\n        rows = db(db.ProposalRequest.projectNum == str(request.vars.projectNum)).select()\r\n        table = SQLTABLE(rows)\r\n    elif formType == "Proposal":\r\n        rows = db(db.Proposal.projectNum == str(request.vars.projectNum)).select()\r\n        table = SQLTABLE(rows)\r\n\r\n    if len(rows)==0:\r\n        table = "No entries found"\r\n        fullTable = False\r\n\r\n    return dict(formType=formType,\r\n                ccdForm=ccdForm,                \r\n                rfiForm=rfiForm,\r\n                submittalForm=submittalForm,\r\n                proposalRequestForm=proposalRequestForm,\r\n                proposalForm=proposalForm,\r\n                meetingMinutesForm=meetingMinutesForm,\r\n                projects=projects,\r\n                table= table,\r\n                image=image,\r\n                footer=footer,\r\n                fullTable=fullTable)\r\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/hainna01/Desktop/SeniorProject/finholt-senior-project/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/hainna01/Desktop/SeniorProject/finholt-senior-project/web2py/applications/SeniorProject/controllers/default.py", line 24, in <module>\n    projects = db(db.Project).select()\n  File "/Users/hainna01/Desktop/SeniorProject/finholt-senior-project/web2py/gluon/dal.py", line 7578, in select\n    return adapter.select(self.query,fields,attributes)\n  File "/Users/hainna01/Desktop/SeniorProject/finholt-senior-project/web2py/gluon/dal.py", line 1315, in select\n    rows = response(sql)\n  File "/Users/hainna01/Desktop/SeniorProject/finholt-senior-project/web2py/gluon/dal.py", line 1305, in response\n    self.execute(sql)\n  File "/Users/hainna01/Desktop/SeniorProject/finholt-senior-project/web2py/gluon/dal.py", line 1392, in execute\n    return self.log_execute(*a, **b)\n  File "/Users/hainna01/Desktop/SeniorProject/finholt-senior-project/web2py/gluon/dal.py", line 1386, in log_execute\n    ret = self.cursor.execute(*a, **b)\nOperationalError: no such column: Project.projNum\n'
p11
s.