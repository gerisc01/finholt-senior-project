(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'person'"
p3
sS'layer'
p4
S'C:\\Users\\Alysse\\Documents\\GitHub\\finholt-senior-project\\web2py\\applications\\SeniorProject\\controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nccdForm = SQLFORM(db.CCD, labels={\'ccdNum\':\'CCD #\',\'projectNum\': "Project #"})\n\nrfiForm = SQLFORM(db.RFI, labels={\'rfiNum\':\'RFI #\',\'projectNum\':"Project #", \'requestBy\':\'Request by\', \'dateSent\':\'Date Sent\', \'reqRefTo\':\'Request Referred to\', \'dateRec\':\'Date Received\', \'drawingNum\':\'Drawing #\', \'detailNum\':\'Detail #\', \'specSection\':\'Spec Section #\', \'sheetName\':\'Sheet Name\', \'grids\':\'Grids\', \'sectionPage\':\'Section Page #\', \'description\':\'Description\', \'suggestion\':\'Contractor\\\'s Suggestion\', \'reply\':\'Reply\', \'responseBy\':\'Response by\', \'responseDate\':\'Response Date\'}, fields=[\'rfiNum\',\'projectNum\',\'requestBy\', \'dateSent\', \'reqRefTo\', \'dateRec\', \'drawingNum\', \'detailNum\', \'specSection\', \'sheetName\', \'grids\', \'sectionPage\', \'description\', \'suggestion\', \'reply\', \'responseBy\', \'responseDate\'])\n\nsubmittalForm = SQLFORM(db.Submittal, labels={\'statusFlag\':\'Status Flag\', \'projectNum\':\'Project Number\', \'assignedTo\':\'Assigned to\'})\n\nproposalRequestForm = SQLFORM(db.ProposalRequest, labels={\'reqNum\':\'Request #\', \'amendNum\':\'Amendment #\', \'projectNum\':\'Project #\', \'subject\':\'Subject\', \'propDate\':\'Proposal Date\', \'sentTo\':\'Sent to\', \'cc\':\'CC\', \'description\':\'Description\'})\n\nproposalForm = SQLFORM(db.Proposal, labels={\'reqNum\':\'Request #\', \'projectNum\':\'Project Number\', \'propDate\':\'Proposal Date\'})\n\nmeetingMinutesForm = SQLFORM(db.MeetingMinutes, labels={\'meetDate\':\'Meeting Date\'})\n\nrecord = db.person(request.args(0))\nmyProfileForm = SQLFORM(db.auth_user, record, labels={\'email\':\'E-mail\', \'phone\':\'Phone Number\', \'password\':\'New Password\'}, fields = [\'email\',\'phone\',\'password\'])\n\n\nprojects = db(db.Project).select()\n\nheader = DIV(A(IMG(_src=URL(\'static\',\'images/stock.jpeg\')), _href=URL(\'default\',\'index\')), _id="header")\nfooter = DIV("This website brought to you by the Supreme Leader, Minion #3 (Alysse), Minion #2 (Scott), and the Sick One (Erik)", _id="footer")\n\nauth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    \n    if ccdForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif ccdForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    if rfiForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif rfiForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    if submittalForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif submittalForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    if proposalRequestForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif proposalRequestForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    if proposalForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif proposalForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    \n    if meetingMinutesForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif meetingMinutesForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    if myProfileForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif myProfileForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    \n    return dict(ccdForm=ccdForm,\n                projects=projects,\n                rfiForm=rfiForm,\n                submittalForm=submittalForm,\n                proposalRequestForm=proposalRequestForm,\n                proposalForm=proposalForm,\n                meetingMinutesForm=meetingMinutesForm,\n                myProfileForm=myProfileForm,\n                header=header,\n                footer=footer)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\ndef register():\n    admin_auth = session.auth\n    auth.is_logged_in = lambda: False\n    def post_register(form):\n        session.auth = admin_auth\n        auth.user = session.auth.user\n    auth.settings.register_onaccept = post_register\n    return dict(form=auth.register())\n\ndef deleteusers():\n     rows=db(db.auth_user.id>0).select() \n     db.auth_user.id.represent=lambda id: DIV(id,INPUT (_type=\'checkbox\',_name=\'check%i\'%id)) \n     table=FORM(SQLTABLE(rows),INPUT(_type=\'submit\')) \n     if table.accepts(request.vars): \n           pass # or so something not sure what you want to do \n     return dict(table=table, footer=footer, header=header)\n     \ndef createproject():\n    form = SQLFORM(db.Project, labels={\'openDate\':\'Open Date\', \'closedDate\':\'Closed Date\', \'projNum\':\'Project Number\'})\n    if form.process().accepted:\n       response.flash = \'form accepted\'\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form, footer=footer, header=header)\n    \ndef manageprojects():\n    table = None\n    rows = db().select(db.Project.ALL)\n    #myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc:     IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\n    table = SQLTABLE(rows,columns=["Project.name","Project.projNum",\'Project.openDate\',"Project.closedDate"],headers={"Project.name":"Project Name","Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #", "Project.archived":"Archived"})\n    return dict(table=table, footer=footer, header=header)\n    \ndef archiveprojects():\n    table = None\n    rows = db(db.Project.archived == True).select()\n    #myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc:     IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\n    table = SQLTABLE(rows,columns=["Project.name","Project.projNum",\'Project.openDate\',"Project.closedDate"],headers={"Project.name":"Project Name","Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #", "Project.archived":"Archived"})\n    return dict(table=table, footer=footer, header=header)\n    \ndef manageusers():\n    table = None\n    #rows = db().select(db.Users.ALL)\n    #myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc:     IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\n    #table = SQLTABLE(rows,columns=["Project.name","Project.projNum",\'Project.openDate\',"Project.closedDate"],headers={"Project.name":"Project Name","Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #", "Project.archived":"Archived"})\n    return dict(table=table, footer=footer, header=header)\n\ndef formtable():\n    formType = request.vars.formType\n    if ccdForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif ccdForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    if rfiForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif rfiForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    if submittalForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif submittalForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    if proposalRequestForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif proposalRequestForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    if proposalForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif proposalForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    \n    if meetingMinutesForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif meetingMinutesForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n    if myProfileForm.process().accepted:\n        response.flash = \'form accepted\'\n    elif myProfileForm.errors:\n        response.flash = \'form has errors\'\n    else:\n        response.flash = \'please fill out the form\'\n        \n    table = None\n    image = None\n    fullTable = True\n    if formType == "CCD":\n        rows = db(db.CCD.projectNum == str(request.vars.projectNum)).select()\n        myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc: IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\n        table = SQLTABLE(rows,columns=["CCD.ccdNum",\'CCD.file\'],headers={"CCD.ccdNum":"CCD #","CCD.file":"CCD File"})\n    elif formType == "RFI":\n        rows = db(db.RFI.projectNum == str(request.vars.projectNum)).select()\n        table = SQLTABLE(rows,_width="800px",       \n            columns=["RFI.rfiNum","RFI.dateSent","RFI.reqRefTo","RFI.dateRec","RFI.responseBy","RFI.responseDate","RFI.statusFlag"],headers=\n            {"RFI.rfiNum":"RFI #","RFI.dateSent":"Date Sent","RFI.reqRefTo":"Request Referred To","RFI.dateRec":"Date Received","RFI.responseDate":"Response Date","RFI.responseBy":"Response By","RFI.statusFlag":"Status Flag"})\n    elif formType == "Submittal":\n        rows = db(db.Submittal.projectNum == str(request.vars.projectNum)).select()\n        table = SQLTABLE(rows, columns=["Submittal.assignedTo","Submittal.statusFlag","Submittal.submittal"],\n         headers={"Submittal.assignedTo":"Assigned To","Submittal.statusFlag":"Status Flag","Submittal.submittal":"Submitted File"})\n    elif formType == "ProposalRequest":\n        rows = db(db.ProposalRequest.projectNum == str(request.vars.projectNum)).select()\n        table = SQLTABLE(rows, columns=["ProposalRequest.reqNum","ProposalRequest.amendNum","ProposalRequest.sentTo","ProposalRequest.propDate"],\n         headers={"ProposalRequest.reqNum":"Request Number","ProposalRequest.amendNum":"Amendment Number","ProposalRequest.sentTo":"Sent To","ProposalRequest.propDate":"Proposal Request Date"})\n    elif formType == "Proposal":\n        rows = db(db.Proposal.projectNum == str(request.vars.projectNum)).select()\n        table = SQLTABLE(rows, columns=["Proposal.reqNum","Proposal.propDate","Proposal.file"],\n        headers={"Proposal.reqNum":"Proposal Number","Proposal.propDate":"Proposal Date","Proposal.file":"File Submitted"})\n    elif formType == "MeetingMinutes":\n        rows = db().select(db.MeetingMinutes.ALL)\n        table = SQLTABLE(rows, columns=["MeetingMinutes.meetDate","MeetingMinutes.file"],\n        headers={"MeetingMinutes.meetDate":"Meeting Date","MeetingMinutes.file":"Submitted File"})\n\n    if len(rows)==0:\n        table = "There are no documents uploaded for this project section as of yet."\n        fullTable = False\n\n    return dict(formType=formType,\n                ccdForm=ccdForm,                \n                rfiForm=rfiForm,\n                submittalForm=submittalForm,\n                proposalRequestForm=proposalRequestForm,\n                proposalForm=proposalForm,\n                meetingMinutesForm=meetingMinutesForm,\n                myProfileForm=myProfileForm,\n                projects=projects,\n                table= table,\n                image=image,\n                footer=footer,\n                header=header,\n                fullTable=fullTable)\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "C:\\Users\\Alysse\\Documents\\GitHub\\finholt-senior-project\\web2py\\gluon\\restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "C:\\Users\\Alysse\\Documents\\GitHub\\finholt-senior-project\\web2py\\applications\\SeniorProject\\controllers/default.py", line 23, in <module>\n    record = db.person(request.args(0))\n  File "C:\\Users\\Alysse\\Documents\\GitHub\\finholt-senior-project\\web2py\\gluon\\dal.py", line 6343, in __getattr__\n    return self[key]\n  File "C:\\Users\\Alysse\\Documents\\GitHub\\finholt-senior-project\\web2py\\gluon\\dal.py", line 6337, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'person\'\n'
p11
s.