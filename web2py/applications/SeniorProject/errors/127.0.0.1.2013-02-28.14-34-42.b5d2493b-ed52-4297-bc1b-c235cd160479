(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'settings'"
p3
sS'layer'
p4
S'/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/models/db.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\r\n\r\n#########################################################################\r\n## This scaffolding model makes your app work on Google App Engine too\r\n## File is released under public domain and you can use without limitations\r\n#########################################################################\r\n\r\n## if SSL/HTTPS is properly configured and you want all HTTP requests to\r\n## be redirected to HTTPS, uncomment the line below:\r\n# request.requires_https()\r\n\r\nif not request.env.web2py_runtime_gae:\r\n    ## if NOT running on Google App Engine use SQLite or other DB\r\n    db = DAL(\'sqlite://storage.sqlite\')\r\nelse:\r\n    ## connect to Google BigTable (optional \'google:datastore://namespace\')\r\n    db = DAL(\'google:datastore\')\r\n    ## store sessions and tickets there\r\n    session.connect(request, response, db = db)\r\n    ## or store session in Memcache, Redis, etc.\r\n    ## from gluon.contrib.memdb import MEMDB\r\n    ## from google.appengine.api.memcache import Client\r\n    ## session.connect(request, response, db = MEMDB(Client()))\r\n\r\n## by default give a view/generic.extension to all actions from localhost\r\n## none otherwise. a pattern can be \'controller/function.extension\'\r\nresponse.generic_patterns = [\'*\'] if request.is_local else []\r\n## (optional) optimize handling of static files\r\n# response.optimize_css = \'concat,minify,inline\'\r\n# response.optimize_js = \'concat,minify,inline\'\r\n\r\n#########################################################################\r\n## Here is sample code if you need for\r\n## - email capabilities\r\n## - authentication (registration, login, logout, ... )\r\n## - authorization (role based authorization)\r\n## - services (xml, csv, json, xmlrpc, jsonrpc, amf, rss)\r\n## - old style crud actions\r\n## (more options discussed in gluon/tools.py)\r\n#########################################################################\r\n\r\nfrom gluon.tools import Auth, Crud, Service, PluginManager, prettydate\r\nauth = Auth(db, hmac_key=Auth.get_or_create_key())\r\ncrud, service, plugins = Crud(db), Service(), PluginManager()\r\n\r\ndb.define_table(\r\n    auth.settings.table_user_name,\r\n    Field(\'first_name\', label=\'First Name\', length=128, default=\'\'),\r\n    Field(\'last_name\', label=\'Last Name\', length=128, default=\'\'),\r\n    Field(\'email\', label=\'Email\',length=128, default=\'\', unique=True),\r\n    Field(\'password\', \'password\', length=512,            \r\n          readable=False, label=\'Password\'),\r\n    Field(\'phone\',label="Phone Number"),\r\n    Field(\'registration_key\', length=512,                # required\r\n          writable=False, readable=False, default=\'\'),\r\n    Field(\'reset_password_key\', length=512,              # required\r\n          writable=False, readable=False, default=\'\'),\r\n    Field(\'registration_id\', length=512,                 # required\r\n          writable=False, readable=False, default=\'\'),\r\n    Field(\'role\', length=512, label="Role"))\r\n\r\ncustom_auth_table = db[auth.settings.table_user_name] # get the custom_auth_table\r\ncustom_auth_table.first_name.requires = \\\r\n  IS_NOT_EMPTY(error_message=auth.messages.is_empty)\r\ncustom_auth_table.last_name.requires = \\\r\n  IS_NOT_EMPTY(error_message=auth.messages.is_empty)\r\ncustom_auth_table.password.requires = [CRYPT()]\r\ncustom_auth_table.settings.password_min_length = 5\r\ncustom_auth_table.email.requires = [\r\n  IS_EMAIL(error_message=auth.messages.invalid_email),\r\n  IS_NOT_IN_DB(db, custom_auth_table.email)]\r\n\r\n## create all tables needed by auth if not custom tables\r\nauth.define_tables()\r\n\r\n## configure email\r\nmail=auth.settings.mailer\r\nmail.settings.server = \'logging\' or \'smtp.gmail.com:587\'\r\nmail.settings.sender = \'you@gmail.com\'\r\nmail.settings.login = \'username:password\'\r\n\r\n## configure auth policy\r\ngeneralAuth = auth.id_group(role="General");\r\nif auth.id_group(role="General")<=0:\r\n    generalAuth = auth.add_group(role="General")\r\nif auth.id_group(role="Admin")<=0:\r\n    adminAuth = auth.add_group(role="Admin")\r\nauth.settings.registration_requires_verification = False\r\nauth.settings.registration_requires_approval = False\r\nauth.settings.reset_password_requires_verification = True\r\n##auth.settings.everybody_group_id = 5\r\n\r\n## if you need to use OpenID, Facebook, MySpace, Twitter, Linkedin, etc.\r\n## register with janrain.com, write your domain:api_key in private/janrain.key\r\nfrom gluon.contrib.login_methods.rpx_account import use_janrain\r\nuse_janrain(auth,filename=\'private/janrain.key\')\r\n\r\n#########################################################################\r\n## Define your tables below (or better in another model file) for example\r\n##\r\n## >>> db.define_table(\'mytable\',Field(\'myfield\',\'string\'))\r\n##\r\n## Fields can be \'string\',\'text\',\'password\',\'integer\',\'double\',\'boolean\'\r\n##       \'date\',\'time\',\'datetime\',\'blob\',\'upload\', \'reference TABLENAME\'\r\n## There is an implicit \'id integer autoincrement\' field\r\n## Consult manual for more options, validators, etc.\r\n##\r\n## More API examples for controllers:\r\n##\r\n## >>> db.mytable.insert(myfield=\'value\')\r\n## >>> rows=db(db.mytable.myfield==\'value\').select(db.mytable.ALL)\r\n## >>> for row in rows: print row.id, row.myfield\r\n#########################################################################\r\n\r\ndb.define_table("Project", Field(\'name\',\'string\'), Field(\'openDate\',\'date\'), Field(\'closedDate\',\'date\'), Field(\'projNum\', \'integer\'), Field(\'archived\',\'boolean\',readable=False, writable=False, default=False))\r\n\r\ndb.define_table("ProjectUser", Field(\'userRole\',\'string\'), Field(\'projectId\',\'string\'))\r\n\r\n#db.define_table("User", Field(\'name\',\'string\'), Field(\'role\',\'string\'))          More stuff? Taken care of already?\r\n\r\ndb.define_table("CCD", Field(\'ccdNum\',\'string\'), Field(\'projectNum\',\'string\'), Field(\'file\',\'upload\'))\r\n\r\ndb.define_table("Submittal", Field(\'statusFlag\',\'string\'), Field(\'projectNum\',\'string\'), Field(\'assignedTo\',\'string\'), Field(\'submittal\',\'upload\'))\r\n\r\ndb.define_table("RFI", Field(\'rfiNum\',\'string\'), Field(\'requestBy\',\'string\'), Field(\'dateSent\',\'date\'), Field(\'reqRefTo\',\'string\'), Field(\'dateRec\',\'date\'), Field(\'drawingNum\',\'integer\'), Field(\'detailNum\',\'integer\'), Field(\'specSection\',\'integer\'), Field(\'sheetName\',\'string\'), Field(\'grids\',\'string\'), Field(\'sectionPage\',\'integer\'), Field(\'description\',\'text\'), Field(\'suggestion\',\'text\'), Field(\'reply\',\'text\'), Field(\'responseBy\',\'string\'), Field(\'responseDate\',\'date\'), Field(\'statusFlag\',\'string\'),Field(\'projectNum\',\'string\'))\r\n\r\ndb.define_table("ProposalRequest", Field(\'reqNum\',\'string\'), Field(\'amendNum\',\'string\'), Field(\'projectNum\',\'string\'), Field(\'subject\',\'text\'), Field(\'propDate\',\'date\'), Field(\'sentTo\',\'string\'), Field(\'cc\',\'string\'), Field(\'description\',\'text\'))\r\n\r\ndb.define_table("Proposal", Field(\'reqNum\',\'integer\'), Field(\'propDate\',\'date\'), Field(\'file\',\'upload\'),Field(\'projectNum\',\'string\'))\r\n\r\ndb.define_table("MeetingMinutes", Field(\'meetDate\',\'date\'), Field(\'file\',\'upload\'))\r\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/models/db.py", line 68, in <module>\n    custom_auth_table.settings.password_min_length = 5\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/dal.py", line 6774, in __getattr__\n    return self[key]\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/dal.py", line 6714, in __getitem__\n    return dict.__getitem__(self, str(key))\nKeyError: \'settings\'\n'
p11
s.