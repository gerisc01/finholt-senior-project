(dp1
S'output'
p2
S"<type 'exceptions.KeyError'> 'project'"
p3
sS'layer'
p4
S'/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n#import oauth\n#import httplib2 \n#import urllib2\nimport flickrapi\nimport ctypes\n\n\n#Flickr API keys\nKEY = \'614fd86a34a00d38293c7e803d14c3ab\'\nSECRET_KEY = \'ad86826c3187eb4d\'\nUSER_ID = \'93142072@N05\'\n\n    \nif not db(db.PhotoToken).isempty():\n    tok = (db.PhotoToken(db.PhotoToken.id>0)).token\n    flickr = flickrapi.FlickrAPI(KEY, SECRET_KEY, token = tok)     #create a flickr object\nelse:\n    flickr = flickrapi.FlickrAPI(KEY, SECRET_KEY)\n\nif not db(db.PhotoToken).isempty():\n    # We have a token, but it might not be valid\n    try:\n        flickr.auth_checkToken()\n    except flickrapi.FlickrError:\n        db(db.PhotoToken.id > 0).delete()\nif db(db.PhotoToken).isempty():                #we don\'t have the token yet\n    if request.vars.frob:                      #if the frob is in the request \n        db.PhotoToken[0] = {"token" : flickr.get_token(request.vars.frob)}    #insert a new row into the database with the token\n    else:\n        url = flickr.web_login_url(\'write\')    #get the url to go to in order to authenticate\n        redirect(url)                          #redirect to that website\n\n\n    \nccdForm = SQLFORM(db.CCD, labels={\'ccdNum\':\'CCD #\',\'projectNum\': "Project #"})\n\nrfiForm = SQLFORM(db.RFI, labels={\'rfiNum\':\'RFI #\',\'projectNum\':"Project #", \'requestBy\':\'Request by\', \'dateSent\':\'Date Sent\', \'reqRefTo\':\'Request Referred to\', \'dateRec\':\'Date Received\', \'drawingNum\':\'Drawing #\', \'detailNum\':\'Detail #\', \'specSection\':\'Spec Section #\', \'sheetName\':\'Sheet Name\', \'grids\':\'Grids\', \'sectionPage\':\'Section Page #\', \'description\':\'Description\', \'suggestion\':\'Contractor\\\'s Suggestion\', \'reply\':\'Reply\', \'responseBy\':\'Response by\', \'responseDate\':\'Response Date\'}, fields=[\'rfiNum\',\'projectNum\',\'requestBy\', \'dateSent\', \'reqRefTo\', \'dateRec\', \'drawingNum\', \'detailNum\', \'specSection\', \'sheetName\', \'grids\', \'sectionPage\', \'description\', \'suggestion\', \'reply\', \'responseBy\', \'responseDate\'])\n\nsubmittalForm = SQLFORM(db.Submittal, labels={\'statusFlag\':\'Status Flag\', \'projectNum\':\'Project Number\', \'assignedTo\':\'Assigned to\'})\n\nproposalRequestForm = SQLFORM(db.ProposalRequest, labels={\'reqNum\':\'Request #\', \'amendNum\':\'Amendment #\', \'projectNum\':\'Project #\', \'subject\':\'Subject\', \'propDate\':\'Proposal Date\', \'sentTo\':\'Sent to\', \'cc\':\'CC\', \'description\':\'Description\'})\n\nproposalForm = SQLFORM(db.Proposal, labels={\'reqNum\':\'Request #\', \'projectNum\':\'Project Number\', \'propDate\':\'Proposal Date\'})\n\nmeetingMinutesForm = SQLFORM(db.MeetingMinutes, labels={\'meetDate\':\'Meeting Date\'})\n\nphotoForm = SQLFORM(db.Photos, labels={\'projectNum\':\'Project Number\', \'title\':\'Title\', \'description\':\'Description\', \'photo\':\'Photo\'}, fields = [\'projectNum\',\'title\',\'description\',\'photo\'])\n\n\n\nif auth.user != None:\n    record = auth.user.id     #Gets the info for the current user\n    myProfileForm = SQLFORM(db.auth_user, record, showid=False, labels={\'first_name\':\'First Name\', \'last_name\':\'Last Name\', \'email\':\'E-mail\', \'phone\':\'Phone Number\', \'password\':\'New Password\'}, fields = [\'first_name\',\'last_name\',\'email\',\'phone\'],_id="profileForm")\nelse: \n    myProfileForm = SQLFORM(db.auth_user, showid=False, labels={\'first_name\':\'First Name\', \'last_name\':\'Last Name\', \'email\':\'E-mail\', \'phone\':\'Phone Number\', \'password\':\'New Password\'}, fields = [\'first_name\',\'last_name\',\'email\',\'phone\'],_id="profileForm")\n\nprojects = None\n\n\n\n\n\nheader = DIV(A(IMG(_src=URL(\'static\',\'images/bluebannertext.jpg\')), _href=URL(\'default\',\'index\')), _id="header")\nfooter = DIV(A("Home Page", _href=URL(\'default\',\'index\')), _id="footer")\ncss = "/SeniorProject/static/css/bluestyle.css"\n\ndef uploadPhotoToFlickr(photoForm):\n    #MessageBox = ctypes.windll.user32.MessageBoxA\n    #MessageBox(None, str(photoForm.vars), \'Title\', 0)\n    \n    #Get the info from the submitted photo form\n    photoWeb2pyId = photoForm.vars.id\n    projNum = photoForm.vars.projectNum\n    title = photoForm.vars.title\n    descr = photoForm.vars.description\n    name = "applications/SeniorProject/uploads/" + photoForm.vars.photo\n    \n    #Upload the photo to flickr and get the id of the photo in order to construct the url of the photo\n    idElement = flickr.upload(filename=name, title=title, description=descr)\n    id = idElement.find(\'photoid\').text\n    flickrUrl =  "http://www.flickr.com/photos/"+USER_ID+"/"+str(id)+"/"  \n    \'\'\'\n    root = flickr.photos_getInfo(api_key=KEY, photo_id=str(id), secret=SECRET_KEY)\n    infoElement = root.find(\'photo\')\n    farmId = infoElement.attrib["id"]\n    serverId = infoElement.attrib["server"]\n    thumbnail = "http://farm"+str(farmId)+".staticflickr.com/"+str(serverId)+"/"+str(id)+"_"+str(SECRET_KEY)+"_t.jpg"\n    MessageBox = ctypes.windll.user32.MessageBoxA\n    MessageBox(None, thumbnail, \'Title\', 0)\n    \'\'\'\n    #Delete the corresponding row in our database (because we don\'t want to store the actual photo here)\n    db(db.Photos.id == photoWeb2pyId).delete()\n    \n    #Create a new row in our database with all the same info as the deleted row, but without the photo file\n    db.Photos.insert(projectNum=projNum, flickrURL=flickrUrl, title=title, description=descr)\n\n\n@auth.requires_login()\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n    """\n    user = db(db.auth_user.id ==auth.user.id).select().first()\n    projects = None\n    for item in user.projects:\n        rows = db((db.Project.archived == False) & (db.Project.id == item)).select()\n        if projects == None:\n            projects = rows\n        else:\n            projects= projects & rows\n    \n\n    response.flash = "Erik Smellz"\n    return dict(\n                projects=projects,\n                myProfileForm=myProfileForm,\n                header=header,\n                footer=footer,\n                css=css)\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth(), header=header, footer=footer, css=css)\n\n\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud(), css=css, footer=footer)\n\n@auth.requires_membership(\'Admin\')\ndef register():\n    form = SQLFORM(db.auth_user)\n    if form.validate():\n        admin_user = auth.user\n        auth.get_or_create_user(form.vars)\n        auth.add_membership(auth.id_group(role="General"),auth.user_id) \n        auth.user = admin_user\n        redirect(URL(\'default\',\'manageusers\'))\n    return dict(form=form, header=header, footer=footer, css=css)\n    #admin_auth = session.auth\n    #auth.is_logged_in = lambda: False\n    #def post_register(form):\n    #    auth.add_membership(auth.id_group(role="General"),auth.user_id) \n\n     #   session.auth = admin_auth\n     #   auth.user = session.auth.user\n    #auth.settings.register_onaccept = post_register\n    #return dict(form=auth.register())\n\n@auth.requires_login()\n@auth.requires_membership(\'Admin\')\ndef changepermissions():\n     rows=db(db.auth_user.id>0).select() \n     #db.auth_user.id.represent=lambda id: DIV(id,SELECT(str(db(db.auth_group.id==db(db.auth_membership.user_id==id).select().first().group_id).select().first().role), XML(getOtherRoles(str(db(db.auth_group.id==db(db.auth_membership.user_id==id).select().first().group_id).select().first().role))), _name=\'%i\'%id)) # INPUT (_type=\'checkbox\',_name=\'%i\'%id)) \n     db.auth_user.id.represent=lambda id: SELECT(getUserRole(id), XML(getOtherRoles(id)), _name=\'%i\'%id) # INPUT (_type=\'checkbox\',_name=\'%i\'%id)) \n     table=FORM(SQLTABLE(rows, columns=["auth_user.id",\'auth_user.first_name\',\'auth_user.last_name\',\'auth_user.email\'], headers={"auth_user.id":"Change Permission","auth_user.first_name":"First Name","auth_user.last_name":"Last Name","auth_user.email":"Email"}),INPUT(_type=\'submit\')) \n     if table.accepts(request.vars): \n        for item in request.vars.keys():\n            if item.isdigit():\n                if not auth.has_membership(user_id=int(item), role=request.vars[item]):\n                    if auth.has_membership(user_id=int(item), role=getUserRole(int(item))): #in case they are in their individual user group. We shoudl only delete them from the group we are in if they are switching from General to Admin or vice versa.\n                        \n                        auth.del_membership(auth.id_group(role=getUserRole(int(item))),int(item))\n                    auth.add_membership(auth.id_group(role=request.vars[item]),int(item)) \n                    \n\n        redirect(URL(\'default\',\'manageusers\'))\n     return dict(table=table, footer=footer, header=header, css=css)\n\n@auth.requires_membership("Admin")\n@auth.requires_login()\ndef addtoproject():\n    rows=db(db.auth_user.id>0).select() \n    db.auth_user.id.represent=lambda id: DIV(\'\', XML(getAllProjectsHtml(id)), _name=\'%i\'%id)\n    table=FORM(SQLTABLE(rows, columns=["auth_user.id",\'auth_user.first_name\',\'auth_user.last_name\',\'auth_user.email\'], headers={"auth_user.id":"Add To","auth_user.first_name":"First Name","auth_user.last_name":"Last Name","auth_user.email":"Email"}),INPUT(_type=\'submit\')) \n    if table.accepts(request.vars):\n        for userid in request.vars.keys():\n            if userid.isdigit():\n                projectList = []\n                for item in request.vars[userid]:\n                    projectList.append(int(item))\n                db(db.auth_user.id ==int(userid)).update(projects=projectList)\n    return dict(table=table, footer=footer, header=header, css=css)\n\n@auth.requires_membership("Admin")\n@auth.requires_login()\ndef deletefromproject():\n    rows=db(db.auth_user.id>0).select() \n    db.auth_user.id.represent=lambda id: DIV(\'\', XML(getUsersProjectsHtml(id)), _name=\'%i\'%id)\n    table=FORM(SQLTABLE(rows, columns=["auth_user.id",\'auth_user.first_name\',\'auth_user.last_name\',\'auth_user.email\'], headers={"auth_user.id":"Remove From","auth_user.first_name":"First Name","auth_user.last_name":"Last Name","auth_user.email":"Email"}),INPUT(_type=\'submit\')) \n    if table.accepts(request.vars): \n        for userid in request.vars.keys():\n            if userid.isdigit():\n                user = db(db.auth_user.id ==int(userid)).select().first()\n                projects = user.projects\n                for item in request.vars[userid]:\n                    projects.remove(int(item))\n\n                db(db.auth_user.id ==int(userid)).update(projects=projects)\n\n    return dict(table=table, footer=footer, header=header, css=css)\n\n@auth.requires_login()\n@auth.requires_membership(\'Admin\')\ndef deleteusers():\n     rows=db(db.auth_user.id>0).select() \n     db.auth_user.id.represent=lambda id: DIV(id,INPUT (_type=\'checkbox\',_name=\'%i\'%id)) \n     table=FORM(SQLTABLE(rows, columns=["auth_user.id",\'auth_user.first_name\',\'auth_user.last_name\',\'auth_user.email\'], headers={"auth_user.id":"Remove User","auth_user.first_name":"First Name","auth_user.last_name":"Last Name","auth_user.email":"Email"}),INPUT(_type=\'submit\')) \n     if table.accepts(request.vars): \n        for item in request.vars.keys():\n            if item.isdigit():\n                db(db.auth_user.id == int(item)).delete()\n        redirect(URL(\'default\',\'deleteusers\'))\n            # or so something not sure what you want to do \n     return dict(table=table, footer=footer, header=header,css=css)\n \n@auth.requires_login()    \n@auth.requires_membership(\'Admin\')\ndef createproject():\n    form = SQLFORM(db.Project, labels={\'openDate\':\'Open Date\', \'closedDate\':\'Closed Date\', \'projNum\':\'Project Number\'})\n    if form.process().accepted:\n       response.flash = \'form accepted\'\n    elif form.errors:\n       response.flash = \'form has errors\'\n    else:\n       response.flash = \'please fill out the form\'\n    return dict(form=form, footer=footer, header=header, css=css)\n\n@auth.requires_login()   \n@auth.requires_membership(\'Admin\')\ndef manageprojects():\n    table = None\n    rows = db(db.Project.archived == False).select()\n    db.Project.id.represent=lambda id: DIV(id,INPUT (_type=\'checkbox\',_name=\'%i\'%id)) \n    #myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc:     IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\n    table = FORM(SQLTABLE(rows,columns=["Project.id","Project.name","Project.projNum",\'Project.openDate\',"Project.closedDate"],headers={"Project.id":"Archive","Project.name":"Project Name","Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #"}),INPUT(_type=\'submit\'))\n    if table.accepts(request.vars):\n        for pID in request.vars.keys():\n            if pID.isdigit():\n                db(db.Project.id ==int(pID)).update(archived=True)\n        redirect(URL(\'default\',\'manageprojects\'))\n    return dict(table=table, footer=footer, header=header,css=css)\n    \n@auth.requires_login()\n@auth.requires_membership(\'Admin\')\n\ndef archiveprojects():\n    table = None\n    rows = db(db.Project.archived == True).select()\n    #myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc:     IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\n    table = SQLTABLE(rows,columns=["Project.name","Project.projNum",\'Project.openDate\',"Project.closedDate"],headers={"Project.name":"Project Name","Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #", "Project.archived":"Archived"})\n    return dict(table=table, footer=footer, header=header, css=css)\n\n\n@auth.requires_login()\n@auth.requires_membership(\'Admin\')\n\ndef manageusers():\n    table = None\n    #rows = db().select(db.Users.ALL)\n    #myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc:     IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\n    #table = SQLTABLE(rows,columns=["Project.name","Project.projNum",\'Project.openDate\',"Project.closedDate"],headers={"Project.name":"Project Name","Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #", "Project.archived":"Archived"})\n    return dict(table=table, footer=footer, header=header, css=css)\n\ndef showform():\n    user = db(db.auth_user.id ==auth.user.id).select().first()\n    projects = None\n    for item in user.projects:\n        rows = db((db.Project.archived == False) & (db.Project.id == item)).select()\n        if projects == None:\n            projects = rows\n        else:\n            projects= projects & rows\n    displayForm = request.vars.displayForm\n    form = None\n    if displayForm == "CCD":\n        form = SQLFORM(db.CCD, labels={\'ccdNum\':\'CCD #\',\'projectNum\': "Project #"})\n    elif displayForm == "RFI":\n        form = SQLFORM(db.RFI, labels={\'rfiNum\':\'RFI #\',\'projectNum\':"Project #", \'requestBy\':\'Request by\', \'dateSent\':\'Date Sent\', \'reqRefTo\':\'Request Referred to\', \'dateRec\':\'Date Received\', \'drawingNum\':\'Drawing #\', \'detailNum\':\'Detail #\', \'specSection\':\'Spec Section #\', \'sheetName\':\'Sheet Name\', \'grids\':\'Grids\', \'sectionPage\':\'Section Page #\', \'description\':\'Description\', \'suggestion\':\'Contractor\\\'s Suggestion\', \'reply\':\'Reply\', \'responseBy\':\'Response by\', \'responseDate\':\'Response Date\'}, fields=[\'rfiNum\',\'projectNum\',\'requestBy\', \'dateSent\', \'reqRefTo\', \'dateRec\', \'drawingNum\', \'detailNum\', \'specSection\', \'sheetName\', \'grids\', \'sectionPage\', \'description\', \'suggestion\', \'reply\', \'responseBy\', \'responseDate\'])\n    elif displayForm == "Submittal":\n        form = SQLFORM(db.Submittal, labels={\'statusFlag\':\'Status Flag\', \'projectNum\':\'Project Number\', \'assignedTo\':\'Assigned to\'})\n    elif displayForm == "ProposalRequest":\n        form = SQLFORM(db.ProposalRequest, labels={\'reqNum\':\'Request #\', \'amendNum\':\'Amendment #\', \'projectNum\':\'Project #\', \'subject\':\'Subject\', \'propDate\':\'Proposal Date\', \'sentTo\':\'Sent to\', \'cc\':\'CC\', \'description\':\'Description\'})\n    elif displayForm == "Proposal":\n        form = SQLFORM(db.Proposal, labels={\'reqNum\':\'Request #\', \'projectNum\':\'Project Number\', \'propDate\':\'Proposal Date\'})\n    elif displayForm == "MeetingMinutes":\n        form = SQLFORM(db.MeetingMinutes, labels={\'meetDate\':\'Meeting Date\'})\n    elif displayForm == "Photo":                          #WILL NEED TO CHANGE TO SHOW PHOTOS!!!!\n        form = SQLFORM(db.Photos, labels={\'projectNum\':\'Project Number\', \'title\':\'Title\', \'description\':\'Description\', \'photo\':\'Photo\'}, fields = [\'projectNum\',\'title\',\'description\',\'photo\'])\n\n    if form != None:\n        if form.process().accepted:\n            response.flash = T(\'form accepted\')\n        elif form.errors:\n            response.flash = \'form has errors\'\n        else:\n            response.flash = \'please fill out the form\'\n    return dict(displayForm=displayForm,\n                form=form,\n                myProfileForm=myProfileForm,\n                projects=projects,\n                footer=footer,\n                header=header,\n                css=css)\n\n@auth.requires_login()\ndef formtable():\n    user = db(db.auth_user.id ==auth.user.id).select().first()\n    projects = None\n    for item in user.projects:\n        rows = db((db.Project.archived == False) & (db.Project.id == item)).select()\n        if projects == None:\n            projects = rows\n        else:\n            projects= projects & rows\n    formType = request.vars.formType\n    table = None\n    image = None\n    fullTable = True\n    if formType == "CCD":\n        rows = db(db.CCD.projectNum == str(request.vars.projectNum)).select()\n        for row in rows:\n            row.file = str(URL(\'default\',\'download\',args=row.file))[1:]\n        myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \'content\': lambda row, rc: IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\n        table = SQLTABLE(rows,columns=["CCD.ccdNum",\'CCD.file\'],headers={"CCD.ccdNum":"CCD #","CCD.file":"CCD File"},upload="http://127.0.0.1:8000")\n    \n    elif formType == "RFI":\n        rows = db(db.RFI.projectNum == str(request.vars.projectNum)).select()\n        table = SQLTABLE(rows,_width="800px",       \n            columns=["RFI.rfiNum","RFI.dateSent","RFI.reqRefTo","RFI.dateRec","RFI.responseBy","RFI.responseDate","RFI.statusFlag"],headers=\n            {"RFI.rfiNum":"RFI #","RFI.dateSent":"Date Sent","RFI.reqRefTo":"Request Referred To","RFI.dateRec":"Date Received","RFI.responseDate":"Response Date","RFI.responseBy":"Response By","RFI.statusFlag":"Status Flag"})\n    \n    elif formType == "Submittal":\n        rows = db(db.Submittal.projectNum == str(request.vars.projectNum)).select()\n        for row in rows:\n            row.submittal = str(URL(\'default\',\'download\',args=row.submittal))[1:]\n        table = SQLTABLE(rows, columns=["Submittal.assignedTo","Submittal.statusFlag","Submittal.submittal"],\n         headers={"Submittal.assignedTo":"Assigned To","Submittal.statusFlag":"Status Flag","Submittal.submittal":"Submitted File"},upload="http://127.0.0.1:8000")\n    \n    elif formType == "ProposalRequest":\n        rows = db(db.ProposalRequest.projectNum == str(request.vars.projectNum)).select()\n        table = SQLTABLE(rows, columns=["ProposalRequest.reqNum","ProposalRequest.amendNum","ProposalRequest.sentTo","ProposalRequest.propDate"],\n         headers={"ProposalRequest.reqNum":"Request Number","ProposalRequest.amendNum":"Amendment Number","ProposalRequest.sentTo":"Sent To","ProposalRequest.propDate":"Proposal Request Date"})\n    \n    elif formType == "Proposal":\n        rows = db(db.Proposal.projectNum == str(request.vars.projectNum)).select()\n        for row in rows:\n            row.file = str(URL(\'default\',\'download\',args=row.file))[1:]\n        table = SQLTABLE(rows, columns=["Proposal.reqNum","Proposal.propDate","Proposal.file"],\n        headers={"Proposal.reqNum":"Proposal Number","Proposal.propDate":"Proposal Date","Proposal.file":"File Submitted"},upload="http://127.0.0.1:8000")\n    \n    elif formType == "MeetingMinutes":\n        rows = db().select(db.MeetingMinutes.ALL)\n        for row in rows:\n            row.file = str(URL(\'default\',\'download\',args=row.file))[1:]\n        table = SQLTABLE(rows, columns=["MeetingMinutes.meetDate","MeetingMinutes.file"],\n        headers={"MeetingMinutes.meetDate":"Meeting Date","MeetingMinutes.file":"Submitted File"},upload="http://127.0.0.1:8000")\n    \n    elif formType == "Photo":    \n        rows = db(db.Photos.projectNum == str(request.vars.projectNum)).select()\n        db.Photos.flickrURL.represent=lambda flickrURL: A("View Photo", _href=flickrURL, _target="_blank")\n        table = SQLTABLE(rows, columns=["Photos.title","Photos.description","Photos.flickrURL"], headers={"Photos.title":"Title", "Photos.description":"Description","Photos.flickrURL":"Photo"})\n\n    if len(rows)==0:\n        table = "There are no documents uploaded for this project section as of yet."\n        fullTable = False\n\n    return dict(formType=formType,\n                myProfileForm=myProfileForm,\n                projects=projects,\n                table= table,\n                image=image,\n                footer=footer,\n                header=header,\n                css=css,\n                fullTable=fullTable)\n\ndef getOtherRoles(id):\n    if auth.has_membership(user_id=id, role="Admin"):\n        return "General"\n    else:\n        return "Admin"\ndef getUserRole(id):\n    if auth.has_membership(user_id=id, role="Admin"):\n        return "Admin"\n    else:\n        return "General"\n\ndef getAllProjectsHtml(id):\n    html=\'\'\n    projects = db(db.Project.archived == False).select()\n    user = db(db.auth_user.id == id).select().first()\n\n    for row in projects:\n        if user.project != None:\n            if row.id not in user.projects:\n                html +=  \'<input value="\'+str(row.id)+\'" type="checkbox" name="\'+str(user.id)+\'"/>\'+str(row.id)+"</br>"\n    return html \n\ndef getUsersProjectsHtml(id):\n    html = \'\'\n\n    \n    user = db(db.auth_user.id == id).select().first()\n    if user.projects != None and len(user.projects)>=1:\n        for projId in user.projects:\n            project = db((db.Project.archived == False) & (db.Project.id == projId)).select().first()\n            html +=  \'<input value="\'+str(project.id)+\'" type="checkbox" name="\'+str(user.id)+\'"/>\'+str(project.id)+"</br>"\n    else:\n        html = "<p>Not on any Projects</p>"\n    return html\n\nresponse._vars=response._caller(addtoproject)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py", line 468, in <module>\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/tools.py", line 2575, in f\n    return action(*a, **b)\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/tools.py", line 2575, in f\n    return action(*a, **b)\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py", line 230, in addtoproject\n    table=FORM(SQLTABLE(rows, columns=["auth_user.id",\'auth_user.first_name\',\'auth_user.last_name\',\'auth_user.email\'], headers={"auth_user.id":"Add To","auth_user.first_name":"First Name","auth_user.last_name":"Last Name","auth_user.email":"Email"}),INPUT(_type=\'submit\'))\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/sqlhtml.py", line 2207, in __init__\n    r = represent(field,r,record)\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/sqlhtml.py", line 44, in represent\n    return f(value)\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py", line 229, in <lambda>\n    db.auth_user.id.represent=lambda id: DIV(\'\', XML(getAllProjectsHtml(id)), _name=\'%i\'%id)\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py", line 450, in getAllProjectsHtml\n    if user.project != None:\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/dal.py", line 5657, in __getattr__\n    return self[key]\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/dal.py", line 5648, in __getitem__\n    return dict.__getitem__(self, key)\nKeyError: \'project\'\n'
p11
s.