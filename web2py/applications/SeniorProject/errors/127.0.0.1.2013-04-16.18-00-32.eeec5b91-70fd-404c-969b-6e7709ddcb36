(dp1
S'output'
p2
S"<type 'exceptions.TypeError'> sequence item 10: expected string, int found"
p3
sS'layer'
p4
S'/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\n\n#Import necessary modules\nimport flickrapi\nimport appy\nfrom datetime import datetime\n\nimport mechanize\nimport cookielib\n#Flickr API keys\nKEY = \'614fd86a34a00d38293c7e803d14c3ab\'\nSECRET_KEY = \'ad86826c3187eb4d\'\nUSER_ID = \'93142072@N05\'\n\n#Create the static links to be passed in to the views\nheader = DIV(A(IMG(_src=URL(\'static\',\'images/bluebannertext.jpg\')), _href=URL(\'default\',\'index\')), _id="header")\nheader_archived = DIV(A(IMG(_src=URL(\'static\',\'images/bluebannertext.jpg\'))), _id="header")\nfooter = DIV(A("Home Page", _href=URL(\'default\',\'index\')), TD("------"), A("Log out", _href=URL(\'default\',\'user\', args=\'logout\')), _id="footer")\ncss = "/SeniorProject/static/css/bluestyle.css"\n    \nif not db(db.PhotoToken).isempty():\n    tok = (db.PhotoToken(db.PhotoToken.id>0)).token\n    flickr = flickrapi.FlickrAPI(KEY, SECRET_KEY, token = tok)     #create a flickr object\nelse:\n    flickr = flickrapi.FlickrAPI(KEY, SECRET_KEY)\n\n#Returns the current user (object) of the site\ndef getUser():\n    user = None\n    if auth.user != None:\n        user = db(db.auth_user.id == auth.user.id).select().first()\n    return user\n\n\nif auth.user != None:\n    record = auth.user.id     #Gets the info for the current user\n    myProfileForm = SQLFORM(db.auth_user, record, showid=False, labels={\'first_name\':\'First Name\', \'last_name\':\'Last Name\', \'email\':\'E-mail\', \'phone\':\'Phone Number\', \'password\':\'New Password\'}, fields = [\'first_name\',\'last_name\',\'email\',\'phone\'],_id="profileForm")\nelse: \n    myProfileForm = SQLFORM(db.auth_user, showid=False, labels={\'first_name\':\'First Name\', \'last_name\':\'Last Name\', \'email\':\'E-mail\', \'phone\':\'Phone Number\', \'password\':\'New Password\'}, fields = [\'first_name\',\'last_name\',\'email\',\'phone\'],_id="profileForm")\n#Returns the form that will be displayed when the "My Profile" tab is clicked (the paratmeter passed in is a user object)\ndef getProfileFormForUser(user):\n    if user != None:        #We will display the form with the user\'s current information filled in\n        record = user.id    #Gets the info for the current user    \n        myProfileForm = SQLFORM(db.auth_user, record, showid=False, labels={\'first_name\':\'First Name\', \'last_name\':\'Last Name\', \'email\':\'E-mail\', \'phone\':\'Phone Number\', \'password\':\'New Password\'}, fields = [\'first_name\',\'last_name\',\'email\',\'phone\'],_id="profileForm")\n    else:                   #Display the form with no fields filled in \n        myProfileForm = SQLFORM(db.auth_user, showid=False, labels={\'first_name\':\'First Name\', \'last_name\':\'Last Name\', \'email\':\'E-mail\', \'phone\':\'Phone Number\', \'password\':\'New Password\'}, fields = [\'first_name\',\'last_name\',\'email\',\'phone\'],_id="profileForm")\n    return myProfileForm\n\ndef getProjectsForUser(user):\n    projects = []\n    if user != None and user.projects != None:\n        if auth.has_membership(user_id=user.id, role="Admin"):\n            projects = db(db.Project.archived == False).select()\n        else:\n            for item in user.projects:\n                rows = db((db.Project.archived == False) & (db.Project.projNum == item)).select()\n                if len(projects) ==0:\n                    projects = rows\n                else:\n                    projects= projects & rows   \n    return projects\n\n#Checks if the current token is valid; if not, then redirects to flickr to be authenticated and get a token\ndef setUpFlickrStuff():   \n    if not db(db.PhotoToken).isempty():                                #We already have a PhotoToken, so use the token when creating a flickr object\n        tok = (db.PhotoToken(db.PhotoToken.id > 0)).token              #Get the token from the database\n        flickr = flickrapi.FlickrAPI(KEY, SECRET_KEY, token = tok)     #Create a flickr object\n    else:\n        flickr = flickrapi.FlickrAPI(KEY, SECRET_KEY)\n    \n    if not db(db.PhotoToken).isempty():\n        #We have a token, but it might not be valid\n        #Check the token. If there was an error, then delete the token from the database\n        try:\n            flickr.auth_checkToken() \n        except flickrapi.FlickrError:\n            db(db.PhotoToken.id > 0).delete()\n    if db(db.PhotoToken).isempty():                 #We don\'t have the token yet, or it was deleted because it wasn\'t valid\n        if request.vars.frob:                       #If the frob is in the request (coming back from being authenticated by flickr)\n            db.PhotoToken[0] = {"token" : flickr.get_token(request.vars.frob)}    #Insert a new row into the database with the new token\n        else:\n            url = flickr.web_login_url(\'write\')     #Get the url to go to in order to authenticate\n            br = mechanize.Browser()\n            # Browser options\n            br.set_handle_equiv(True)\n            br.set_handle_gzip(True)\n            br.set_handle_redirect(True)\n            br.set_handle_referer(True)\n            br.set_handle_robots(False)\n\n            # Cookie Jar\n            cj = cookielib.LWPCookieJar()\n            br.set_cookiejar(cj)\n    #Returns all the non-archived projects the specified user is associated with (the parameter passed in is a user object)\n\n\n            # Follows refresh 0 but not hangs on refresh > 0\n            br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)\n            r = br.open(url)\n            br.select_form("login_form")\n            br.form["login"]="alyssealyssetest"\n            br.form["passwd"]="finholt1"\n            br.find_control(".persistent").items[0].selected=True\n            br.submit()      \n\n    thing =flickr.sign({\n        "method":"flickr.photos.getInfo",\n        "api_key":"614fd86a34a00d38293c7e803d14c3ab",\n        "photo_id":8655391465,\n        "secret":"",\n        "format":"json",\n        "nojsoncallback":1,\n        "auth_token":"72157632878384274-4abc077968f36490"  \n\n    })  \n    import tkMessageBox\n    tkMessageBox.showinfo(title="Greetings", message=thing)                         #Redirect to that website\n            \n            \n#Do all the set-up/initializing that is necessary for using the site (calling the above functions)   \nuser = getUser()                            #Get the current user of the site\nprojects = getProjectsForUser(user)         #Get the projects that the user is associated with\nmyProfileForm = getProfileFormForUser(user) #Get the form for the "My Profile" tab\nsetUpFlickrStuff()                          #Make sure all the flickr stuff is good to go (make sure we\'re authenticated)\n\n\n#Called when a new photoForm is submitted (called from showform when the photoForm is accepted)\ndef uploadPhotoToFlickr(photoForm):\n    #Get the info from the submitted photo form\n    photoWeb2pyId = photoForm.vars.id\n    projNum = photoForm.vars.projectNum\n    title = photoForm.vars.title\n    descr = photoForm.vars.description\n    name = "applications/SeniorProject/uploads/" + photoForm.vars.photo\n    \n    #Upload the photo to flickr and get the id of the photo in order to construct the url of the photo\n    idElement = flickr.upload(filename=name, title=title, description=descr)\n    id = idElement.find(\'photoid\').text\n    flickrUrl =  "http://www.flickr.com/photos/"+USER_ID+"/"+str(id)+"/"  \n\n    #Delete the corresponding row in our database (because we don\'t want to store the actual photo no our server)\n    db(db.Photos.id == photoWeb2pyId).delete()\n    \n    #Create a new row in our database with all the same info as the deleted row, but without the photo file\n    db.Photos.insert(projectNum=projNum, flickrURL=flickrUrl, title=title, description=descr)\n\n#Returns a dictionary used by the view default/index.html (which is the home screen)\n@auth.requires_login()\ndef index():\n    #response.flash = "Welcome " + auth.user.first_name + "!"    #Welcome the user to the site\n    response.flash = "Erik Smellz"\n    projectNums = []                                            #Get the project numbers of all the projects the user is associated with\n    for project in projects:\n        projectNums.append(project.projNum) \n    \n    #Get all the newsfeed entries for the user\'s projects, ordering by time created (most recent entry listed first)\n    entries = db(db.NewsFeed.projectNum.belongs(projectNums)).select(orderby=~db.NewsFeed.created_on)\n    \n    if entries == None or len(entries) == 0:                    #If there aren\'t any entries, set entries to None (this is checked in the View)\n        entries = None\n    elif len(entries) > 20:\n        entries = entries[0:20]                                 #Only display the first 20 newsfeed entries on the homescreen\n    \n    return dict(projects=projects,\n                myProfileForm=myProfileForm,\n                header=header,\n                footer=footer,\n                css=css,\n                entries=entries)\n\n#Created by web2py\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth(), header=header, footer=footer, css=css)\n\n#Created by web2py\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request,db)\n\n#Created by web2py\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n#Created by web2py\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud(), css=css, footer=footer)\n\n#This is called when an admin clicks "Create User". It returns a dictionary used by the view default/regiser.html\n@auth.requires_login()\n@auth.requires_membership(\'Admin\')\ndef register():\n    form = SQLFORM(db.auth_user)                                            #Create a form with the fields for a user\n    \n    if form.process().accepted:\n       response.flash = str(request.vars.first_name) + \' created as user\'\n    elif form.errors:\n       response.flash = \'Form has errors\'\n    else:\n       response.flash = \'Please create a user\'\n       \n    if form.validate():                                                     #Add the new user with membership in the General group (rather than Admin)\n        admin_user = auth.user\n        auth.get_or_create_user(form.vars)\n        auth.add_membership(auth.id_group(role="General"),auth.user_id)\n        auth.user = admin_user\n        redirect(URL(\'default\',\'register\'))                                 #Redirect to the same screen so the admin can create more users if needed\n        \n    return dict(form=form, header=header, footer=footer, css=css)\n\n#This is called when an admin clicks "User Permissions". It returns a dictionary used by the view default/changepermissions.html\n@auth.requires_login()\n@auth.requires_membership(\'Admin\')\ndef changepermissions():\n     #Get all the users in alphabetical order, except the current user (don\'t want a user to change his own permissions)\n     rows = db(db.auth_user.id != auth.user.id).select(orderby=db.auth_user.last_name)     \n     #Represent the user\'s id as a dropdown with the values of Admin or General, with the current value as the user\'s current group membership\n     db.auth_user.id.represent = lambda id: SELECT(getUserRole(id), XML(getOtherRoles(id)), _name=\'%i\'%id) \n     #Create a table with all the users and their current memberships\n     table = FORM(SQLTABLE(rows, columns=["auth_user.id",\'auth_user.last_name\',\'auth_user.first_name\',\'auth_user.email\'], headers={"auth_user.id":"Change Permission","auth_user.first_name":"First Name","auth_user.last_name":"Last Name","auth_user.email":"Email"}),INPUT(_type=\'submit\'))\n \n     if table.accepts(request.vars): \n        for item in request.vars.keys():               #For each user selected..\n            if item.isdigit():\n                if not auth.has_membership(user_id=int(item), role=request.vars[item]):\n                    if auth.has_membership(user_id=int(item), role=getUserRole(int(item))): #in case they are in their individual user group. We should only delete them from the group we are in if they are switching from General to Admin or vice versa.\n                        auth.del_membership(auth.id_group(role=getUserRole(int(item))),int(item))\n                    auth.add_membership(auth.id_group(role=request.vars[item]),int(item)) #Add the user\'s membership\n                    \n        session.flash = \'Permissions changed\'\n        redirect(URL(\'default\',\'changepermissions\'))    #Redirect to the same screen so the admin can see the current permission level of every user\n        \n     elif table.errors:\n         session.flash = \'An error has occured\'\n     else:\n         session.flash = \'Modify user permissions\'\n     \n     return dict(table=table, footer=footer, header=header, css=css)\n\n#This is called when an admin clicks "Add Users to Projects". It returns a dictionary used by the view default/addtoproject.html\n@auth.requires_membership("Admin")\n@auth.requires_login()\ndef addtoproject():\n    rows = db(db.auth_user.id > 0).select(orderby=db.auth_user.last_name)        #Get all the users of the site (in alphabetical order)\n    #Represent the user\'s id as checkboxes of possible projects for the user to be added to\n    db.auth_user.id.represent = lambda id: DIV(\'\', XML(getAllProjectsHtml(id)), _name=\'%i\'%id) \n    #Create a table of the information\n    table = FORM(SQLTABLE(rows, columns=["auth_user.id",\'auth_user.last_name\',\'auth_user.first_name\',\'auth_user.email\'], headers={"auth_user.id":"Add To","auth_user.first_name":"First Name","auth_user.last_name":"Last Name","auth_user.email":"Email"}), INPUT(_type=\'submit\')) \n    \n    if table.accepts(request.vars):\n        for userid in request.vars.keys():           #For each user selected..\n            if userid.isdigit():\n                projectList = db(db.auth_user.id == int(userid)).select().first().projects\n                if type(request.vars[userid]) is list:\n                    for item in request.vars[userid]:\n                        projectList.append(int(item))\n                else:\n                    projectList.append(int(request.vars[userid]))\n                db(db.auth_user.id ==int(userid)).update(projects=projectList)\n        redirect(URL(\'default\',\'addtoproject\'))\n    return dict(table=table, footer=footer, header=header, css=css)\n\n#This is called when an admin clicks "Delete Users from Projects". It returns a dictionary used by the view default/deletefromproject.html\n@auth.requires_membership("Admin")\n@auth.requires_login()\ndef deletefromproject():\n    rows = db(db.auth_user.id > 0).select(orderby=db.auth_user.last_name)    #Get all the users of the site (in alphabetical order)\n    #Represents the user\'s id as checkboxes of all the user\'s associated projects\n    db.auth_user.id.represent = lambda id: DIV(\'\', XML(getUsersProjectsHtml(id)), _name=\'%i\'%id) \n    #Create a table of the information\n    table = FORM(SQLTABLE(rows, columns=["auth_user.id",\'auth_user.last_name\',\'auth_user.first_name\',\'auth_user.email\'], headers={"auth_user.id":"Remove From","auth_user.first_name":"First Name","auth_user.last_name":"Last Name","auth_user.email":"Email"}),INPUT(_type=\'submit\')) \n   \n    if table.accepts(request.vars): \n        for userid in request.vars.keys():                                    #For each user selected..\n            if userid.isdigit():\n                user = db(db.auth_user.id ==int(userid)).select().first()\n                projects = user.projects\n                \n                if type(request.vars[userid]) is list:\n                    for item in request.vars[userid]:\n                        projects.remove(int(item))\n                else:\n                    projects.remove(int(request.vars[userid]))\n                db(db.auth_user.id ==int(userid)).update(projects=projects)\n        redirect(URL(\'default\',\'deletefromproject\'))\n    return dict(table=table, footer=footer, header=header, css=css)\n\n#This is called when an admin clicks "Delete User". It returns a dictionary used by the view default/deleteusers.html\n@auth.requires_login()\n@auth.requires_membership(\'Admin\')\ndef deleteusers():\n     #Get all the users on the site in alphabetical order, except the current user (don\'t want someone to delete himself)\n     rows = db(db.auth_user.id != auth.user.id).select(orderby=db.auth_user.last_name)  \n     db.auth_user.id.represent = lambda id: DIV(id, INPUT (_type=\'checkbox\',_name=\'%i\'%id)) #Create a checkbox for each user\n     #Create a table of the information\n     table = FORM(SQLTABLE(rows, columns=["auth_user.id",\'auth_user.last_name\',\'auth_user.first_name\',\'auth_user.email\'], headers={"auth_user.id":"Remove User","auth_user.first_name":"First Name","auth_user.last_name":"Last Name","auth_user.email":"Email"}), INPUT(_type=\'submit\'))\n     \n     if table.process().accepted:\n       response.flash = str(request.vars.first_name) + \' deleted as user\'\n     elif table.errors:\n       response.flash = \'Form has errors\'\n     else:\n       response.flash = \'Select users to delete\'\n     \n     if table.accepts(request.vars): \n        for item in request.vars.keys():                     #For each user selected..\n            if item.isdigit():\n                db(db.auth_user.id == int(item)).delete()    #Delete the user that was selected\n                \n        session.flash = \'User deleted\'\n        redirect(URL(\'default\',\'deleteusers\'))               #Redirect back to the same screen\n\n     return dict(table=table, footer=footer, header=header,css=css)\n\n#This is called when an admin clicks "Add Project". It returns a dictionary used by the view default/createproject.html \n@auth.requires_login()    \n@auth.requires_membership(\'Admin\')\ndef createproject():\n    #Create a form for inserting a new project into the database\n    form = SQLFORM(db.Project, labels={\'projNum\':\'Project Number\', \'openDate\':\'Open Date\', \'closedDate\':\'Closed Date\'})\n    \n    if form.process().accepted:\n       response.flash = str(request.vars.name) + \' has been created\'\n    elif form.errors:\n       response.flash = \'Form has errors\'\n    else:\n       response.flash = \'Please create a project\'\n       \n    return dict(form=form, footer=footer, header=header, css=css)\n\n#This is called when an admin clicks "Manage Projects". It returns a dictionary used by the view default/manageprojects.html\n@auth.requires_login()   \n@auth.requires_membership(\'Admin\')\ndef manageprojects():\n    table = None\n    rows = db(db.Project.archived == False).select() #Get all the non-archived projects\n    \n    if len(rows) == 0:\n        table = "There are currently no non-archived projects"\n        \n    else:   #There is at least one on-going project\n        db.Project.id.represent = lambda id: DIV(id, INPUT(_type=\'checkbox\',_name=\'%i\'%id)) #Represent the project id as a checkbox\n        #Create a table of all the non-archived projects, each with a checkbox for the option to archive\n        table = FORM(SQLTABLE(rows, columns=["Project.id","Project.name","Project.projNum",\'Project.openDate\',"Project.closedDate"], headers={"Project.id":"Archive","Project.name":"Project Name","Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #"}), INPUT(_type=\'submit\'))\n        \n        table["_onsubmit"] = "return confirm(\'Are you sure you want to archive this project?\');"\n        \n        if table.process().accepted:\n           response.flash = str(request.vars.name) + \' has been archived\'\n        elif table.errors:\n           response.flash = \'Form has errors\'\n        else:\n           response.flash = \'Select a project to archive\'\n        \n        if table.accepts(request.vars):\n            for pID in request.vars.keys():                             #For each project that we want to archive..\n                if pID.isdigit():\n                    db(db.Project.id == int(pID)).update(archived=True) #Set archived=True for the project and update the database\n                    \n            redirect(URL(\'default\',\'manageprojects\'))                   #Redirect to the same screen\n            \n    return dict(table=table, footer=footer, header=header,css=css)\n\n#This is called when an admin clicks "Archived Projects". It returns a dictionary used by the view default/archiveprojects.html    \n@auth.requires_login()\n@auth.requires_membership(\'Admin\')\ndef archiveprojects():\n    table = None\n    rows = db(db.Project.archived == True).select()                #Get all the archived projects\n    \n    if len(rows) == 0:\n        table = "There are no projects that have been achived."\n        \n    else:                                                          #There is at least one archived project\n        #This column contains the option to view a project when "View" is clicked. It opens a new tab to display the selected project                                                      \n        extracolumn = [{\'label\':\'View Archived Project\', #label of the entirecolumn\n                        \'class\': \'\', #class name of the header\n                        \'width\': \'\', #width in pixels or %\n                        \'content\': lambda row, rc: A("View", _href=URL(\'default\',\'viewArchive\', args=row.id), _target=\'new\'), #what goes in each row\n                        \'selected\': False #aggregate class selected to this column\n                       }]\n        #Create a table of the archived projects, with the rightmost column containing the extracolumn\n        table = SQLTABLE(rows, columns=["Project.name","Project.owner","Project.projNum",\'Project.openDate\',"Project.closedDate"], headers={"Project.name":"Project Name", "Project.owner":"Owner", "Project.openDate":"Open Date", "Project.closedDate":"Closed Date", "Project.projNum":"Project #"}, extracolumns=extracolumn)\n    \n    return dict(table=table, footer=footer, header=header, css=css)\n\n#This is called when an admin clicks "View" on the Archived Projects screen. It returns a dictionary used by the view default/viewArchive.html    \n@auth.requires_login()\n@auth.requires_membership(\'Admin\')\ndef viewArchive():\n    #Get the archived project that the user wants to view (the "archivedprojects" method puts the project id in args)\n    project = db(db.Project.id == request.args(0)).select().first()  \n    return dict(project=project, header=header_archived, css=css)\n\n#This is called when a user clicks on "News Feed" for a project in the sidebar. It returns a dictionary used by the view default/newsfeed.html\n@auth.requires_login()\ndef newsfeed():\n    project = db(db.Project.projNum == request.vars.projectNum).select().first() #Get the current project\n    \n    #Create an SQLFORM for the user to make a new status update\n    form = SQLFORM(db.NewsFeed, labels={\'description\':\'New Status Update\'}, fields=[\'description\'])\n    form.vars.projectNum = request.vars.projectNum                        #Initialize the project number to be the current project\'s number\n    form.vars.type = "human"                                              #Initialize the type to be" human"\n    form.vars.created_on = datetime.today()                               #Initialize the time created to be the current date and time\n    form.vars.creator = auth.user.first_name + " " + auth.user.last_name  #Initiaize the creator to be the current user\n    \n    if form != None:\n        if form.process().accepted:\n            response.flash = T(\'Status created successfully\')\n        elif form.errors:\n            response.flash = \'Form has errors\'\n                \n    #Get all the newsfeed entries, in order, with the most recent entry first\n    entries = db(db.NewsFeed.projectNum == request.vars.projectNum).select(orderby=~db.NewsFeed.created_on) \n    if entries == None or len(entries) == 0:                                     #If there are no entries, set entries to None\n        entries = None\n        \n    return dict(form=form, entries=entries, fullTable=True, project=project, projects=projects, myProfileForm=myProfileForm, header=header, footer=footer, css=css)\n\n#This is called when a user clicks on "News Feed" on an archived project\'s sidebar. It returns a dictionary used by the view default/newsfeedarchived.html\n@auth.requires_login()\n@auth.requires_membership(\'Admin\')\ndef newsfeedarchived():\n    project = db(db.Project.projNum == request.vars.projectNum).select().first() #Get the current project\n    \n    #Get all the newsfeed entries, in order, with the most recent entry first\n    entries = db(db.NewsFeed.projectNum == request.vars.projectNum).select(orderby=~db.NewsFeed.created_on)   \n    if entries == None or len(entries) == 0:                                     #If there are no entries, set entries to None\n        entries = None   \n        \n    return dict(entries=entries, fullTable=True, project=project, header=header_archived, css=css)  \n\n#This is called when a user clicks on any of the tabs (to upload/generate a new document). It returns a dictionary used by the view default/showform.html\n@auth.requires_login() \ndef showform():\n    displayForm = request.vars.displayForm                                       #Get the type of form we want to display\n    form = None                                                                  #The SQLFORM that we will display\n    \n    if displayForm == "CCD":\n        #Create a form with all the CCD fields\n        form = SQLFORM(db.CCD, labels={\'ccdNum\':\'CCD #\',\'projectNum\': "Project #"}) \n        rows = db(db.CCD.projectNum == str(request.vars.projectNum)).select()    #Get all the CCD\'s for the current project\n        form.vars.ccdNum = len(rows) + 1               #Initialize the form\'s CCD number to be one more than the current number of CCDs               \n        form.vars.projectNum = request.vars.projectNum #Initialize the form\'s project number to be the current project\'s number\n        \n    elif displayForm == "RFI":\n        #Create a dropdown of all the users\' names for the Request Referred To field\n        db.RFI.reqRefTo.requires = IS_IN_DB(db, \'auth_user.id\', \'%(first_name)s\'+\' \'+\'%(last_name)s\')\n        #Create a form with the RFI fields specified by the fields parameter\n        form = SQLFORM(db.RFI, labels={\'rfiNum\':\'RFI #\',\'projectNum\':"Project #", \'requestBy\':\'Request by\', \'dateSent\':\'Date Sent\', \'reqRefTo\':\'Request Referred to\', \'drawingNum\':\'Drawing #\', \'detailNum\':\'Detail #\', \'specSection\':\'Spec Section #\', \'sheetName\':\'Sheet Name\', \'grids\':\'Grids\', \'sectionPage\':\'Section Page #\', \'description\':\'Description\', \'suggestion\':\'Contractor\\\'s Suggestion\', \'responseBy\':\'Need Response By\'}, fields=[\'rfiNum\',\'projectNum\',\'requestBy\', \'dateSent\', \'reqRefTo\', \'drawingNum\', \'detailNum\', \'sheetName\', \'grids\', \'specSection\', \'sectionPage\', \'description\', \'suggestion\', \'responseBy\'])\n        \n        currentProj = db(db.Project.projNum == str(request.vars.projectNum)).select().first()\n        rows = db(db.RFI.projectNum == str(request.vars.projectNum)).select()    #Get all the RFI\'s for the current project       \n        form.vars.rfiNum = len(rows) + 1               #Initialize the form\'s RFI number to be one more than the current number of RFIs\n        form.vars.requestBy = auth.user.first_name + " " + auth.user.last_name #Initialize the form\'s RequestBy field to be the current user\n        form.vars.statusFlag = "Outstanding"           #Set the status flag (this field isn\'t displayed on the screen)\n        form.vars.projectNum = request.vars.projectNum #Initialize the form\'s project number to be the current project\'s number \n        form.vars.projectName = currentProj.name       #Set the form\'s project name to be the current project\'s name (not displayed)\n        form.vars.owner = currentProj.owner            #Set the form\'s project owner to be the current project\'s owner (not displayed)\n                \n    elif displayForm == "Submittal":\n        #Create a dropdown for the submittal type\n        db.Submittal.subType.requires = IS_IN_SET([\'Samples\',\'Shop Drawing\',\'Product Data\'])\n        #Create a dropdown of all the users\' names for the Assigned To field\n        db.Submittal.assignedTo.requires = IS_IN_DB(db, \'auth_user.id\', \'%(first_name)s\'+\' \'+\'%(last_name)s\')\n        #Create a dropdown for the status flag\n        db.Submittal.statusFlag.requires = IS_IN_SET([\'Approved\',\'Resubmit\',\'Approved with Comments\',\'Submitted for Review\'])\n        #Create a form with all the submittal fields\n        form = SQLFORM(db.Submittal, labels={\'statusFlag\':\'Status Flag\', \'projectNum\':\'Project Number\', \'subType\':\'Submittal Type\', \'sectNum\':\'Section Number\',\'assignedTo\':\'Assigned to\'}) \n        form.vars.projectNum = request.vars.projectNum #Initialize the form\'s project number to be the current project\'s number\n        \n    elif displayForm == "ProposalRequest":  \n        #Create a form with the Proposal Request fields specified by the fields parameter   \n        form = SQLFORM(db.ProposalRequest, labels={\'reqNum\':\'Request #\', \'amendNum\':\'Amendment #\', \'projectNum\':\'Project #\', \'subject\':\'Subject\', \'propDate\':\'Proposal Date\', \'sentTo\':\'Sent to\', \'cc\':\'CC\', \'description\':\'Description\'}, fields =[ \'reqNum\',\'amendNum\',\'projectNum\',\'subject\',\'propDate\',\'sentTo\',\'cc\',\'description\'])\n        \n        currentProj = db(db.Project.projNum == str(request.vars.projectNum)).select().first()\n        rows = db(db.ProposalRequest.projectNum == str(request.vars.projectNum)).select() #Get all the ProposalRequests for the current project\n        form.vars.reqNum = len(rows) + 1               #Initialize the request number to be one more than the current number of proposal requests\n        form.vars.statusFlag = "Open"                  #Set the status flag (this field isn\'t displayed on the screen)       \n        form.vars.creator = auth.user.id               #Initialize the creator to be the current user\'s id (this field also isn\'t displayed)\n        form.vars.projectNum = request.vars.projectNum #Initialize the form\'s project number to be the current project\'s number\n        form.vars.projectName = currentProj.name   #Set the form\'s project name to be the current project\'s name (not displayed)\n        form.vars.owner = currentProj.owner            #Set the form\'s project owner to be the current project\'s owner (not displayed)\n        \n    elif displayForm == "Proposal":\n        propReqs = db(db.ProposalRequest.projectNum == str(request.vars.projectNum)).select()\n        propNumList = []\n        for propReq in propReqs:\n            propNumList.append(propReq.reqNum)                   #Get all the Proposal Request numbers for the project\n        db.Proposal.propReqRef.requires = IS_IN_SET(propNumList) #Create a dropdown for the Proposal Request Reference #\n        #Create a form with all the Proposal fields \n        form = SQLFORM(db.Proposal, labels={\'propNum\':\'Proposal #\', \'propReqRef\':\'Proposal Request Reference #\', \'projectNum\':\'Project Number\', \'propDate\':\'Proposal Date\'})\n        \n        rows = db(db.Proposal.projectNum == str(request.vars.projectNum)).select() #Get all the Proposals for the current project\n        form.vars.propNum = len(rows) + 1              #Initialize the proposal number to be one more than the current number of proposals\n        form.vars.projectNum = request.vars.projectNum #Initialize the form\'s project number to be the current project\'s number\n        \n    elif displayForm == "MeetingMinutes":\n        #Create a form with all the MeetingMinutes fields\n        form = SQLFORM(db.MeetingMinutes, labels={\'projectNum\':\'Project Number\',\'meetDate\':\'Meeting Date\'})\n        form.vars.projectNum = request.vars.projectNum #Initialize the form\'s project number to be the current project\'s number\n        \n    elif displayForm == "Photo": \n        #Create a form with the Photo fields specified by the fields parameter                     \n        form = SQLFORM(db.Photos, labels={\'projectNum\':\'Project Number\', \'title\':\'Title\', \'description\':\'Description\', \'photo\':\'Photo\'}, fields = [\'projectNum\',\'title\',\'description\',\'photo\'])\n        form.vars.projectNum = request.vars.projectNum #Initialize the form\'s project number to be the current project\'s number\n        \n    if form != None:\n        if form.process().accepted:\n            response.flash = T(\'Form accepted\')\n            if displayForm == "Photo":    #If the form submitted is a photo form, we need to upload it to flickr and delete the photo from our database\n                uploadPhotoToFlickr(form)\n            elif displayForm == "RFI":    #If the form submitted is an RFI form, we need to put the name of person the RFI is referred to instead of the id\n                reqUser = db(db.auth_user.id == form.vars.reqRefTo).select().first()\n                row = db(db.RFI.id == form.vars.id).select().first()\n                row.update_record(reqRefTo = reqUser.first_name + " " + reqUser.last_name)\n            elif displayForm == "Submittal": #If the form submitted is a Submittal, we need to put the name of person it is assigned to instead of the id\n                assignTo = db(db.auth_user.id == form.vars.assignedTo).select().first()\n                row = db(db.Submittal.id == form.vars.id).select().first()\n                row.update_record(assignedTo= assignTo.first_name + " " + assignTo.last_name)\n                \n            #Now create a new newsfeed update noting the new submission\n            if displayForm == "MeetingMinutes":\n                displayForm = "Plan for World Domination"\n            description = "A new " + displayForm + " has been added."\n            db.NewsFeed.insert(projectNum=form.vars.projectNum, type="document", created_on=datetime.today(), description=description, creator=auth.user.first_name + " " + auth.user.last_name)\n            db.commit()\n            \n        elif form.errors:\n            response.flash = \'Form has errors\'\n        else:\n            response.flash = \'Please fill out the form\'\n            \n    return dict(displayForm=displayForm,\n                form=form,\n                myProfileForm=myProfileForm,\n                projects=projects,\n                footer=footer,\n                header=header,\n                css=css)\n\n#This is called when a user clicks on a categry in an archived project\'s sidebar. It returns a dictionary used by the view default/formtablearchived.html\n@auth.requires_login()\n@auth.requires_membership(\'Admin\') \ndef formtablearchived():\n    formType = request.vars.formType                                              #Get the type of table to display\n    project =  db(db.Project.projNum == request.vars.projectNum).select().first() #Get the archived project that is currently being viewed\n    table = None                                                                  #The SQLTABLE we will be displaying - set depending on the formType\n    fullTable = True                                                              #Keeps track if there are entries for the category or not\n    \n    if formType == "CCD":\n        rows = db(db.CCD.projectNum == str(request.vars.projectNum)).select()     #Get all the CCDs for the current project\n        for row in rows:\n            row.file = str(URL(\'default\',\'download\',args=row.file))[1:]           #Set the CCD\'s file URL\n        #Create a table of the CCDs, displaying the values given by the columns parameter\n        table = SQLTABLE(rows,columns=["CCD.ccdNum",\'CCD.file\'],headers={"CCD.ccdNum":"CCD #","CCD.file":"CCD File"},upload="http://127.0.0.1:8000")\n    \n    elif formType == "RFI":\n        rows = db(db.RFI.projectNum == str(request.vars.projectNum)).select()     #Get all the RFIs for the current project\n        #Represent the RFI number as a link to view the RFI\n        db.RFI.rfiNum.represent = lambda rfiNum: A(str(rfiNum), _href=URL("default","create_odt",args=[int(rfiNum)]),_target="_blank")\n        #Create a table of the RFIs\n        table = SQLTABLE(rows, _width="800px", columns=["RFI.rfiNum","RFI.dateSent","RFI.reqRefTo","RFI.responseDate"], \n            headers={"RFI.rfiNum":"RFI #","RFI.dateSent":"Date Sent","RFI.reqRefTo":"Request Referred To","RFI.responseDate":"Response Date"})\n    \n    elif formType == "Submittal":\n        rows = db(db.Submittal.projectNum == str(request.vars.projectNum)).select() #Get all the Submittals for the current project\n        for row in rows:\n            row.submittal = str(URL(\'default\',\'download\',args=row.submittal))[1:]   #Set the Submittal\'s file URL\n        #Create a table of the Submittals \n        table = SQLTABLE(rows, columns=["Submittal.assignedTo","Submittal.subType","Submittal.sectNum","Submittal.submittal"], \n            headers={"Submittal.assignedTo":"Assigned To","Submittal.subType":"Type","Submittal.sectNum":"Section Number",\n            "Submittal.submittal":"Submitted File"}, upload="http://127.0.0.1:8000")\n    \n    elif formType == "ProposalRequest":\n        rows = db(db.ProposalRequest.projectNum == str(request.vars.projectNum)).select() #Get all the Proposal Requests for the current project\n        #Create a table of the Proposal Requests\n        table = SQLTABLE(rows, columns=["ProposalRequest.reqNum","ProposalRequest.amendNum","ProposalRequest.sentTo","ProposalRequest.propDate"],\n            headers={"ProposalRequest.reqNum":"Request Number","ProposalRequest.amendNum":"Amendment Number",\n            "ProposalRequest.sentTo":"Sent To","ProposalRequest.propDate":"Proposal Request Date"})\n    \n    elif formType == "Proposal":\n        rows = db(db.Proposal.projectNum == str(request.vars.projectNum)).select()  #Get all the Proposals for the current project\n        for row in rows:\n            row.file = str(URL(\'default\',\'download\',args=row.file))[1:]             #Set the Proposal\'s file URL\n        #Create a table of the Proposals\n        table = SQLTABLE(rows, columns=["Proposal.propNum","Proposal.propReqRef","Proposal.propDate","Proposal.file"], \n            headers={"Proposal.propNum":"Proposal Number","Proposal.propReqRef":"Proposal Request Reference Number",\n            "Proposal.propDate":"Proposal Date","Proposal.file":"File Submitted"}, upload="http://127.0.0.1:8000")\n    \n    elif formType == "MeetingMinutes":\n        rows = db(db.MeetingMinutes.projectNum == str(request.vars.projectNum)).select() #Get all the Meeting Minutes for the current project\n        for row in rows:\n            row.file = str(URL(\'default\',\'download\',args=row.file))[1:]                  #Set the Meeting Minute\'s file URL\n        #Create a table of the Meeting Minutes\n        table = SQLTABLE(rows, columns=["MeetingMinutes.meetDate","MeetingMinutes.file"], \n            headers={"MeetingMinutes.meetDate":"Meeting Date","MeetingMinutes.file":"Submitted File"}, upload="http://127.0.0.1:8000")\n    \n    elif formType == "Photo":    \n        rows = db(db.Photos.projectNum == str(request.vars.projectNum)).select()         #Get all the Photos for the current project\n        #Make the flickrURL a link to open the photo in flickr with a new tab\n        db.Photos.flickrURL.represent = lambda flickrURL: A("View Photo", _href=flickrURL, _target="_blank")\n        #Create a table of the Photos\' information\n        table = SQLTABLE(rows, columns=["Photos.title","Photos.description","Photos.flickrURL"], \n            headers={"Photos.title":"Title", "Photos.description":"Description","Photos.flickrURL":"Photo"})\n\n    if len(rows)==0:\n        table = "There were no documents uploaded for this project section."\n        fullTable = False\n\n    return dict(formType=formType,\n                project=project,\n                table=table,\n                header=header_archived,\n                css=css,\n                fullTable=fullTable)\n\n#This is called when a user clicks on a category for a project in the sidebar. It returns a dictionary used by the view default/formtable.html\n@auth.requires_login()\ndef formtable():\n    formType = request.vars.formType                                                     #Get the type of table to display        \n    table = None                                                                         #The SQLTABLE we will be displaying - set depending on the formType\n    fullTable = True                                                                     #Keeps track if there are entries for the category or not\n    \n    if formType == "CCD":\n        rows = db(db.CCD.projectNum == str(request.vars.projectNum)).select()            #Get all the CCDs for the current project\n        for row in rows:\n            row.file = str(URL(\'default\',\'download\',args=row.file))[1:]                  #Set the CCD file\'s URL\n        #myextracolumns = [{\'label\': \'CCD Thumbnail(for testing)\',\'class\':\'\',\'selected\':False, \'width\':\'\', \n        #    \'content\': lambda row, rc: IMG(_width="40",_height="40",_src=URL(\'default\',\'download\',args=row.file))}]\n        #Create a table of the CCDs\n        table = SQLTABLE(rows,columns=["CCD.ccdNum",\'CCD.file\'], headers={"CCD.ccdNum":"CCD #","CCD.file":"CCD File"}, upload="http://127.0.0.1:8000")\n    \n    elif formType == "RFI":\n        rows = db(db.RFI.projectNum == str(request.vars.projectNum)).select()            #Get all the RFIs for the current project\n        #Create an extra column. If the user is the one who is supposed to reply to the RFI, then have a link in the column for the user to do so\n        extracolumn = [{\'label\':\'Reply to RFI\',\n                \'class\': \'\', #class name of the header\n                \'width\': \'\', #width in pixels or %\n                \'content\':lambda row, rc: A("Reply", _href=URL(\'default\',\'replyRFI\',args=row.id)) if auth.user.first_name +" " +\n                     auth.user.last_name == row.reqRefTo else A(" "),\n                \'selected\': False #aggregate class selected to this column\n                }]\n        #Create a table of the RFIs, adding the extra "Reply to RFI" column on the far right\n        table = SQLTABLE(rows,_width="800px", columns=["RFI.rfiNum","RFI.dateSent","RFI.reqRefTo","RFI.responseBy","RFI.responseDate",\n            "RFI.statusFlag"], headers={"RFI.rfiNum":"RFI #","RFI.dateSent":"Date Sent","RFI.reqRefTo":"Request Referred To",\n            "RFI.responseDate":"Response Date","RFI.responseBy":"Need Response By","RFI.statusFlag":"Status Flag"}, extracolumns=extracolumn)\n    \n    elif formType == "Submittal":\n        rows = db(db.Submittal.projectNum == str(request.vars.projectNum)).select()       #Get all the Submittals for the current project\n        for row in rows:\n            row.submittal = str(URL(\'default\',\'download\',args=row.submittal))[1:]         #Set the Submittals\' file URL\n        #Create a table of the Submittals\n        table = SQLTABLE(rows, columns=["Submittal.assignedTo","Submittal.statusFlag","Submittal.subType","Submittal.sectNum","Submittal.submittal"],\n            headers={"Submittal.assignedTo":"Assigned To","Submittal.statusFlag":"Status Flag","Submittal.subType":"Type",\n            "Submittal.sectNum":"Section Number","Submittal.submittal":"Submitted File"}, upload="http://127.0.0.1:8000")\n    \n    elif formType == "ProposalRequest":\n        rows = db(db.ProposalRequest.projectNum == str(request.vars.projectNum)).select() #Get all the Proposal Requests for the current project\n        #Create an extra column. If the user is the creator of the request, include a link with the option to change the status of the document \n        extracolumn = [{\'label\':\'Change Status\',\n                \'class\': \'\', #class name of the header\n                \'width\': \'\', #width in pixels or %\n                \'content\':lambda row, rc: A("Change", _href=URL(\'default\',\'changePropReq\',args=row.id)) if auth.user.id == row.creator else A(" "),\n                \'selected\': False #aggregate class selected to this column\n                }]\n        #Create a table of the Proposal Requests\n        table = SQLTABLE(rows, columns=["ProposalRequest.reqNum","ProposalRequest.amendNum","ProposalRequest.statusFlag",\n            "ProposalRequest.sentTo","ProposalRequest.propDate"], headers={"ProposalRequest.reqNum":"Request Number",\n            "ProposalRequest.amendNum":"Amendment Number","ProposalRequest.sentTo":"Sent To","ProposalRequest.statusFlag":"Status Flag",\n            "ProposalRequest.propDate":"Proposal Request Date"}, extracolumns=extracolumn)\n    \n    elif formType == "Proposal":\n        rows = db(db.Proposal.projectNum == str(request.vars.projectNum)).select()        #Get all the Proposals for the current project\n        for row in rows:\n            row.file = str(URL(\'default\',\'download\',args=row.file))[1:]                   #Set the Proposals\' file URL\n        #Create a table of the Proposals\n        table = SQLTABLE(rows, columns=["Proposal.propNum","Proposal.propReqRef","Proposal.propDate","Proposal.file"],\n            headers={"Proposal.propNum":"Proposal Number","Proposal.propReqRef":"Proposal Request Reference Number",\n            "Proposal.propDate":"Proposal Date","Proposal.file":"File Submitted"}, upload="http://127.0.0.1:8000")\n    \n    elif formType == "MeetingMinutes":\n        rows = db(db.MeetingMinutes.projectNum == str(request.vars.projectNum)).select()  #Get all the Meeting Minutes for the current project\n        for row in rows:\n            row.file = str(URL(\'default\',\'download\',args=row.file))[1:]                   #Set the Meeting Minutes\' file URL\n        #Create a table of the Meeting Minutes\n        table = SQLTABLE(rows, columns=["MeetingMinutes.meetDate","MeetingMinutes.file"],\n            headers={"MeetingMinutes.meetDate":"Meeting Date","MeetingMinutes.file":"Submitted File"}, upload="http://127.0.0.1:8000")\n    \n    elif formType == "Photo":    \n        rows = db(db.Photos.projectNum == str(request.vars.projectNum)).select()          #Get all the Photos for the current project\n        #Make the flickrURL a link to open the photo in flickr with a new tab\n        db.Photos.flickrURL.represent = lambda flickrURL: A("View Photo", _href=flickrURL, _target="_blank")\n        #Create a table of the Photos\' information\n        table = SQLTABLE(rows, columns=["Photos.title","Photos.description","Photos.flickrURL"], \n            headers={"Photos.title":"Title", "Photos.description":"Description","Photos.flickrURL":"Photo"})\n\n    if len(rows)==0:\n        table = "There are no documents uploaded for this project section yet."\n        fullTable = False\n\n    return dict(formType=formType,\n                myProfileForm=myProfileForm,\n                projects=projects,\n                table= table,\n                footer=footer,\n                header=header,\n                css=css,\n                fullTable=fullTable)\n\n#This is called when a user clicks on "Reply to RFI" when on the RFI\'s formtable view. It returns a dictionary used by the view default/replyRFI.html\n@auth.requires_login()\ndef replyRFI():\n    id = request.args(0) #the id of the RFI\n    db.RFI.statusFlag.requires = IS_IN_SET([\'Outstanding\',\'Closed\']) #Make a dropdown for the status flag\n    \n    #Create the SQLFORM, filling in all the previously submitted information\n    replyRfiForm = SQLFORM(db.RFI, id, showid=False, labels={\'rfiNum\':\'RFI #\',\'projectNum\':"Project #", \'requestBy\':\'Request by\', \'dateSent\':\'Date Sent\', \'reqRefTo\':\'Request Referred to\', \'drawingNum\':\'Drawing #\', \'detailNum\':\'Detail #\', \'specSection\':\'Spec Section #\', \'sheetName\':\'Sheet Name\', \'grids\':\'Grids\', \'sectionPage\':\'Section Page #\', \'description\':\'Description\', \'suggestion\':\'Contractor\\\'s Suggestion\', \'responseBy\':\'Need Response By\', \'reply\':\'Reply\', \'responseDate\':\'Response Date\', \'statusFlag\':\'Status Flag\'}, fields = [\'rfiNum\',\'projectNum\',\'requestBy\', \'dateSent\', \'reqRefTo\', \'drawingNum\', \'detailNum\', \'specSection\', \'sheetName\', \'grids\', \'sectionPage\', \'description\', \'suggestion\', \'responseBy\', \'reply\', \'responseDate\', \'statusFlag\'], _id="replyForm")\n    \n    if replyRfiForm != None:\n        if replyRfiForm.process().accepted:\n            row = db(db.RFI.id == id).select().first() #Get the RFI we\'re replying to\n            \n            #Update the RFI\'s reply and response date (but don\'t save any of the other fields -- want to keep the other fields read-only for this)\n            row.update_record(reply=str(replyRfiForm.vars.reply), responseDate=str(replyRfiForm.vars.responseDate))     \n            db.commit()   \n            \n            session.flash = T(\'RFI Reply Accepted\')  \n            redirect(URL(\'default\', \'formtable\', vars=dict(formType=\'RFI\', projectNum=str(replyRfiForm.vars.projectNum))))  #Redirect to the RFI table                    \n        \n        elif replyRfiForm.errors:\n            response.flash = \'Form has errors\'\n        else:\n            response.flash = \'Please fill out the form\'\n            \n    return dict(replyRfiForm=replyRfiForm, css=css, header=header, footer=footer)\n\n#This is called when a user clicks on "Change Status" when on the Proposal Request\'s formtable view. It returns a dictionary used by the view default/changePropReq.html\n@auth.requires_login()\ndef changePropReq():\n    id = request.args(0)  #The id of the Proposal Request\n    db.ProposalRequest.statusFlag.requires = IS_IN_SET([\'Open\',\'Closed\'])          #Make a dropdown for the status flag  \n    #Create the SQLFORM, filling in all the previously submitted information\n    changePropReqForm = SQLFORM(db.ProposalRequest, id, showid=False, labels={\'reqNum\':\'Request #\', \'amendNum\':\'Amendment #\', \'statusFlag\':\'Status\', \'projectNum\':\'Project #\', \'subject\':\'Subject\', \'propDate\':\'Proposal Date\', \'sentTo\':\'Sent to\', \'cc\':\'CC\', \'description\':\'Description\'}, fields =[\'reqNum\',\'amendNum\',\'projectNum\',\'subject\',\'propDate\',\'sentTo\',\'cc\',\'description\',\'statusFlag\'], _id="changePropReqForm")\n        \n    if changePropReqForm != None:\n        if changePropReqForm.process().accepted:\n            row = db(db.ProposalRequest.id == id).select().first()                 #Get the current Proposal Request\n            row.update_record(statusFlag = str(changePropReqForm.vars.statusFlag)) #Update the Proposal Request with the new status flag      \n            db.commit()   \n            session.flash = T(\'Status Change Accepted\')  \n            #Redirect to the Proposal Request table\n            redirect(URL(\'default\', \'formtable\', vars=dict(formType=\'ProposalRequest\', projectNum=str(changePropReqForm.vars.projectNum))))                      \n        elif changePropReqForm.errors:\n            response.flash = \'Form has errors\'\n        else:\n            response.flash = \'Please fill out the form\'\n            \n    return dict(changePropReqForm=changePropReqForm, css=css, header=header, footer=footer)  \n\ndef viewPhoto():\n    br = mechanize.Browser()\n    # Browser options\n    br.set_handle_equiv(True)\n    br.set_handle_gzip(True)\n    br.set_handle_redirect(True)\n    br.set_handle_referer(True)\n    br.set_handle_robots(False)\n\n    # Follows refresh 0 but not hangs on refresh > 0\n    br.set_handle_refresh(mechanize._http.HTTPRefreshProcessor(), max_time=1)\n    r = br.open(request.vars["url"])\n    br.select_form("login_form")\n    br.form["passwd"]="finholt1"\n    import tkMessageBox\n    #tkMessageBox.showinfo(title="Greetings", message=str(br.form))\n    r = br.submit()\n    br.open(request.vars["url"])\n\n\n    \n    redirect(request.vars["url"])        \n\n#This returns a string of the opposite of the user\'s role (either Admin or General)\ndef getOtherRoles(id):\n    if auth.has_membership(user_id=id, role="Admin"):\n        return "General"\n    else:\n        return "Admin"\n\n#This returns a string of the user\'s role (either Admin or General)     \ndef getUserRole(id):\n    if auth.has_membership(user_id=id, role="Admin"):\n        return "Admin"\n    else:\n        return "General"\n\n#This is called by create_odt to get a dictionay of RFI data given the RFI number\ndef get_data(row_id):\n    import MySQLdb\n\n    db = MySQLdb.connect(host="10.24.6.23", user="seniorproj", passwd="web2py2012", db="finholt")\n    cur = db.cursor()\n\n    # Getting the rows from the database\n\n    cur.execute("SELECT * FROM RFI WHERE rfiNum = %s;",(row_id))\n    columns = cur.description\n    row = cur.fetchall()\n\n    dict = {}\n\n    for i in range(len(columns)):\n        dict[columns[i][0]] = row[0][i]\n\n    return dict\n\n#This creates the RFI document for viewing in the browser. It returns a dictionary used by the view default/create_odt.html\ndef create_odt():\n    import subprocess\n    import os\n    import time\n    appy = local_import(\'appy.pod.renderer\')\n\n    phpscript = os.path.join(request.folder, \'static\', \'php\', \'result.odt\')\n    subprocess.Popen("rm " + phpscript, shell=True)\n\n    # giving the program enough time to delete the old result.odt\n    time.sleep(1)\n \n    dictionary = get_data(request.args[0])\n\n    appyDict = {}\n    appyDict[\'rfiNumber\'] = dictionary[\'rfiNum\']\n\n    # Need to add database places for these and then add the dictionary\n    appyDict[\'project\'] = dictionary[\'projectName\']\n    appyDict[\'owner\'] = dictionary[\'owner\']\n\n    appyDict[\'requestBy\'] = dictionary[\'requestBy\']\n\n    dtSent = dictionary[\'dateSent\']\n    if dtSent != None:\n        appyDict[\'DateSent\'] = "%s/%s/%s" % (dtSent.month,dtSent.day,dtSent.year)\n    else:\n        appyDict[\'DateSent\'] = "None"\n\n    appyDict[\'requestReferredTo\'] = dictionary[\'reqRefTo\']\n\n    dtRec = dictionary[\'dateRec\']\n    if dtRec != None:\n        appyDict[\'DateReceived\'] = "%s/%s/%s" % (dtRec.month,dtRec.day,dtRec.year)\n    else:\n        appyDict[\'DateReceived\'] = "None"\n\n    appyDict[\'drawingNum\'] = dictionary[\'drawingNum\']\n\n    appyDict[\'detailNum\'] = dictionary[\'detailNum\']\n\n    appyDict[\'specNum\'] = dictionary[\'specSection\']\n    appyDict[\'sheetName\'] = dictionary[\'sheetName\']\n\n    appyDict[\'grids\'] = dictionary[\'grids\']\n    appyDict[\'sectionPage\'] = dictionary[\'sectionPage\']\n\n    appyDict[\'rfiDescription\'] = dictionary[\'description\']\n\n    appyDict[\'contractorSuggestion\'] = dictionary[\'suggestion\']\n\n    appyDict[\'reply\'] = dictionary[\'reply\']\n\n    appyDict[\'responseBy\'] = dictionary[\'responseBy\']\n\n    dtResp = dictionary[\'responseDate\']\n    if dtResp != None:\n        appyDict[\'responseDate\'] = "%s/%s/%s" % (dtResp.month,dtResp.day,dtResp.year)\n    else:\n        appyDict[\'responseDate\']\n\n    myfile = os.path.join(request.folder, \'static\',\'php\', \'rfiTemplate.odt\')\n    newfile = os.path.join(request.folder, \'static\',\'php\', \'result.odt\')\n    \n    renderer = appy.Renderer(myfile, appyDict, newfile)\n    renderer.run()\n\n    phpscript = os.path.join(request.folder, \'static\', \'php\', \'rfi.php\')\n    proc = subprocess.Popen("php " + phpscript, shell=True, stdout=subprocess.PIPE)\n    resp = proc.stdout.read()\n\n    return dict(html=HTML(\'\',XML(resp)))\n\n#Returns the html needed for the checkboxes on the addtoproject screen \ndef getAllProjectsHtml(id):\n    html=\'\'\n    projects = db(db.Project.archived == False).select()  #Get all the current non-archived projects\n    user = db(db.auth_user.id == id).select().first()     #Get the user given the user\'s id\n\n    for row in projects:                                  #Find all the projects that the user is not already associated with\n        if user.projects != None:\n            if row.projNum not in user.projects:\n                html +=  \'<input value="\'+str(row.projNum)+\'" type="checkbox" name="\'+str(user.id)+\'"/>\'+str(row.projNum)+"</br>"\n        else:\n            html +=  \'<input value="\'+str(row.id)+\'" type="checkbox" name="\'+str(user.id)+\'"/>\'+str(row.id)+"</br>"\n    \n    if html ==\'\':                                         #The user is already associated with all the projects\n        html = "<p>In all projects</p>"\n        \n    return html \n\n#Returns the html needed for the checkboxes on the deletefromproject screen\ndef getUsersProjectsHtml(id):\n    html = \'\'    \n    user = db(db.auth_user.id == id).select().first()     #Get the user given the user\'s id\n    \n    if user.projects != None and len(user.projects) >= 1: #Make a checkbox for all the projects that the user is associatewith\n        for projId in user.projects:\n            project = db((db.Project.archived == False) & (db.Project.projNum == projId)).select().first()\n            html +=  \'<input value="\'+str(project.projNum)+\'" type="checkbox" name="\'+str(user.id)+\'"/>\'+str(project.projNum)+"</br>"\n    else:\n        html = "<p>Not on any projects</p>"\n        \n    return html\n\nresponse._vars=response._caller(user)\n'
p7
sS'snapshot'
p8
(dp9
S'exception'
p10
(dp11
S'__hash__'
p12
S"<method-wrapper '__hash__' of exceptions.TypeError object>"
p13
sS'__setattr__'
p14
S"<method-wrapper '__setattr__' of exceptions.TypeError object>"
p15
sS'__reduce_ex__'
p16
S'<built-in method __reduce_ex__ of exceptions.TypeError object>'
p17
sS'__getslice__'
p18
S"<method-wrapper '__getslice__' of exceptions.TypeError object>"
p19
sS'__getitem__'
p20
S"<method-wrapper '__getitem__' of exceptions.TypeError object>"
p21
sS'__setstate__'
p22
S'<built-in method __setstate__ of exceptions.TypeError object>'
p23
sS'args'
p24
S"('sequence item 10: expected string, int found',)"
p25
sS'__reduce__'
p26
S'<built-in method __reduce__ of exceptions.TypeError object>'
p27
sS'__str__'
p28
S"<method-wrapper '__str__' of exceptions.TypeError object>"
p29
sS'__format__'
p30
S'<built-in method __format__ of exceptions.TypeError object>'
p31
sS'__getattribute__'
p32
S"<method-wrapper '__getattribute__' of exceptions.TypeError object>"
p33
sS'__class__'
p34
S"<type 'exceptions.TypeError'>"
p35
sS'__unicode__'
p36
S'<built-in method __unicode__ of exceptions.TypeError object>'
p37
sS'__delattr__'
p38
S"<method-wrapper '__delattr__' of exceptions.TypeError object>"
p39
sS'__subclasshook__'
p40
S'<built-in method __subclasshook__ of type object>'
p41
sS'__repr__'
p42
S"<method-wrapper '__repr__' of exceptions.TypeError object>"
p43
sS'__dict__'
p44
S'{}'
p45
sS'__sizeof__'
p46
S'<built-in method __sizeof__ of exceptions.TypeError object>'
p47
sS'__doc__'
p48
S"'Inappropriate argument type.'"
p49
sS'__init__'
p50
S"<method-wrapper '__init__' of exceptions.TypeError object>"
p51
sS'__new__'
p52
S'<built-in method __new__ of type object>'
p53
ssS'evalue'
p54
S'sequence item 10: expected string, int found'
p55
sS'request'
p56
ccopy_reg
_reconstructor
p57
(cgluon.html
BEAUTIFY
p58
c__builtin__
object
p59
NtRp60
(dp61
S'attributes'
p62
(dp63
sS'components'
p64
(lp65
g57
(cgluon.html
TABLE
p66
g59
NtRp67
(dp68
g62
(dp69
S'level'
p70
I5
ssS'parent'
p71
Nsg64
(lp72
g57
(cgluon.html
TR
p73
g59
NtRp74
(dp75
g62
(dp76
sg71
g67
sg64
(lp77
g57
(cgluon.html
TD
p78
g59
NtRp79
(dp80
g62
(dp81
S'_style'
p82
S'font-weight:bold;vertical-align:top'
p83
ssg71
g74
sg64
(lp84
S'ajax'
p85
asbag57
(g78
g59
NtRp86
(dp87
g62
(dp88
S'_valign'
p89
S'top'
p90
ssg71
g74
sg64
(lp91
S':'
asbag57
(g78
g59
NtRp92
(dp93
g62
(dp94
sg71
g74
sg64
(lp95
g57
(g58
g59
NtRp96
(dp97
g62
(dp98
g70
I5
ssg71
g92
sg64
(lp99
S'False'
p100
asbasbasbag57
(g73
g59
NtRp101
(dp102
g62
(dp103
sg71
g67
sg64
(lp104
g57
(g78
g59
NtRp105
(dp106
g62
(dp107
g82
g83
ssg71
g101
sg64
(lp108
S'application'
p109
asbag57
(g78
g59
NtRp110
(dp111
g62
(dp112
g89
g90
ssg71
g101
sg64
(lp113
S':'
asbag57
(g78
g59
NtRp114
(dp115
g62
(dp116
sg71
g101
sg64
(lp117
g57
(g58
g59
NtRp118
(dp119
g62
(dp120
g70
I5
ssg71
g114
sg64
(lp121
S'SeniorProject'
p122
asbasbasbag57
(g73
g59
NtRp123
(dp124
g62
(dp125
sg71
g67
sg64
(lp126
g57
(g78
g59
NtRp127
(dp128
g62
(dp129
g82
g83
ssg71
g123
sg64
(lp130
g24
asbag57
(g78
g59
NtRp131
(dp132
g62
(dp133
g89
g90
ssg71
g123
sg64
(lp134
S':'
asbag57
(g78
g59
NtRp135
(dp136
g62
(dp137
sg71
g123
sg64
(lp138
g57
(g58
g59
NtRp139
(dp140
g62
(dp141
g70
I5
ssg71
g135
sg64
(lp142
g57
(g66
g59
NtRp143
(dp144
g62
(dp145
g70
I4
ssg71
Nsg64
(lp146
g57
(g73
g59
NtRp147
(dp148
g62
(dp149
sg71
g143
sg64
(lp150
g57
(g78
g59
NtRp151
(dp152
g62
(dp153
sg71
g147
sg64
(lp154
g57
(g58
g59
NtRp155
(dp156
g62
(dp157
g70
I4
ssg71
g151
sg64
(lp158
S'login'
p159
asbasbasbasbasbasbasbag57
(g73
g59
NtRp160
(dp161
g62
(dp162
sg71
g67
sg64
(lp163
g57
(g78
g59
NtRp164
(dp165
g62
(dp166
g82
g83
ssg71
g160
sg64
(lp167
S'body'
p168
asbag57
(g78
g59
NtRp169
(dp170
g62
(dp171
g89
g90
ssg71
g160
sg64
(lp172
S':'
asbag57
(g78
g59
NtRp173
(dp174
g62
(dp175
sg71
g160
sg64
(lp176
g57
(g58
g59
NtRp177
(dp178
g62
(dp179
g70
I5
ssg71
g173
sg64
(lp180
S'<cStringIO.StringO object at 0x108d269d0>'
p181
asbasbasbag57
(g73
g59
NtRp182
(dp183
g62
(dp184
sg71
g67
sg64
(lp185
g57
(g78
g59
NtRp186
(dp187
g62
(dp188
g82
g83
ssg71
g182
sg64
(lp189
S'client'
p190
asbag57
(g78
g59
NtRp191
(dp192
g62
(dp193
g89
g90
ssg71
g182
sg64
(lp194
S':'
asbag57
(g78
g59
NtRp195
(dp196
g62
(dp197
sg71
g182
sg64
(lp198
g57
(g58
g59
NtRp199
(dp200
g62
(dp201
g70
I5
ssg71
g195
sg64
(lp202
S'127.0.0.1'
p203
asbasbasbag57
(g73
g59
NtRp204
(dp205
g62
(dp206
sg71
g67
sg64
(lp207
g57
(g78
g59
NtRp208
(dp209
g62
(dp210
g82
g83
ssg71
g204
sg64
(lp211
S'controller'
p212
asbag57
(g78
g59
NtRp213
(dp214
g62
(dp215
g89
g90
ssg71
g204
sg64
(lp216
S':'
asbag57
(g78
g59
NtRp217
(dp218
g62
(dp219
sg71
g204
sg64
(lp220
g57
(g58
g59
NtRp221
(dp222
g62
(dp223
g70
I5
ssg71
g217
sg64
(lp224
S'default'
p225
asbasbasbag57
(g73
g59
NtRp226
(dp227
g62
(dp228
sg71
g67
sg64
(lp229
g57
(g78
g59
NtRp230
(dp231
g62
(dp232
g82
g83
ssg71
g226
sg64
(lp233
S'cookies'
p234
asbag57
(g78
g59
NtRp235
(dp236
g62
(dp237
g89
g90
ssg71
g226
sg64
(lp238
S':'
asbag57
(g78
g59
NtRp239
(dp240
g62
(dp241
sg71
g226
sg64
(lp242
g57
(g58
g59
NtRp243
(dp244
g62
(dp245
g70
I5
ssg71
g239
sg64
(lp246
g57
(g66
g59
NtRp247
(dp248
g62
(dp249
g70
I4
ssg71
Nsg64
(lp250
g57
(g73
g59
NtRp251
(dp252
g62
(dp253
sg71
g247
sg64
(lp254
g57
(g78
g59
NtRp255
(dp256
g62
(dp257
g82
g83
ssg71
g251
sg64
(lp258
S'session_id_admin'
p259
asbag57
(g78
g59
NtRp260
(dp261
g62
(dp262
g89
g90
ssg71
g251
sg64
(lp263
S':'
asbag57
(g78
g59
NtRp264
(dp265
g62
(dp266
sg71
g251
sg64
(lp267
g57
(g58
g59
NtRp268
(dp269
g62
(dp270
g70
I4
ssg71
g264
sg64
(lp271
g57
(g66
g59
NtRp272
(dp273
g62
(dp274
g70
I3
ssg71
Nsg64
(lp275
g57
(g73
g59
NtRp276
(dp277
g62
(dp278
sg71
g272
sg64
(lp279
g57
(g78
g59
NtRp280
(dp281
g62
(dp282
g82
g83
ssg71
g276
sg64
(lp283
S'comment'
p284
asbag57
(g78
g59
NtRp285
(dp286
g62
(dp287
g89
g90
ssg71
g276
sg64
(lp288
S':'
asbag57
(g78
g59
NtRp289
(dp290
g62
(dp291
sg71
g276
sg64
(lp292
g57
(g58
g59
NtRp293
(dp294
g62
(dp295
g70
I3
ssg71
g289
sg64
(lp296
S''
asbasbasbag57
(g73
g59
NtRp297
(dp298
g62
(dp299
sg71
g272
sg64
(lp300
g57
(g78
g59
NtRp301
(dp302
g62
(dp303
g82
g83
ssg71
g297
sg64
(lp304
S'domain'
p305
asbag57
(g78
g59
NtRp306
(dp307
g62
(dp308
g89
g90
ssg71
g297
sg64
(lp309
S':'
asbag57
(g78
g59
NtRp310
(dp311
g62
(dp312
sg71
g297
sg64
(lp313
g57
(g58
g59
NtRp314
(dp315
g62
(dp316
g70
I3
ssg71
g310
sg64
(lp317
S''
asbasbasbag57
(g73
g59
NtRp318
(dp319
g62
(dp320
sg71
g272
sg64
(lp321
g57
(g78
g59
NtRp322
(dp323
g62
(dp324
g82
g83
ssg71
g318
sg64
(lp325
S'expires'
p326
asbag57
(g78
g59
NtRp327
(dp328
g62
(dp329
g89
g90
ssg71
g318
sg64
(lp330
S':'
asbag57
(g78
g59
NtRp331
(dp332
g62
(dp333
sg71
g318
sg64
(lp334
g57
(g58
g59
NtRp335
(dp336
g62
(dp337
g70
I3
ssg71
g331
sg64
(lp338
S''
asbasbasbag57
(g73
g59
NtRp339
(dp340
g62
(dp341
sg71
g272
sg64
(lp342
g57
(g78
g59
NtRp343
(dp344
g62
(dp345
g82
g83
ssg71
g339
sg64
(lp346
S'httponly'
p347
asbag57
(g78
g59
NtRp348
(dp349
g62
(dp350
g89
g90
ssg71
g339
sg64
(lp351
S':'
asbag57
(g78
g59
NtRp352
(dp353
g62
(dp354
sg71
g339
sg64
(lp355
g57
(g58
g59
NtRp356
(dp357
g62
(dp358
g70
I3
ssg71
g352
sg64
(lp359
S''
asbasbasbag57
(g73
g59
NtRp360
(dp361
g62
(dp362
sg71
g272
sg64
(lp363
g57
(g78
g59
NtRp364
(dp365
g62
(dp366
g82
g83
ssg71
g360
sg64
(lp367
S'max-age'
p368
asbag57
(g78
g59
NtRp369
(dp370
g62
(dp371
g89
g90
ssg71
g360
sg64
(lp372
S':'
asbag57
(g78
g59
NtRp373
(dp374
g62
(dp375
sg71
g360
sg64
(lp376
g57
(g58
g59
NtRp377
(dp378
g62
(dp379
g70
I3
ssg71
g373
sg64
(lp380
S''
asbasbasbag57
(g73
g59
NtRp381
(dp382
g62
(dp383
sg71
g272
sg64
(lp384
g57
(g78
g59
NtRp385
(dp386
g62
(dp387
g82
g83
ssg71
g381
sg64
(lp388
S'path'
p389
asbag57
(g78
g59
NtRp390
(dp391
g62
(dp392
g89
g90
ssg71
g381
sg64
(lp393
S':'
asbag57
(g78
g59
NtRp394
(dp395
g62
(dp396
sg71
g381
sg64
(lp397
g57
(g58
g59
NtRp398
(dp399
g62
(dp400
g70
I3
ssg71
g394
sg64
(lp401
S''
asbasbasbag57
(g73
g59
NtRp402
(dp403
g62
(dp404
sg71
g272
sg64
(lp405
g57
(g78
g59
NtRp406
(dp407
g62
(dp408
g82
g83
ssg71
g402
sg64
(lp409
S'secure'
p410
asbag57
(g78
g59
NtRp411
(dp412
g62
(dp413
g89
g90
ssg71
g402
sg64
(lp414
S':'
asbag57
(g78
g59
NtRp415
(dp416
g62
(dp417
sg71
g402
sg64
(lp418
g57
(g58
g59
NtRp419
(dp420
g62
(dp421
g70
I3
ssg71
g415
sg64
(lp422
S''
asbasbasbag57
(g73
g59
NtRp423
(dp424
g62
(dp425
sg71
g272
sg64
(lp426
g57
(g78
g59
NtRp427
(dp428
g62
(dp429
g82
g83
ssg71
g423
sg64
(lp430
S'version'
p431
asbag57
(g78
g59
NtRp432
(dp433
g62
(dp434
g89
g90
ssg71
g423
sg64
(lp435
S':'
asbag57
(g78
g59
NtRp436
(dp437
g62
(dp438
sg71
g423
sg64
(lp439
g57
(g58
g59
NtRp440
(dp441
g62
(dp442
g70
I3
ssg71
g436
sg64
(lp443
S''
asbasbasbasbasbasbasbag57
(g73
g59
NtRp444
(dp445
g62
(dp446
sg71
g247
sg64
(lp447
g57
(g78
g59
NtRp448
(dp449
g62
(dp450
g82
g83
ssg71
g444
sg64
(lp451
S'session_id_seniorproject'
p452
asbag57
(g78
g59
NtRp453
(dp454
g62
(dp455
g89
g90
ssg71
g444
sg64
(lp456
S':'
asbag57
(g78
g59
NtRp457
(dp458
g62
(dp459
sg71
g444
sg64
(lp460
g57
(g58
g59
NtRp461
(dp462
g62
(dp463
g70
I4
ssg71
g457
sg64
(lp464
g57
(g66
g59
NtRp465
(dp466
g62
(dp467
g70
I3
ssg71
Nsg64
(lp468
g57
(g73
g59
NtRp469
(dp470
g62
(dp471
sg71
g465
sg64
(lp472
g57
(g78
g59
NtRp473
(dp474
g62
(dp475
g82
g83
ssg71
g469
sg64
(lp476
g284
asbag57
(g78
g59
NtRp477
(dp478
g62
(dp479
g89
g90
ssg71
g469
sg64
(lp480
S':'
asbag57
(g78
g59
NtRp481
(dp482
g62
(dp483
sg71
g469
sg64
(lp484
g57
(g58
g59
NtRp485
(dp486
g62
(dp487
g70
I3
ssg71
g481
sg64
(lp488
S''
asbasbasbag57
(g73
g59
NtRp489
(dp490
g62
(dp491
sg71
g465
sg64
(lp492
g57
(g78
g59
NtRp493
(dp494
g62
(dp495
g82
g83
ssg71
g489
sg64
(lp496
g305
asbag57
(g78
g59
NtRp497
(dp498
g62
(dp499
g89
g90
ssg71
g489
sg64
(lp500
S':'
asbag57
(g78
g59
NtRp501
(dp502
g62
(dp503
sg71
g489
sg64
(lp504
g57
(g58
g59
NtRp505
(dp506
g62
(dp507
g70
I3
ssg71
g501
sg64
(lp508
S''
asbasbasbag57
(g73
g59
NtRp509
(dp510
g62
(dp511
sg71
g465
sg64
(lp512
g57
(g78
g59
NtRp513
(dp514
g62
(dp515
g82
g83
ssg71
g509
sg64
(lp516
g326
asbag57
(g78
g59
NtRp517
(dp518
g62
(dp519
g89
g90
ssg71
g509
sg64
(lp520
S':'
asbag57
(g78
g59
NtRp521
(dp522
g62
(dp523
sg71
g509
sg64
(lp524
g57
(g58
g59
NtRp525
(dp526
g62
(dp527
g70
I3
ssg71
g521
sg64
(lp528
S''
asbasbasbag57
(g73
g59
NtRp529
(dp530
g62
(dp531
sg71
g465
sg64
(lp532
g57
(g78
g59
NtRp533
(dp534
g62
(dp535
g82
g83
ssg71
g529
sg64
(lp536
g347
asbag57
(g78
g59
NtRp537
(dp538
g62
(dp539
g89
g90
ssg71
g529
sg64
(lp540
S':'
asbag57
(g78
g59
NtRp541
(dp542
g62
(dp543
sg71
g529
sg64
(lp544
g57
(g58
g59
NtRp545
(dp546
g62
(dp547
g70
I3
ssg71
g541
sg64
(lp548
S''
asbasbasbag57
(g73
g59
NtRp549
(dp550
g62
(dp551
sg71
g465
sg64
(lp552
g57
(g78
g59
NtRp553
(dp554
g62
(dp555
g82
g83
ssg71
g549
sg64
(lp556
g368
asbag57
(g78
g59
NtRp557
(dp558
g62
(dp559
g89
g90
ssg71
g549
sg64
(lp560
S':'
asbag57
(g78
g59
NtRp561
(dp562
g62
(dp563
sg71
g549
sg64
(lp564
g57
(g58
g59
NtRp565
(dp566
g62
(dp567
g70
I3
ssg71
g561
sg64
(lp568
S''
asbasbasbag57
(g73
g59
NtRp569
(dp570
g62
(dp571
sg71
g465
sg64
(lp572
g57
(g78
g59
NtRp573
(dp574
g62
(dp575
g82
g83
ssg71
g569
sg64
(lp576
g389
asbag57
(g78
g59
NtRp577
(dp578
g62
(dp579
g89
g90
ssg71
g569
sg64
(lp580
S':'
asbag57
(g78
g59
NtRp581
(dp582
g62
(dp583
sg71
g569
sg64
(lp584
g57
(g58
g59
NtRp585
(dp586
g62
(dp587
g70
I3
ssg71
g581
sg64
(lp588
S''
asbasbasbag57
(g73
g59
NtRp589
(dp590
g62
(dp591
sg71
g465
sg64
(lp592
g57
(g78
g59
NtRp593
(dp594
g62
(dp595
g82
g83
ssg71
g589
sg64
(lp596
g410
asbag57
(g78
g59
NtRp597
(dp598
g62
(dp599
g89
g90
ssg71
g589
sg64
(lp600
S':'
asbag57
(g78
g59
NtRp601
(dp602
g62
(dp603
sg71
g589
sg64
(lp604
g57
(g58
g59
NtRp605
(dp606
g62
(dp607
g70
I3
ssg71
g601
sg64
(lp608
S''
asbasbasbag57
(g73
g59
NtRp609
(dp610
g62
(dp611
sg71
g465
sg64
(lp612
g57
(g78
g59
NtRp613
(dp614
g62
(dp615
g82
g83
ssg71
g609
sg64
(lp616
g431
asbag57
(g78
g59
NtRp617
(dp618
g62
(dp619
g89
g90
ssg71
g609
sg64
(lp620
S':'
asbag57
(g78
g59
NtRp621
(dp622
g62
(dp623
sg71
g609
sg64
(lp624
g57
(g58
g59
NtRp625
(dp626
g62
(dp627
g70
I3
ssg71
g621
sg64
(lp628
S''
asbasbasbasbasbasbasbag57
(g73
g59
NtRp629
(dp630
g62
(dp631
sg71
g247
sg64
(lp632
g57
(g78
g59
NtRp633
(dp634
g62
(dp635
g82
g83
ssg71
g629
sg64
(lp636
S'session_id_welcome'
p637
asbag57
(g78
g59
NtRp638
(dp639
g62
(dp640
g89
g90
ssg71
g629
sg64
(lp641
S':'
asbag57
(g78
g59
NtRp642
(dp643
g62
(dp644
sg71
g629
sg64
(lp645
g57
(g58
g59
NtRp646
(dp647
g62
(dp648
g70
I4
ssg71
g642
sg64
(lp649
g57
(g66
g59
NtRp650
(dp651
g62
(dp652
g70
I3
ssg71
Nsg64
(lp653
g57
(g73
g59
NtRp654
(dp655
g62
(dp656
sg71
g650
sg64
(lp657
g57
(g78
g59
NtRp658
(dp659
g62
(dp660
g82
g83
ssg71
g654
sg64
(lp661
g284
asbag57
(g78
g59
NtRp662
(dp663
g62
(dp664
g89
g90
ssg71
g654
sg64
(lp665
S':'
asbag57
(g78
g59
NtRp666
(dp667
g62
(dp668
sg71
g654
sg64
(lp669
g57
(g58
g59
NtRp670
(dp671
g62
(dp672
g70
I3
ssg71
g666
sg64
(lp673
S''
asbasbasbag57
(g73
g59
NtRp674
(dp675
g62
(dp676
sg71
g650
sg64
(lp677
g57
(g78
g59
NtRp678
(dp679
g62
(dp680
g82
g83
ssg71
g674
sg64
(lp681
g305
asbag57
(g78
g59
NtRp682
(dp683
g62
(dp684
g89
g90
ssg71
g674
sg64
(lp685
S':'
asbag57
(g78
g59
NtRp686
(dp687
g62
(dp688
sg71
g674
sg64
(lp689
g57
(g58
g59
NtRp690
(dp691
g62
(dp692
g70
I3
ssg71
g686
sg64
(lp693
S''
asbasbasbag57
(g73
g59
NtRp694
(dp695
g62
(dp696
sg71
g650
sg64
(lp697
g57
(g78
g59
NtRp698
(dp699
g62
(dp700
g82
g83
ssg71
g694
sg64
(lp701
g326
asbag57
(g78
g59
NtRp702
(dp703
g62
(dp704
g89
g90
ssg71
g694
sg64
(lp705
S':'
asbag57
(g78
g59
NtRp706
(dp707
g62
(dp708
sg71
g694
sg64
(lp709
g57
(g58
g59
NtRp710
(dp711
g62
(dp712
g70
I3
ssg71
g706
sg64
(lp713
S''
asbasbasbag57
(g73
g59
NtRp714
(dp715
g62
(dp716
sg71
g650
sg64
(lp717
g57
(g78
g59
NtRp718
(dp719
g62
(dp720
g82
g83
ssg71
g714
sg64
(lp721
g347
asbag57
(g78
g59
NtRp722
(dp723
g62
(dp724
g89
g90
ssg71
g714
sg64
(lp725
S':'
asbag57
(g78
g59
NtRp726
(dp727
g62
(dp728
sg71
g714
sg64
(lp729
g57
(g58
g59
NtRp730
(dp731
g62
(dp732
g70
I3
ssg71
g726
sg64
(lp733
S''
asbasbasbag57
(g73
g59
NtRp734
(dp735
g62
(dp736
sg71
g650
sg64
(lp737
g57
(g78
g59
NtRp738
(dp739
g62
(dp740
g82
g83
ssg71
g734
sg64
(lp741
g368
asbag57
(g78
g59
NtRp742
(dp743
g62
(dp744
g89
g90
ssg71
g734
sg64
(lp745
S':'
asbag57
(g78
g59
NtRp746
(dp747
g62
(dp748
sg71
g734
sg64
(lp749
g57
(g58
g59
NtRp750
(dp751
g62
(dp752
g70
I3
ssg71
g746
sg64
(lp753
S''
asbasbasbag57
(g73
g59
NtRp754
(dp755
g62
(dp756
sg71
g650
sg64
(lp757
g57
(g78
g59
NtRp758
(dp759
g62
(dp760
g82
g83
ssg71
g754
sg64
(lp761
g389
asbag57
(g78
g59
NtRp762
(dp763
g62
(dp764
g89
g90
ssg71
g754
sg64
(lp765
S':'
asbag57
(g78
g59
NtRp766
(dp767
g62
(dp768
sg71
g754
sg64
(lp769
g57
(g58
g59
NtRp770
(dp771
g62
(dp772
g70
I3
ssg71
g766
sg64
(lp773
S''
asbasbasbag57
(g73
g59
NtRp774
(dp775
g62
(dp776
sg71
g650
sg64
(lp777
g57
(g78
g59
NtRp778
(dp779
g62
(dp780
g82
g83
ssg71
g774
sg64
(lp781
g410
asbag57
(g78
g59
NtRp782
(dp783
g62
(dp784
g89
g90
ssg71
g774
sg64
(lp785
S':'
asbag57
(g78
g59
NtRp786
(dp787
g62
(dp788
sg71
g774
sg64
(lp789
g57
(g58
g59
NtRp790
(dp791
g62
(dp792
g70
I3
ssg71
g786
sg64
(lp793
S''
asbasbasbag57
(g73
g59
NtRp794
(dp795
g62
(dp796
sg71
g650
sg64
(lp797
g57
(g78
g59
NtRp798
(dp799
g62
(dp800
g82
g83
ssg71
g794
sg64
(lp801
g431
asbag57
(g78
g59
NtRp802
(dp803
g62
(dp804
g89
g90
ssg71
g794
sg64
(lp805
S':'
asbag57
(g78
g59
NtRp806
(dp807
g62
(dp808
sg71
g794
sg64
(lp809
g57
(g58
g59
NtRp810
(dp811
g62
(dp812
g70
I3
ssg71
g806
sg64
(lp813
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp814
(dp815
g62
(dp816
sg71
g67
sg64
(lp817
g57
(g78
g59
NtRp818
(dp819
g62
(dp820
g82
g83
ssg71
g814
sg64
(lp821
S'env'
p822
asbag57
(g78
g59
NtRp823
(dp824
g62
(dp825
g89
g90
ssg71
g814
sg64
(lp826
S':'
asbag57
(g78
g59
NtRp827
(dp828
g62
(dp829
sg71
g814
sg64
(lp830
g57
(g58
g59
NtRp831
(dp832
g62
(dp833
g70
I5
ssg71
g827
sg64
(lp834
g57
(g66
g59
NtRp835
(dp836
g62
(dp837
g70
I4
ssg71
Nsg64
(lp838
g57
(g73
g59
NtRp839
(dp840
g62
(dp841
sg71
g835
sg64
(lp842
g57
(g78
g59
NtRp843
(dp844
g62
(dp845
g82
g83
ssg71
g839
sg64
(lp846
S'app_folders'
p847
asbag57
(g78
g59
NtRp848
(dp849
g62
(dp850
g89
g90
ssg71
g839
sg64
(lp851
S':'
asbag57
(g78
g59
NtRp852
(dp853
g62
(dp854
sg71
g839
sg64
(lp855
g57
(g58
g59
NtRp856
(dp857
g62
(dp858
g70
I4
ssg71
g852
sg64
(lp859
S"set(['/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/', '/Users/hainna01/Desktop/SeniorProject/web2py/applications/admin/', '/Users/hainna01/Desktop/SeniorProject/web2py/applications/welcome/'])"
p860
asbasbasbag57
(g73
g59
NtRp861
(dp862
g62
(dp863
sg71
g835
sg64
(lp864
g57
(g78
g59
NtRp865
(dp866
g62
(dp867
g82
g83
ssg71
g861
sg64
(lp868
S'applications_parent'
p869
asbag57
(g78
g59
NtRp870
(dp871
g62
(dp872
g89
g90
ssg71
g861
sg64
(lp873
S':'
asbag57
(g78
g59
NtRp874
(dp875
g62
(dp876
sg71
g861
sg64
(lp877
g57
(g58
g59
NtRp878
(dp879
g62
(dp880
g70
I4
ssg71
g874
sg64
(lp881
S'/Users/hainna01/Desktop/SeniorProject/web2py'
p882
asbasbasbag57
(g73
g59
NtRp883
(dp884
g62
(dp885
sg71
g835
sg64
(lp886
g57
(g78
g59
NtRp887
(dp888
g62
(dp889
g82
g83
ssg71
g883
sg64
(lp890
S'cmd_args'
p891
asbag57
(g78
g59
NtRp892
(dp893
g62
(dp894
g89
g90
ssg71
g883
sg64
(lp895
S':'
asbag57
(g78
g59
NtRp896
(dp897
g62
(dp898
sg71
g883
sg64
(lp899
g57
(g58
g59
NtRp900
(dp901
g62
(dp902
g70
I4
ssg71
g896
sg64
(lp903
g57
(g66
g59
NtRp904
(dp905
g62
(dp906
g70
I3
ssg71
Nsg64
(lp907
sbasbasbasbag57
(g73
g59
NtRp908
(dp909
g62
(dp910
sg71
g835
sg64
(lp911
g57
(g78
g59
NtRp912
(dp913
g62
(dp914
g82
g83
ssg71
g908
sg64
(lp915
S'cmd_options'
p916
asbag57
(g78
g59
NtRp917
(dp918
g62
(dp919
g89
g90
ssg71
g908
sg64
(lp920
S':'
asbag57
(g78
g59
NtRp921
(dp922
g62
(dp923
sg71
g908
sg64
(lp924
g57
(g58
g59
NtRp925
(dp926
g62
(dp927
g70
I4
ssg71
g921
sg64
(lp928
S"<Values at 0x10236f638: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Nathans-MacBook-Pro-2.local', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/Users/hainna01/Desktop/SeniorProject/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p929
asbasbasbag57
(g73
g59
NtRp930
(dp931
g62
(dp932
sg71
g835
sg64
(lp933
g57
(g78
g59
NtRp934
(dp935
g62
(dp936
g82
g83
ssg71
g930
sg64
(lp937
S'db_sessions'
p938
asbag57
(g78
g59
NtRp939
(dp940
g62
(dp941
g89
g90
ssg71
g930
sg64
(lp942
S':'
asbag57
(g78
g59
NtRp943
(dp944
g62
(dp945
sg71
g930
sg64
(lp946
g57
(g58
g59
NtRp947
(dp948
g62
(dp949
g70
I4
ssg71
g943
sg64
(lp950
S'set([])'
p951
asbasbasbag57
(g73
g59
NtRp952
(dp953
g62
(dp954
sg71
g835
sg64
(lp955
g57
(g78
g59
NtRp956
(dp957
g62
(dp958
g82
g83
ssg71
g952
sg64
(lp959
S'debugging'
p960
asbag57
(g78
g59
NtRp961
(dp962
g62
(dp963
g89
g90
ssg71
g952
sg64
(lp964
S':'
asbag57
(g78
g59
NtRp965
(dp966
g62
(dp967
sg71
g952
sg64
(lp968
g57
(g58
g59
NtRp969
(dp970
g62
(dp971
g70
I4
ssg71
g965
sg64
(lp972
g100
asbasbasbag57
(g73
g59
NtRp973
(dp974
g62
(dp975
sg71
g835
sg64
(lp976
g57
(g78
g59
NtRp977
(dp978
g62
(dp979
g82
g83
ssg71
g973
sg64
(lp980
S'gluon_parent'
p981
asbag57
(g78
g59
NtRp982
(dp983
g62
(dp984
g89
g90
ssg71
g973
sg64
(lp985
S':'
asbag57
(g78
g59
NtRp986
(dp987
g62
(dp988
sg71
g973
sg64
(lp989
g57
(g58
g59
NtRp990
(dp991
g62
(dp992
g70
I4
ssg71
g986
sg64
(lp993
S'/Users/hainna01/Desktop/SeniorProject/web2py'
p994
asbasbasbag57
(g73
g59
NtRp995
(dp996
g62
(dp997
sg71
g835
sg64
(lp998
g57
(g78
g59
NtRp999
(dp1000
g62
(dp1001
g82
g83
ssg71
g995
sg64
(lp1002
S'http_accept'
p1003
asbag57
(g78
g59
NtRp1004
(dp1005
g62
(dp1006
g89
g90
ssg71
g995
sg64
(lp1007
S':'
asbag57
(g78
g59
NtRp1008
(dp1009
g62
(dp1010
sg71
g995
sg64
(lp1011
g57
(g58
g59
NtRp1012
(dp1013
g62
(dp1014
g70
I4
ssg71
g1008
sg64
(lp1015
S'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
p1016
asbasbasbag57
(g73
g59
NtRp1017
(dp1018
g62
(dp1019
sg71
g835
sg64
(lp1020
g57
(g78
g59
NtRp1021
(dp1022
g62
(dp1023
g82
g83
ssg71
g1017
sg64
(lp1024
S'http_accept_charset'
p1025
asbag57
(g78
g59
NtRp1026
(dp1027
g62
(dp1028
g89
g90
ssg71
g1017
sg64
(lp1029
S':'
asbag57
(g78
g59
NtRp1030
(dp1031
g62
(dp1032
sg71
g1017
sg64
(lp1033
g57
(g58
g59
NtRp1034
(dp1035
g62
(dp1036
g70
I4
ssg71
g1030
sg64
(lp1037
S'ISO-8859-1,utf-8;q=0.7,*;q=0.3'
p1038
asbasbasbag57
(g73
g59
NtRp1039
(dp1040
g62
(dp1041
sg71
g835
sg64
(lp1042
g57
(g78
g59
NtRp1043
(dp1044
g62
(dp1045
g82
g83
ssg71
g1039
sg64
(lp1046
S'http_accept_encoding'
p1047
asbag57
(g78
g59
NtRp1048
(dp1049
g62
(dp1050
g89
g90
ssg71
g1039
sg64
(lp1051
S':'
asbag57
(g78
g59
NtRp1052
(dp1053
g62
(dp1054
sg71
g1039
sg64
(lp1055
g57
(g58
g59
NtRp1056
(dp1057
g62
(dp1058
g70
I4
ssg71
g1052
sg64
(lp1059
S'gzip,deflate,sdch'
p1060
asbasbasbag57
(g73
g59
NtRp1061
(dp1062
g62
(dp1063
sg71
g835
sg64
(lp1064
g57
(g78
g59
NtRp1065
(dp1066
g62
(dp1067
g82
g83
ssg71
g1061
sg64
(lp1068
S'http_accept_language'
p1069
asbag57
(g78
g59
NtRp1070
(dp1071
g62
(dp1072
g89
g90
ssg71
g1061
sg64
(lp1073
S':'
asbag57
(g78
g59
NtRp1074
(dp1075
g62
(dp1076
sg71
g1061
sg64
(lp1077
g57
(g58
g59
NtRp1078
(dp1079
g62
(dp1080
g70
I4
ssg71
g1074
sg64
(lp1081
S'en-US,en;q=0.8'
p1082
asbasbasbag57
(g73
g59
NtRp1083
(dp1084
g62
(dp1085
sg71
g835
sg64
(lp1086
g57
(g78
g59
NtRp1087
(dp1088
g62
(dp1089
g82
g83
ssg71
g1083
sg64
(lp1090
S'http_cache_control'
p1091
asbag57
(g78
g59
NtRp1092
(dp1093
g62
(dp1094
g89
g90
ssg71
g1083
sg64
(lp1095
S':'
asbag57
(g78
g59
NtRp1096
(dp1097
g62
(dp1098
sg71
g1083
sg64
(lp1099
g57
(g58
g59
NtRp1100
(dp1101
g62
(dp1102
g70
I4
ssg71
g1096
sg64
(lp1103
S'max-age=0'
p1104
asbasbasbag57
(g73
g59
NtRp1105
(dp1106
g62
(dp1107
sg71
g835
sg64
(lp1108
g57
(g78
g59
NtRp1109
(dp1110
g62
(dp1111
g82
g83
ssg71
g1105
sg64
(lp1112
S'http_connection'
p1113
asbag57
(g78
g59
NtRp1114
(dp1115
g62
(dp1116
g89
g90
ssg71
g1105
sg64
(lp1117
S':'
asbag57
(g78
g59
NtRp1118
(dp1119
g62
(dp1120
sg71
g1105
sg64
(lp1121
g57
(g58
g59
NtRp1122
(dp1123
g62
(dp1124
g70
I4
ssg71
g1118
sg64
(lp1125
S'keep-alive'
p1126
asbasbasbag57
(g73
g59
NtRp1127
(dp1128
g62
(dp1129
sg71
g835
sg64
(lp1130
g57
(g78
g59
NtRp1131
(dp1132
g62
(dp1133
g82
g83
ssg71
g1127
sg64
(lp1134
S'http_cookie'
p1135
asbag57
(g78
g59
NtRp1136
(dp1137
g62
(dp1138
g89
g90
ssg71
g1127
sg64
(lp1139
S':'
asbag57
(g78
g59
NtRp1140
(dp1141
g62
(dp1142
sg71
g1127
sg64
(lp1143
g57
(g58
g59
NtRp1144
(dp1145
g62
(dp1146
g70
I4
ssg71
g1140
sg64
(lp1147
S'session_id_welcome=127.0.0.1-06963b13-5292-4f12-a45f-8facc0240d3e; session_id_admin=127.0.0.1-4a997e0c-bd0d-43d4-8af2-d0e4eedda508; session_id_seniorproject=127.0.0.1-bfae3cf7-324d-4fba-81a6-e00fd8a1cd5b'
p1148
asbasbasbag57
(g73
g59
NtRp1149
(dp1150
g62
(dp1151
sg71
g835
sg64
(lp1152
g57
(g78
g59
NtRp1153
(dp1154
g62
(dp1155
g82
g83
ssg71
g1149
sg64
(lp1156
S'http_host'
p1157
asbag57
(g78
g59
NtRp1158
(dp1159
g62
(dp1160
g89
g90
ssg71
g1149
sg64
(lp1161
S':'
asbag57
(g78
g59
NtRp1162
(dp1163
g62
(dp1164
sg71
g1149
sg64
(lp1165
g57
(g58
g59
NtRp1166
(dp1167
g62
(dp1168
g70
I4
ssg71
g1162
sg64
(lp1169
S'127.0.0.1:8000'
p1170
asbasbasbag57
(g73
g59
NtRp1171
(dp1172
g62
(dp1173
sg71
g835
sg64
(lp1174
g57
(g78
g59
NtRp1175
(dp1176
g62
(dp1177
g82
g83
ssg71
g1171
sg64
(lp1178
S'http_user_agent'
p1179
asbag57
(g78
g59
NtRp1180
(dp1181
g62
(dp1182
g89
g90
ssg71
g1171
sg64
(lp1183
S':'
asbag57
(g78
g59
NtRp1184
(dp1185
g62
(dp1186
sg71
g1171
sg64
(lp1187
g57
(g58
g59
NtRp1188
(dp1189
g62
(dp1190
g70
I4
ssg71
g1184
sg64
(lp1191
S'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.43 Safari/537.31'
p1192
asbasbasbag57
(g73
g59
NtRp1193
(dp1194
g62
(dp1195
sg71
g835
sg64
(lp1196
g57
(g78
g59
NtRp1197
(dp1198
g62
(dp1199
g82
g83
ssg71
g1193
sg64
(lp1200
S'is_jython'
p1201
asbag57
(g78
g59
NtRp1202
(dp1203
g62
(dp1204
g89
g90
ssg71
g1193
sg64
(lp1205
S':'
asbag57
(g78
g59
NtRp1206
(dp1207
g62
(dp1208
sg71
g1193
sg64
(lp1209
g57
(g58
g59
NtRp1210
(dp1211
g62
(dp1212
g70
I4
ssg71
g1206
sg64
(lp1213
g100
asbasbasbag57
(g73
g59
NtRp1214
(dp1215
g62
(dp1216
sg71
g835
sg64
(lp1217
g57
(g78
g59
NtRp1218
(dp1219
g62
(dp1220
g82
g83
ssg71
g1214
sg64
(lp1221
S'is_pypy'
p1222
asbag57
(g78
g59
NtRp1223
(dp1224
g62
(dp1225
g89
g90
ssg71
g1214
sg64
(lp1226
S':'
asbag57
(g78
g59
NtRp1227
(dp1228
g62
(dp1229
sg71
g1214
sg64
(lp1230
g57
(g58
g59
NtRp1231
(dp1232
g62
(dp1233
g70
I4
ssg71
g1227
sg64
(lp1234
g100
asbasbasbag57
(g73
g59
NtRp1235
(dp1236
g62
(dp1237
sg71
g835
sg64
(lp1238
g57
(g78
g59
NtRp1239
(dp1240
g62
(dp1241
g82
g83
ssg71
g1235
sg64
(lp1242
S'path_info'
p1243
asbag57
(g78
g59
NtRp1244
(dp1245
g62
(dp1246
g89
g90
ssg71
g1235
sg64
(lp1247
S':'
asbag57
(g78
g59
NtRp1248
(dp1249
g62
(dp1250
sg71
g1235
sg64
(lp1251
g57
(g58
g59
NtRp1252
(dp1253
g62
(dp1254
g70
I4
ssg71
g1248
sg64
(lp1255
S'/SeniorProject/default/user/login'
p1256
asbasbasbag57
(g73
g59
NtRp1257
(dp1258
g62
(dp1259
sg71
g835
sg64
(lp1260
g57
(g78
g59
NtRp1261
(dp1262
g62
(dp1263
g82
g83
ssg71
g1257
sg64
(lp1264
S'query_string'
p1265
asbag57
(g78
g59
NtRp1266
(dp1267
g62
(dp1268
g89
g90
ssg71
g1257
sg64
(lp1269
S':'
asbag57
(g78
g59
NtRp1270
(dp1271
g62
(dp1272
sg71
g1257
sg64
(lp1273
g57
(g58
g59
NtRp1274
(dp1275
g62
(dp1276
g70
I4
ssg71
g1270
sg64
(lp1277
S'_next=/SeniorProject/default/index'
p1278
asbasbasbag57
(g73
g59
NtRp1279
(dp1280
g62
(dp1281
sg71
g835
sg64
(lp1282
g57
(g78
g59
NtRp1283
(dp1284
g62
(dp1285
g82
g83
ssg71
g1279
sg64
(lp1286
S'remote_addr'
p1287
asbag57
(g78
g59
NtRp1288
(dp1289
g62
(dp1290
g89
g90
ssg71
g1279
sg64
(lp1291
S':'
asbag57
(g78
g59
NtRp1292
(dp1293
g62
(dp1294
sg71
g1279
sg64
(lp1295
g57
(g58
g59
NtRp1296
(dp1297
g62
(dp1298
g70
I4
ssg71
g1292
sg64
(lp1299
g203
asbasbasbag57
(g73
g59
NtRp1300
(dp1301
g62
(dp1302
sg71
g835
sg64
(lp1303
g57
(g78
g59
NtRp1304
(dp1305
g62
(dp1306
g82
g83
ssg71
g1300
sg64
(lp1307
S'remote_port'
p1308
asbag57
(g78
g59
NtRp1309
(dp1310
g62
(dp1311
g89
g90
ssg71
g1300
sg64
(lp1312
S':'
asbag57
(g78
g59
NtRp1313
(dp1314
g62
(dp1315
sg71
g1300
sg64
(lp1316
g57
(g58
g59
NtRp1317
(dp1318
g62
(dp1319
g70
I4
ssg71
g1313
sg64
(lp1320
S'57766'
p1321
asbasbasbag57
(g73
g59
NtRp1322
(dp1323
g62
(dp1324
sg71
g835
sg64
(lp1325
g57
(g78
g59
NtRp1326
(dp1327
g62
(dp1328
g82
g83
ssg71
g1322
sg64
(lp1329
S'request_method'
p1330
asbag57
(g78
g59
NtRp1331
(dp1332
g62
(dp1333
g89
g90
ssg71
g1322
sg64
(lp1334
S':'
asbag57
(g78
g59
NtRp1335
(dp1336
g62
(dp1337
sg71
g1322
sg64
(lp1338
g57
(g58
g59
NtRp1339
(dp1340
g62
(dp1341
g70
I4
ssg71
g1335
sg64
(lp1342
S'GET'
p1343
asbasbasbag57
(g73
g59
NtRp1344
(dp1345
g62
(dp1346
sg71
g835
sg64
(lp1347
g57
(g78
g59
NtRp1348
(dp1349
g62
(dp1350
g82
g83
ssg71
g1344
sg64
(lp1351
S'script_name'
p1352
asbag57
(g78
g59
NtRp1353
(dp1354
g62
(dp1355
g89
g90
ssg71
g1344
sg64
(lp1356
S':'
asbag57
(g78
g59
NtRp1357
(dp1358
g62
(dp1359
sg71
g1344
sg64
(lp1360
g57
(g58
g59
NtRp1361
(dp1362
g62
(dp1363
g70
I4
ssg71
g1357
sg64
(lp1364
S''
asbasbasbag57
(g73
g59
NtRp1365
(dp1366
g62
(dp1367
sg71
g835
sg64
(lp1368
g57
(g78
g59
NtRp1369
(dp1370
g62
(dp1371
g82
g83
ssg71
g1365
sg64
(lp1372
S'server_name'
p1373
asbag57
(g78
g59
NtRp1374
(dp1375
g62
(dp1376
g89
g90
ssg71
g1365
sg64
(lp1377
S':'
asbag57
(g78
g59
NtRp1378
(dp1379
g62
(dp1380
sg71
g1365
sg64
(lp1381
g57
(g58
g59
NtRp1382
(dp1383
g62
(dp1384
g70
I4
ssg71
g1378
sg64
(lp1385
S'Nathans-MacBook-Pro-2.local'
p1386
asbasbasbag57
(g73
g59
NtRp1387
(dp1388
g62
(dp1389
sg71
g835
sg64
(lp1390
g57
(g78
g59
NtRp1391
(dp1392
g62
(dp1393
g82
g83
ssg71
g1387
sg64
(lp1394
S'server_port'
p1395
asbag57
(g78
g59
NtRp1396
(dp1397
g62
(dp1398
g89
g90
ssg71
g1387
sg64
(lp1399
S':'
asbag57
(g78
g59
NtRp1400
(dp1401
g62
(dp1402
sg71
g1387
sg64
(lp1403
g57
(g58
g59
NtRp1404
(dp1405
g62
(dp1406
g70
I4
ssg71
g1400
sg64
(lp1407
S'8000'
p1408
asbasbasbag57
(g73
g59
NtRp1409
(dp1410
g62
(dp1411
sg71
g835
sg64
(lp1412
g57
(g78
g59
NtRp1413
(dp1414
g62
(dp1415
g82
g83
ssg71
g1409
sg64
(lp1416
S'server_protocol'
p1417
asbag57
(g78
g59
NtRp1418
(dp1419
g62
(dp1420
g89
g90
ssg71
g1409
sg64
(lp1421
S':'
asbag57
(g78
g59
NtRp1422
(dp1423
g62
(dp1424
sg71
g1409
sg64
(lp1425
g57
(g58
g59
NtRp1426
(dp1427
g62
(dp1428
g70
I4
ssg71
g1422
sg64
(lp1429
S'HTTP/1.1'
p1430
asbasbasbag57
(g73
g59
NtRp1431
(dp1432
g62
(dp1433
sg71
g835
sg64
(lp1434
g57
(g78
g59
NtRp1435
(dp1436
g62
(dp1437
g82
g83
ssg71
g1431
sg64
(lp1438
S'server_software'
p1439
asbag57
(g78
g59
NtRp1440
(dp1441
g62
(dp1442
g89
g90
ssg71
g1431
sg64
(lp1443
S':'
asbag57
(g78
g59
NtRp1444
(dp1445
g62
(dp1446
sg71
g1431
sg64
(lp1447
g57
(g58
g59
NtRp1448
(dp1449
g62
(dp1450
g70
I4
ssg71
g1444
sg64
(lp1451
S'Rocket 1.2.4'
p1452
asbasbasbag57
(g73
g59
NtRp1453
(dp1454
g62
(dp1455
sg71
g835
sg64
(lp1456
g57
(g78
g59
NtRp1457
(dp1458
g62
(dp1459
g82
g83
ssg71
g1453
sg64
(lp1460
S'web2py_crontype'
p1461
asbag57
(g78
g59
NtRp1462
(dp1463
g62
(dp1464
g89
g90
ssg71
g1453
sg64
(lp1465
S':'
asbag57
(g78
g59
NtRp1466
(dp1467
g62
(dp1468
sg71
g1453
sg64
(lp1469
g57
(g58
g59
NtRp1470
(dp1471
g62
(dp1472
g70
I4
ssg71
g1466
sg64
(lp1473
S'hard'
p1474
asbasbasbag57
(g73
g59
NtRp1475
(dp1476
g62
(dp1477
sg71
g835
sg64
(lp1478
g57
(g78
g59
NtRp1479
(dp1480
g62
(dp1481
g82
g83
ssg71
g1475
sg64
(lp1482
S'web2py_path'
p1483
asbag57
(g78
g59
NtRp1484
(dp1485
g62
(dp1486
g89
g90
ssg71
g1475
sg64
(lp1487
S':'
asbag57
(g78
g59
NtRp1488
(dp1489
g62
(dp1490
sg71
g1475
sg64
(lp1491
g57
(g58
g59
NtRp1492
(dp1493
g62
(dp1494
g70
I4
ssg71
g1488
sg64
(lp1495
g882
asbasbasbag57
(g73
g59
NtRp1496
(dp1497
g62
(dp1498
sg71
g835
sg64
(lp1499
g57
(g78
g59
NtRp1500
(dp1501
g62
(dp1502
g82
g83
ssg71
g1496
sg64
(lp1503
S'web2py_version'
p1504
asbag57
(g78
g59
NtRp1505
(dp1506
g62
(dp1507
g89
g90
ssg71
g1496
sg64
(lp1508
S':'
asbag57
(g78
g59
NtRp1509
(dp1510
g62
(dp1511
sg71
g1496
sg64
(lp1512
g57
(g58
g59
NtRp1513
(dp1514
g62
(dp1515
g70
I4
ssg71
g1509
sg64
(lp1516
g57
(g66
g59
NtRp1517
(dp1518
g62
(dp1519
g70
I3
ssg71
Nsg64
(lp1520
g57
(g73
g59
NtRp1521
(dp1522
g62
(dp1523
sg71
g1517
sg64
(lp1524
g57
(g78
g59
NtRp1525
(dp1526
g62
(dp1527
sg71
g1521
sg64
(lp1528
g57
(g58
g59
NtRp1529
(dp1530
g62
(dp1531
g70
I3
ssg71
g1525
sg64
(lp1532
S'1'
asbasbasbag57
(g73
g59
NtRp1533
(dp1534
g62
(dp1535
sg71
g1517
sg64
(lp1536
g57
(g78
g59
NtRp1537
(dp1538
g62
(dp1539
sg71
g1533
sg64
(lp1540
g57
(g58
g59
NtRp1541
(dp1542
g62
(dp1543
g70
I3
ssg71
g1537
sg64
(lp1544
S'99'
p1545
asbasbasbag57
(g73
g59
NtRp1546
(dp1547
g62
(dp1548
sg71
g1517
sg64
(lp1549
g57
(g78
g59
NtRp1550
(dp1551
g62
(dp1552
sg71
g1546
sg64
(lp1553
g57
(g58
g59
NtRp1554
(dp1555
g62
(dp1556
g70
I3
ssg71
g1550
sg64
(lp1557
S'7'
asbasbasbag57
(g73
g59
NtRp1558
(dp1559
g62
(dp1560
sg71
g1517
sg64
(lp1561
g57
(g78
g59
NtRp1562
(dp1563
g62
(dp1564
sg71
g1558
sg64
(lp1565
g57
(g58
g59
NtRp1566
(dp1567
g62
(dp1568
g70
I3
ssg71
g1562
sg64
(lp1569
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p1570
asbasbasbag57
(g73
g59
NtRp1571
(dp1572
g62
(dp1573
sg71
g1517
sg64
(lp1574
g57
(g78
g59
NtRp1575
(dp1576
g62
(dp1577
sg71
g1571
sg64
(lp1578
g57
(g58
g59
NtRp1579
(dp1580
g62
(dp1581
g70
I3
ssg71
g1575
sg64
(lp1582
S'stable'
p1583
asbasbasbasbasbasbasbag57
(g73
g59
NtRp1584
(dp1585
g62
(dp1586
sg71
g835
sg64
(lp1587
g57
(g78
g59
NtRp1588
(dp1589
g62
(dp1590
g82
g83
ssg71
g1584
sg64
(lp1591
S'wsgi_errors'
p1592
asbag57
(g78
g59
NtRp1593
(dp1594
g62
(dp1595
g89
g90
ssg71
g1584
sg64
(lp1596
S':'
asbag57
(g78
g59
NtRp1597
(dp1598
g62
(dp1599
sg71
g1584
sg64
(lp1600
g57
(g58
g59
NtRp1601
(dp1602
g62
(dp1603
g70
I4
ssg71
g1597
sg64
(lp1604
S"<open file '<stderr>', mode 'w' at 0x100282270>"
p1605
asbasbasbag57
(g73
g59
NtRp1606
(dp1607
g62
(dp1608
sg71
g835
sg64
(lp1609
g57
(g78
g59
NtRp1610
(dp1611
g62
(dp1612
g82
g83
ssg71
g1606
sg64
(lp1613
S'wsgi_file_wrapper'
p1614
asbag57
(g78
g59
NtRp1615
(dp1616
g62
(dp1617
g89
g90
ssg71
g1606
sg64
(lp1618
S':'
asbag57
(g78
g59
NtRp1619
(dp1620
g62
(dp1621
sg71
g1606
sg64
(lp1622
g57
(g58
g59
NtRp1623
(dp1624
g62
(dp1625
g70
I4
ssg71
g1619
sg64
(lp1626
S'<class wsgiref.util.FileWrapper at 0x101a17328>'
p1627
asbasbasbag57
(g73
g59
NtRp1628
(dp1629
g62
(dp1630
sg71
g835
sg64
(lp1631
g57
(g78
g59
NtRp1632
(dp1633
g62
(dp1634
g82
g83
ssg71
g1628
sg64
(lp1635
S'wsgi_input'
p1636
asbag57
(g78
g59
NtRp1637
(dp1638
g62
(dp1639
g89
g90
ssg71
g1628
sg64
(lp1640
S':'
asbag57
(g78
g59
NtRp1641
(dp1642
g62
(dp1643
sg71
g1628
sg64
(lp1644
g57
(g58
g59
NtRp1645
(dp1646
g62
(dp1647
g70
I4
ssg71
g1641
sg64
(lp1648
S'<socket._fileobject object at 0x108e492d0>'
p1649
asbasbasbag57
(g73
g59
NtRp1650
(dp1651
g62
(dp1652
sg71
g835
sg64
(lp1653
g57
(g78
g59
NtRp1654
(dp1655
g62
(dp1656
g82
g83
ssg71
g1650
sg64
(lp1657
S'wsgi_multiprocess'
p1658
asbag57
(g78
g59
NtRp1659
(dp1660
g62
(dp1661
g89
g90
ssg71
g1650
sg64
(lp1662
S':'
asbag57
(g78
g59
NtRp1663
(dp1664
g62
(dp1665
sg71
g1650
sg64
(lp1666
g57
(g58
g59
NtRp1667
(dp1668
g62
(dp1669
g70
I4
ssg71
g1663
sg64
(lp1670
g100
asbasbasbag57
(g73
g59
NtRp1671
(dp1672
g62
(dp1673
sg71
g835
sg64
(lp1674
g57
(g78
g59
NtRp1675
(dp1676
g62
(dp1677
g82
g83
ssg71
g1671
sg64
(lp1678
S'wsgi_multithread'
p1679
asbag57
(g78
g59
NtRp1680
(dp1681
g62
(dp1682
g89
g90
ssg71
g1671
sg64
(lp1683
S':'
asbag57
(g78
g59
NtRp1684
(dp1685
g62
(dp1686
sg71
g1671
sg64
(lp1687
g57
(g58
g59
NtRp1688
(dp1689
g62
(dp1690
g70
I4
ssg71
g1684
sg64
(lp1691
S'True'
p1692
asbasbasbag57
(g73
g59
NtRp1693
(dp1694
g62
(dp1695
sg71
g835
sg64
(lp1696
g57
(g78
g59
NtRp1697
(dp1698
g62
(dp1699
g82
g83
ssg71
g1693
sg64
(lp1700
S'wsgi_run_once'
p1701
asbag57
(g78
g59
NtRp1702
(dp1703
g62
(dp1704
g89
g90
ssg71
g1693
sg64
(lp1705
S':'
asbag57
(g78
g59
NtRp1706
(dp1707
g62
(dp1708
sg71
g1693
sg64
(lp1709
g57
(g58
g59
NtRp1710
(dp1711
g62
(dp1712
g70
I4
ssg71
g1706
sg64
(lp1713
g100
asbasbasbag57
(g73
g59
NtRp1714
(dp1715
g62
(dp1716
sg71
g835
sg64
(lp1717
g57
(g78
g59
NtRp1718
(dp1719
g62
(dp1720
g82
g83
ssg71
g1714
sg64
(lp1721
S'wsgi_url_scheme'
p1722
asbag57
(g78
g59
NtRp1723
(dp1724
g62
(dp1725
g89
g90
ssg71
g1714
sg64
(lp1726
S':'
asbag57
(g78
g59
NtRp1727
(dp1728
g62
(dp1729
sg71
g1714
sg64
(lp1730
g57
(g58
g59
NtRp1731
(dp1732
g62
(dp1733
g70
I4
ssg71
g1727
sg64
(lp1734
S'http'
p1735
asbasbasbag57
(g73
g59
NtRp1736
(dp1737
g62
(dp1738
sg71
g835
sg64
(lp1739
g57
(g78
g59
NtRp1740
(dp1741
g62
(dp1742
g82
g83
ssg71
g1736
sg64
(lp1743
S'wsgi_version'
p1744
asbag57
(g78
g59
NtRp1745
(dp1746
g62
(dp1747
g89
g90
ssg71
g1736
sg64
(lp1748
S':'
asbag57
(g78
g59
NtRp1749
(dp1750
g62
(dp1751
sg71
g1736
sg64
(lp1752
g57
(g58
g59
NtRp1753
(dp1754
g62
(dp1755
g70
I4
ssg71
g1749
sg64
(lp1756
g57
(g66
g59
NtRp1757
(dp1758
g62
(dp1759
g70
I3
ssg71
Nsg64
(lp1760
g57
(g73
g59
NtRp1761
(dp1762
g62
(dp1763
sg71
g1757
sg64
(lp1764
g57
(g78
g59
NtRp1765
(dp1766
g62
(dp1767
sg71
g1761
sg64
(lp1768
g57
(g58
g59
NtRp1769
(dp1770
g62
(dp1771
g70
I3
ssg71
g1765
sg64
(lp1772
S'1'
asbasbasbag57
(g73
g59
NtRp1773
(dp1774
g62
(dp1775
sg71
g1757
sg64
(lp1776
g57
(g78
g59
NtRp1777
(dp1778
g62
(dp1779
sg71
g1773
sg64
(lp1780
g57
(g58
g59
NtRp1781
(dp1782
g62
(dp1783
g70
I3
ssg71
g1777
sg64
(lp1784
S'0'
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp1785
(dp1786
g62
(dp1787
sg71
g67
sg64
(lp1788
g57
(g78
g59
NtRp1789
(dp1790
g62
(dp1791
g82
g83
ssg71
g1785
sg64
(lp1792
S'extension'
p1793
asbag57
(g78
g59
NtRp1794
(dp1795
g62
(dp1796
g89
g90
ssg71
g1785
sg64
(lp1797
S':'
asbag57
(g78
g59
NtRp1798
(dp1799
g62
(dp1800
sg71
g1785
sg64
(lp1801
g57
(g58
g59
NtRp1802
(dp1803
g62
(dp1804
g70
I5
ssg71
g1798
sg64
(lp1805
S'html'
p1806
asbasbasbag57
(g73
g59
NtRp1807
(dp1808
g62
(dp1809
sg71
g67
sg64
(lp1810
g57
(g78
g59
NtRp1811
(dp1812
g62
(dp1813
g82
g83
ssg71
g1807
sg64
(lp1814
S'folder'
p1815
asbag57
(g78
g59
NtRp1816
(dp1817
g62
(dp1818
g89
g90
ssg71
g1807
sg64
(lp1819
S':'
asbag57
(g78
g59
NtRp1820
(dp1821
g62
(dp1822
sg71
g1807
sg64
(lp1823
g57
(g58
g59
NtRp1824
(dp1825
g62
(dp1826
g70
I5
ssg71
g1820
sg64
(lp1827
S'/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/'
p1828
asbasbasbag57
(g73
g59
NtRp1829
(dp1830
g62
(dp1831
sg71
g67
sg64
(lp1832
g57
(g78
g59
NtRp1833
(dp1834
g62
(dp1835
g82
g83
ssg71
g1829
sg64
(lp1836
S'function'
p1837
asbag57
(g78
g59
NtRp1838
(dp1839
g62
(dp1840
g89
g90
ssg71
g1829
sg64
(lp1841
S':'
asbag57
(g78
g59
NtRp1842
(dp1843
g62
(dp1844
sg71
g1829
sg64
(lp1845
g57
(g58
g59
NtRp1846
(dp1847
g62
(dp1848
g70
I5
ssg71
g1842
sg64
(lp1849
S'user'
p1850
asbasbasbag57
(g73
g59
NtRp1851
(dp1852
g62
(dp1853
sg71
g67
sg64
(lp1854
g57
(g78
g59
NtRp1855
(dp1856
g62
(dp1857
g82
g83
ssg71
g1851
sg64
(lp1858
S'get_vars'
p1859
asbag57
(g78
g59
NtRp1860
(dp1861
g62
(dp1862
g89
g90
ssg71
g1851
sg64
(lp1863
S':'
asbag57
(g78
g59
NtRp1864
(dp1865
g62
(dp1866
sg71
g1851
sg64
(lp1867
g57
(g58
g59
NtRp1868
(dp1869
g62
(dp1870
g70
I5
ssg71
g1864
sg64
(lp1871
g57
(g66
g59
NtRp1872
(dp1873
g62
(dp1874
g70
I4
ssg71
Nsg64
(lp1875
sbasbasbasbag57
(g73
g59
NtRp1876
(dp1877
g62
(dp1878
sg71
g67
sg64
(lp1879
g57
(g78
g59
NtRp1880
(dp1881
g62
(dp1882
g82
g83
ssg71
g1876
sg64
(lp1883
S'global_settings'
p1884
asbag57
(g78
g59
NtRp1885
(dp1886
g62
(dp1887
g89
g90
ssg71
g1876
sg64
(lp1888
S':'
asbag57
(g78
g59
NtRp1889
(dp1890
g62
(dp1891
sg71
g1876
sg64
(lp1892
g57
(g58
g59
NtRp1893
(dp1894
g62
(dp1895
g70
I5
ssg71
g1889
sg64
(lp1896
g57
(g66
g59
NtRp1897
(dp1898
g62
(dp1899
g70
I4
ssg71
Nsg64
(lp1900
g57
(g73
g59
NtRp1901
(dp1902
g62
(dp1903
sg71
g1897
sg64
(lp1904
g57
(g78
g59
NtRp1905
(dp1906
g62
(dp1907
g82
g83
ssg71
g1901
sg64
(lp1908
g847
asbag57
(g78
g59
NtRp1909
(dp1910
g62
(dp1911
g89
g90
ssg71
g1901
sg64
(lp1912
S':'
asbag57
(g78
g59
NtRp1913
(dp1914
g62
(dp1915
sg71
g1901
sg64
(lp1916
g57
(g58
g59
NtRp1917
(dp1918
g62
(dp1919
g70
I4
ssg71
g1913
sg64
(lp1920
S"set(['/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/', '/Users/hainna01/Desktop/SeniorProject/web2py/applications/admin/', '/Users/hainna01/Desktop/SeniorProject/web2py/applications/welcome/'])"
p1921
asbasbasbag57
(g73
g59
NtRp1922
(dp1923
g62
(dp1924
sg71
g1897
sg64
(lp1925
g57
(g78
g59
NtRp1926
(dp1927
g62
(dp1928
g82
g83
ssg71
g1922
sg64
(lp1929
g869
asbag57
(g78
g59
NtRp1930
(dp1931
g62
(dp1932
g89
g90
ssg71
g1922
sg64
(lp1933
S':'
asbag57
(g78
g59
NtRp1934
(dp1935
g62
(dp1936
sg71
g1922
sg64
(lp1937
g57
(g58
g59
NtRp1938
(dp1939
g62
(dp1940
g70
I4
ssg71
g1934
sg64
(lp1941
g882
asbasbasbag57
(g73
g59
NtRp1942
(dp1943
g62
(dp1944
sg71
g1897
sg64
(lp1945
g57
(g78
g59
NtRp1946
(dp1947
g62
(dp1948
g82
g83
ssg71
g1942
sg64
(lp1949
g891
asbag57
(g78
g59
NtRp1950
(dp1951
g62
(dp1952
g89
g90
ssg71
g1942
sg64
(lp1953
S':'
asbag57
(g78
g59
NtRp1954
(dp1955
g62
(dp1956
sg71
g1942
sg64
(lp1957
g57
(g58
g59
NtRp1958
(dp1959
g62
(dp1960
g70
I4
ssg71
g1954
sg64
(lp1961
g57
(g66
g59
NtRp1962
(dp1963
g62
(dp1964
g70
I3
ssg71
Nsg64
(lp1965
sbasbasbasbag57
(g73
g59
NtRp1966
(dp1967
g62
(dp1968
sg71
g1897
sg64
(lp1969
g57
(g78
g59
NtRp1970
(dp1971
g62
(dp1972
g82
g83
ssg71
g1966
sg64
(lp1973
g916
asbag57
(g78
g59
NtRp1974
(dp1975
g62
(dp1976
g89
g90
ssg71
g1966
sg64
(lp1977
S':'
asbag57
(g78
g59
NtRp1978
(dp1979
g62
(dp1980
sg71
g1966
sg64
(lp1981
g57
(g58
g59
NtRp1982
(dp1983
g62
(dp1984
g70
I4
ssg71
g1978
sg64
(lp1985
S"<Values at 0x10236f638: {'verbose': False, 'ip': '127.0.0.1', 'shutdown_timeout': 5, 'taskbar': False, 'nocron': False, 'pid_filename': 'httpserver.pid', 'maxthreads': None, 'softcron': False, 'server_name': 'Nathans-MacBook-Pro-2.local', 'bpython': False, 'nogui': False, 'port': 8000, 'extcron': False, 'debuglevel': 30, 'test': None, 'folder': '/Users/hainna01/Desktop/SeniorProject/web2py', 'config': '', 'import_models': False, 'winservice': '', 'shell': None, 'run': '', 'log_filename': 'httpserver.log', 'args': [''], 'socket_timeout': 5, 'ssl_ca_certificate': None, 'scheduler': None, 'profiler_filename': None, 'ssl_private_key': '', 'password': '<ask>', 'request_queue_size': 5, 'ssl_certificate': '', 'cronjob': False, 'numthreads': None, 'quiet': False, 'interfaces': None, 'minthreads': None, 'timeout': 10, 'plain': False, 'nobanner': False}>"
p1986
asbasbasbag57
(g73
g59
NtRp1987
(dp1988
g62
(dp1989
sg71
g1897
sg64
(lp1990
g57
(g78
g59
NtRp1991
(dp1992
g62
(dp1993
g82
g83
ssg71
g1987
sg64
(lp1994
g938
asbag57
(g78
g59
NtRp1995
(dp1996
g62
(dp1997
g89
g90
ssg71
g1987
sg64
(lp1998
S':'
asbag57
(g78
g59
NtRp1999
(dp2000
g62
(dp2001
sg71
g1987
sg64
(lp2002
g57
(g58
g59
NtRp2003
(dp2004
g62
(dp2005
g70
I4
ssg71
g1999
sg64
(lp2006
S'set([])'
p2007
asbasbasbag57
(g73
g59
NtRp2008
(dp2009
g62
(dp2010
sg71
g1897
sg64
(lp2011
g57
(g78
g59
NtRp2012
(dp2013
g62
(dp2014
g82
g83
ssg71
g2008
sg64
(lp2015
g960
asbag57
(g78
g59
NtRp2016
(dp2017
g62
(dp2018
g89
g90
ssg71
g2008
sg64
(lp2019
S':'
asbag57
(g78
g59
NtRp2020
(dp2021
g62
(dp2022
sg71
g2008
sg64
(lp2023
g57
(g58
g59
NtRp2024
(dp2025
g62
(dp2026
g70
I4
ssg71
g2020
sg64
(lp2027
g100
asbasbasbag57
(g73
g59
NtRp2028
(dp2029
g62
(dp2030
sg71
g1897
sg64
(lp2031
g57
(g78
g59
NtRp2032
(dp2033
g62
(dp2034
g82
g83
ssg71
g2028
sg64
(lp2035
g981
asbag57
(g78
g59
NtRp2036
(dp2037
g62
(dp2038
g89
g90
ssg71
g2028
sg64
(lp2039
S':'
asbag57
(g78
g59
NtRp2040
(dp2041
g62
(dp2042
sg71
g2028
sg64
(lp2043
g57
(g58
g59
NtRp2044
(dp2045
g62
(dp2046
g70
I4
ssg71
g2040
sg64
(lp2047
g994
asbasbasbag57
(g73
g59
NtRp2048
(dp2049
g62
(dp2050
sg71
g1897
sg64
(lp2051
g57
(g78
g59
NtRp2052
(dp2053
g62
(dp2054
g82
g83
ssg71
g2048
sg64
(lp2055
g1201
asbag57
(g78
g59
NtRp2056
(dp2057
g62
(dp2058
g89
g90
ssg71
g2048
sg64
(lp2059
S':'
asbag57
(g78
g59
NtRp2060
(dp2061
g62
(dp2062
sg71
g2048
sg64
(lp2063
g57
(g58
g59
NtRp2064
(dp2065
g62
(dp2066
g70
I4
ssg71
g2060
sg64
(lp2067
g100
asbasbasbag57
(g73
g59
NtRp2068
(dp2069
g62
(dp2070
sg71
g1897
sg64
(lp2071
g57
(g78
g59
NtRp2072
(dp2073
g62
(dp2074
g82
g83
ssg71
g2068
sg64
(lp2075
g1222
asbag57
(g78
g59
NtRp2076
(dp2077
g62
(dp2078
g89
g90
ssg71
g2068
sg64
(lp2079
S':'
asbag57
(g78
g59
NtRp2080
(dp2081
g62
(dp2082
sg71
g2068
sg64
(lp2083
g57
(g58
g59
NtRp2084
(dp2085
g62
(dp2086
g70
I4
ssg71
g2080
sg64
(lp2087
g100
asbasbasbag57
(g73
g59
NtRp2088
(dp2089
g62
(dp2090
sg71
g1897
sg64
(lp2091
g57
(g78
g59
NtRp2092
(dp2093
g62
(dp2094
g82
g83
ssg71
g2088
sg64
(lp2095
g1461
asbag57
(g78
g59
NtRp2096
(dp2097
g62
(dp2098
g89
g90
ssg71
g2088
sg64
(lp2099
S':'
asbag57
(g78
g59
NtRp2100
(dp2101
g62
(dp2102
sg71
g2088
sg64
(lp2103
g57
(g58
g59
NtRp2104
(dp2105
g62
(dp2106
g70
I4
ssg71
g2100
sg64
(lp2107
g1474
asbasbasbag57
(g73
g59
NtRp2108
(dp2109
g62
(dp2110
sg71
g1897
sg64
(lp2111
g57
(g78
g59
NtRp2112
(dp2113
g62
(dp2114
g82
g83
ssg71
g2108
sg64
(lp2115
g1504
asbag57
(g78
g59
NtRp2116
(dp2117
g62
(dp2118
g89
g90
ssg71
g2108
sg64
(lp2119
S':'
asbag57
(g78
g59
NtRp2120
(dp2121
g62
(dp2122
sg71
g2108
sg64
(lp2123
g57
(g58
g59
NtRp2124
(dp2125
g62
(dp2126
g70
I4
ssg71
g2120
sg64
(lp2127
g57
(g66
g59
NtRp2128
(dp2129
g62
(dp2130
g70
I3
ssg71
Nsg64
(lp2131
g57
(g73
g59
NtRp2132
(dp2133
g62
(dp2134
sg71
g2128
sg64
(lp2135
g57
(g78
g59
NtRp2136
(dp2137
g62
(dp2138
sg71
g2132
sg64
(lp2139
g57
(g58
g59
NtRp2140
(dp2141
g62
(dp2142
g70
I3
ssg71
g2136
sg64
(lp2143
S'1'
asbasbasbag57
(g73
g59
NtRp2144
(dp2145
g62
(dp2146
sg71
g2128
sg64
(lp2147
g57
(g78
g59
NtRp2148
(dp2149
g62
(dp2150
sg71
g2144
sg64
(lp2151
g57
(g58
g59
NtRp2152
(dp2153
g62
(dp2154
g70
I3
ssg71
g2148
sg64
(lp2155
S'99'
p2156
asbasbasbag57
(g73
g59
NtRp2157
(dp2158
g62
(dp2159
sg71
g2128
sg64
(lp2160
g57
(g78
g59
NtRp2161
(dp2162
g62
(dp2163
sg71
g2157
sg64
(lp2164
g57
(g58
g59
NtRp2165
(dp2166
g62
(dp2167
g70
I3
ssg71
g2161
sg64
(lp2168
S'7'
asbasbasbag57
(g73
g59
NtRp2169
(dp2170
g62
(dp2171
sg71
g2128
sg64
(lp2172
g57
(g78
g59
NtRp2173
(dp2174
g62
(dp2175
sg71
g2169
sg64
(lp2176
g57
(g58
g59
NtRp2177
(dp2178
g62
(dp2179
g70
I3
ssg71
g2173
sg64
(lp2180
S'datetime.datetime(2012, 3, 4, 22, 12, 8)'
p2181
asbasbasbag57
(g73
g59
NtRp2182
(dp2183
g62
(dp2184
sg71
g2128
sg64
(lp2185
g57
(g78
g59
NtRp2186
(dp2187
g62
(dp2188
sg71
g2182
sg64
(lp2189
g57
(g58
g59
NtRp2190
(dp2191
g62
(dp2192
g70
I3
ssg71
g2186
sg64
(lp2193
g1583
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp2194
(dp2195
g62
(dp2196
sg71
g67
sg64
(lp2197
g57
(g78
g59
NtRp2198
(dp2199
g62
(dp2200
g82
g83
ssg71
g2194
sg64
(lp2201
S'is_https'
p2202
asbag57
(g78
g59
NtRp2203
(dp2204
g62
(dp2205
g89
g90
ssg71
g2194
sg64
(lp2206
S':'
asbag57
(g78
g59
NtRp2207
(dp2208
g62
(dp2209
sg71
g2194
sg64
(lp2210
g57
(g58
g59
NtRp2211
(dp2212
g62
(dp2213
g70
I5
ssg71
g2207
sg64
(lp2214
g100
asbasbasbag57
(g73
g59
NtRp2215
(dp2216
g62
(dp2217
sg71
g67
sg64
(lp2218
g57
(g78
g59
NtRp2219
(dp2220
g62
(dp2221
g82
g83
ssg71
g2215
sg64
(lp2222
S'is_local'
p2223
asbag57
(g78
g59
NtRp2224
(dp2225
g62
(dp2226
g89
g90
ssg71
g2215
sg64
(lp2227
S':'
asbag57
(g78
g59
NtRp2228
(dp2229
g62
(dp2230
sg71
g2215
sg64
(lp2231
g57
(g58
g59
NtRp2232
(dp2233
g62
(dp2234
g70
I5
ssg71
g2228
sg64
(lp2235
g1692
asbasbasbag57
(g73
g59
NtRp2236
(dp2237
g62
(dp2238
sg71
g67
sg64
(lp2239
g57
(g78
g59
NtRp2240
(dp2241
g62
(dp2242
g82
g83
ssg71
g2236
sg64
(lp2243
S'is_restful'
p2244
asbag57
(g78
g59
NtRp2245
(dp2246
g62
(dp2247
g89
g90
ssg71
g2236
sg64
(lp2248
S':'
asbag57
(g78
g59
NtRp2249
(dp2250
g62
(dp2251
sg71
g2236
sg64
(lp2252
g57
(g58
g59
NtRp2253
(dp2254
g62
(dp2255
g70
I5
ssg71
g2249
sg64
(lp2256
g100
asbasbasbag57
(g73
g59
NtRp2257
(dp2258
g62
(dp2259
sg71
g67
sg64
(lp2260
g57
(g78
g59
NtRp2261
(dp2262
g62
(dp2263
g82
g83
ssg71
g2257
sg64
(lp2264
S'now'
p2265
asbag57
(g78
g59
NtRp2266
(dp2267
g62
(dp2268
g89
g90
ssg71
g2257
sg64
(lp2269
S':'
asbag57
(g78
g59
NtRp2270
(dp2271
g62
(dp2272
sg71
g2257
sg64
(lp2273
g57
(g58
g59
NtRp2274
(dp2275
g62
(dp2276
g70
I5
ssg71
g2270
sg64
(lp2277
S'datetime.datetime(2013, 4, 16, 18, 0, 32, 878963)'
p2278
asbasbasbag57
(g73
g59
NtRp2279
(dp2280
g62
(dp2281
sg71
g67
sg64
(lp2282
g57
(g78
g59
NtRp2283
(dp2284
g62
(dp2285
g82
g83
ssg71
g2279
sg64
(lp2286
S'post_vars'
p2287
asbag57
(g78
g59
NtRp2288
(dp2289
g62
(dp2290
g89
g90
ssg71
g2279
sg64
(lp2291
S':'
asbag57
(g78
g59
NtRp2292
(dp2293
g62
(dp2294
sg71
g2279
sg64
(lp2295
g57
(g58
g59
NtRp2296
(dp2297
g62
(dp2298
g70
I5
ssg71
g2292
sg64
(lp2299
g57
(g66
g59
NtRp2300
(dp2301
g62
(dp2302
g70
I4
ssg71
Nsg64
(lp2303
sbasbasbasbag57
(g73
g59
NtRp2304
(dp2305
g62
(dp2306
sg71
g67
sg64
(lp2307
g57
(g78
g59
NtRp2308
(dp2309
g62
(dp2310
g82
g83
ssg71
g2304
sg64
(lp2311
S'raw_args'
p2312
asbag57
(g78
g59
NtRp2313
(dp2314
g62
(dp2315
g89
g90
ssg71
g2304
sg64
(lp2316
S':'
asbag57
(g78
g59
NtRp2317
(dp2318
g62
(dp2319
sg71
g2304
sg64
(lp2320
g57
(g58
g59
NtRp2321
(dp2322
g62
(dp2323
g70
I5
ssg71
g2317
sg64
(lp2324
g159
asbasbasbag57
(g73
g59
NtRp2325
(dp2326
g62
(dp2327
sg71
g67
sg64
(lp2328
g57
(g78
g59
NtRp2329
(dp2330
g62
(dp2331
g82
g83
ssg71
g2325
sg64
(lp2332
S'url'
p2333
asbag57
(g78
g59
NtRp2334
(dp2335
g62
(dp2336
g89
g90
ssg71
g2325
sg64
(lp2337
S':'
asbag57
(g78
g59
NtRp2338
(dp2339
g62
(dp2340
sg71
g2325
sg64
(lp2341
g57
(g58
g59
NtRp2342
(dp2343
g62
(dp2344
g70
I5
ssg71
g2338
sg64
(lp2345
S'/SeniorProject/default/user/login'
p2346
asbasbasbag57
(g73
g59
NtRp2347
(dp2348
g62
(dp2349
sg71
g67
sg64
(lp2350
g57
(g78
g59
NtRp2351
(dp2352
g62
(dp2353
g82
g83
ssg71
g2347
sg64
(lp2354
S'utcnow'
p2355
asbag57
(g78
g59
NtRp2356
(dp2357
g62
(dp2358
g89
g90
ssg71
g2347
sg64
(lp2359
S':'
asbag57
(g78
g59
NtRp2360
(dp2361
g62
(dp2362
sg71
g2347
sg64
(lp2363
g57
(g58
g59
NtRp2364
(dp2365
g62
(dp2366
g70
I5
ssg71
g2360
sg64
(lp2367
S'datetime.datetime(2013, 4, 16, 23, 0, 32, 878977)'
p2368
asbasbasbag57
(g73
g59
NtRp2369
(dp2370
g62
(dp2371
sg71
g67
sg64
(lp2372
g57
(g78
g59
NtRp2373
(dp2374
g62
(dp2375
g82
g83
ssg71
g2369
sg64
(lp2376
S'uuid'
p2377
asbag57
(g78
g59
NtRp2378
(dp2379
g62
(dp2380
g89
g90
ssg71
g2369
sg64
(lp2381
S':'
asbag57
(g78
g59
NtRp2382
(dp2383
g62
(dp2384
sg71
g2369
sg64
(lp2385
g57
(g58
g59
NtRp2386
(dp2387
g62
(dp2388
g70
I5
ssg71
g2382
sg64
(lp2389
S'SeniorProject/127.0.0.1.2013-04-16.18-00-32.eeec5b91-70fd-404c-969b-6e7709ddcb36'
p2390
asbasbasbag57
(g73
g59
NtRp2391
(dp2392
g62
(dp2393
sg71
g67
sg64
(lp2394
g57
(g78
g59
NtRp2395
(dp2396
g62
(dp2397
g82
g83
ssg71
g2391
sg64
(lp2398
S'vars'
p2399
asbag57
(g78
g59
NtRp2400
(dp2401
g62
(dp2402
g89
g90
ssg71
g2391
sg64
(lp2403
S':'
asbag57
(g78
g59
NtRp2404
(dp2405
g62
(dp2406
sg71
g2391
sg64
(lp2407
g57
(g58
g59
NtRp2408
(dp2409
g62
(dp2410
g70
I5
ssg71
g2404
sg64
(lp2411
g57
(g66
g59
NtRp2412
(dp2413
g62
(dp2414
g70
I4
ssg71
Nsg64
(lp2415
sbasbasbasbag57
(g73
g59
NtRp2416
(dp2417
g62
(dp2418
sg71
g67
sg64
(lp2419
g57
(g78
g59
NtRp2420
(dp2421
g62
(dp2422
g82
g83
ssg71
g2416
sg64
(lp2423
S'wsgi'
p2424
asbag57
(g78
g59
NtRp2425
(dp2426
g62
(dp2427
g89
g90
ssg71
g2416
sg64
(lp2428
S':'
asbag57
(g78
g59
NtRp2429
(dp2430
g62
(dp2431
sg71
g2416
sg64
(lp2432
g57
(g58
g59
NtRp2433
(dp2434
g62
(dp2435
g70
I5
ssg71
g2429
sg64
(lp2436
g57
(g66
g59
NtRp2437
(dp2438
g62
(dp2439
g70
I4
ssg71
Nsg64
(lp2440
g57
(g73
g59
NtRp2441
(dp2442
g62
(dp2443
sg71
g2437
sg64
(lp2444
g57
(g78
g59
NtRp2445
(dp2446
g62
(dp2447
g82
g83
ssg71
g2441
sg64
(lp2448
S'environ'
p2449
asbag57
(g78
g59
NtRp2450
(dp2451
g62
(dp2452
g89
g90
ssg71
g2441
sg64
(lp2453
S':'
asbag57
(g78
g59
NtRp2454
(dp2455
g62
(dp2456
sg71
g2441
sg64
(lp2457
g57
(g58
g59
NtRp2458
(dp2459
g62
(dp2460
g70
I4
ssg71
g2454
sg64
(lp2461
g57
(g66
g59
NtRp2462
(dp2463
g62
(dp2464
g70
I3
ssg71
Nsg64
(lp2465
g57
(g73
g59
NtRp2466
(dp2467
g62
(dp2468
sg71
g2462
sg64
(lp2469
g57
(g78
g59
NtRp2470
(dp2471
g62
(dp2472
g82
g83
ssg71
g2466
sg64
(lp2473
S'HTTP_ACCEPT'
p2474
asbag57
(g78
g59
NtRp2475
(dp2476
g62
(dp2477
g89
g90
ssg71
g2466
sg64
(lp2478
S':'
asbag57
(g78
g59
NtRp2479
(dp2480
g62
(dp2481
sg71
g2466
sg64
(lp2482
g57
(g58
g59
NtRp2483
(dp2484
g62
(dp2485
g70
I3
ssg71
g2479
sg64
(lp2486
g1016
asbasbasbag57
(g73
g59
NtRp2487
(dp2488
g62
(dp2489
sg71
g2462
sg64
(lp2490
g57
(g78
g59
NtRp2491
(dp2492
g62
(dp2493
g82
g83
ssg71
g2487
sg64
(lp2494
S'HTTP_ACCEPT_CHARSET'
p2495
asbag57
(g78
g59
NtRp2496
(dp2497
g62
(dp2498
g89
g90
ssg71
g2487
sg64
(lp2499
S':'
asbag57
(g78
g59
NtRp2500
(dp2501
g62
(dp2502
sg71
g2487
sg64
(lp2503
g57
(g58
g59
NtRp2504
(dp2505
g62
(dp2506
g70
I3
ssg71
g2500
sg64
(lp2507
g1038
asbasbasbag57
(g73
g59
NtRp2508
(dp2509
g62
(dp2510
sg71
g2462
sg64
(lp2511
g57
(g78
g59
NtRp2512
(dp2513
g62
(dp2514
g82
g83
ssg71
g2508
sg64
(lp2515
S'HTTP_ACCEPT_ENCODING'
p2516
asbag57
(g78
g59
NtRp2517
(dp2518
g62
(dp2519
g89
g90
ssg71
g2508
sg64
(lp2520
S':'
asbag57
(g78
g59
NtRp2521
(dp2522
g62
(dp2523
sg71
g2508
sg64
(lp2524
g57
(g58
g59
NtRp2525
(dp2526
g62
(dp2527
g70
I3
ssg71
g2521
sg64
(lp2528
g1060
asbasbasbag57
(g73
g59
NtRp2529
(dp2530
g62
(dp2531
sg71
g2462
sg64
(lp2532
g57
(g78
g59
NtRp2533
(dp2534
g62
(dp2535
g82
g83
ssg71
g2529
sg64
(lp2536
S'HTTP_ACCEPT_LANGUAGE'
p2537
asbag57
(g78
g59
NtRp2538
(dp2539
g62
(dp2540
g89
g90
ssg71
g2529
sg64
(lp2541
S':'
asbag57
(g78
g59
NtRp2542
(dp2543
g62
(dp2544
sg71
g2529
sg64
(lp2545
g57
(g58
g59
NtRp2546
(dp2547
g62
(dp2548
g70
I3
ssg71
g2542
sg64
(lp2549
g1082
asbasbasbag57
(g73
g59
NtRp2550
(dp2551
g62
(dp2552
sg71
g2462
sg64
(lp2553
g57
(g78
g59
NtRp2554
(dp2555
g62
(dp2556
g82
g83
ssg71
g2550
sg64
(lp2557
S'HTTP_CACHE_CONTROL'
p2558
asbag57
(g78
g59
NtRp2559
(dp2560
g62
(dp2561
g89
g90
ssg71
g2550
sg64
(lp2562
S':'
asbag57
(g78
g59
NtRp2563
(dp2564
g62
(dp2565
sg71
g2550
sg64
(lp2566
g57
(g58
g59
NtRp2567
(dp2568
g62
(dp2569
g70
I3
ssg71
g2563
sg64
(lp2570
g1104
asbasbasbag57
(g73
g59
NtRp2571
(dp2572
g62
(dp2573
sg71
g2462
sg64
(lp2574
g57
(g78
g59
NtRp2575
(dp2576
g62
(dp2577
g82
g83
ssg71
g2571
sg64
(lp2578
S'HTTP_CONNECTION'
p2579
asbag57
(g78
g59
NtRp2580
(dp2581
g62
(dp2582
g89
g90
ssg71
g2571
sg64
(lp2583
S':'
asbag57
(g78
g59
NtRp2584
(dp2585
g62
(dp2586
sg71
g2571
sg64
(lp2587
g57
(g58
g59
NtRp2588
(dp2589
g62
(dp2590
g70
I3
ssg71
g2584
sg64
(lp2591
g1126
asbasbasbag57
(g73
g59
NtRp2592
(dp2593
g62
(dp2594
sg71
g2462
sg64
(lp2595
g57
(g78
g59
NtRp2596
(dp2597
g62
(dp2598
g82
g83
ssg71
g2592
sg64
(lp2599
S'HTTP_COOKIE'
p2600
asbag57
(g78
g59
NtRp2601
(dp2602
g62
(dp2603
g89
g90
ssg71
g2592
sg64
(lp2604
S':'
asbag57
(g78
g59
NtRp2605
(dp2606
g62
(dp2607
sg71
g2592
sg64
(lp2608
g57
(g58
g59
NtRp2609
(dp2610
g62
(dp2611
g70
I3
ssg71
g2605
sg64
(lp2612
g1148
asbasbasbag57
(g73
g59
NtRp2613
(dp2614
g62
(dp2615
sg71
g2462
sg64
(lp2616
g57
(g78
g59
NtRp2617
(dp2618
g62
(dp2619
g82
g83
ssg71
g2613
sg64
(lp2620
S'HTTP_HOST'
p2621
asbag57
(g78
g59
NtRp2622
(dp2623
g62
(dp2624
g89
g90
ssg71
g2613
sg64
(lp2625
S':'
asbag57
(g78
g59
NtRp2626
(dp2627
g62
(dp2628
sg71
g2613
sg64
(lp2629
g57
(g58
g59
NtRp2630
(dp2631
g62
(dp2632
g70
I3
ssg71
g2626
sg64
(lp2633
g1170
asbasbasbag57
(g73
g59
NtRp2634
(dp2635
g62
(dp2636
sg71
g2462
sg64
(lp2637
g57
(g78
g59
NtRp2638
(dp2639
g62
(dp2640
g82
g83
ssg71
g2634
sg64
(lp2641
S'HTTP_USER_AGENT'
p2642
asbag57
(g78
g59
NtRp2643
(dp2644
g62
(dp2645
g89
g90
ssg71
g2634
sg64
(lp2646
S':'
asbag57
(g78
g59
NtRp2647
(dp2648
g62
(dp2649
sg71
g2634
sg64
(lp2650
g57
(g58
g59
NtRp2651
(dp2652
g62
(dp2653
g70
I3
ssg71
g2647
sg64
(lp2654
g1192
asbasbasbag57
(g73
g59
NtRp2655
(dp2656
g62
(dp2657
sg71
g2462
sg64
(lp2658
g57
(g78
g59
NtRp2659
(dp2660
g62
(dp2661
g82
g83
ssg71
g2655
sg64
(lp2662
S'PATH_INFO'
p2663
asbag57
(g78
g59
NtRp2664
(dp2665
g62
(dp2666
g89
g90
ssg71
g2655
sg64
(lp2667
S':'
asbag57
(g78
g59
NtRp2668
(dp2669
g62
(dp2670
sg71
g2655
sg64
(lp2671
g57
(g58
g59
NtRp2672
(dp2673
g62
(dp2674
g70
I3
ssg71
g2668
sg64
(lp2675
g1256
asbasbasbag57
(g73
g59
NtRp2676
(dp2677
g62
(dp2678
sg71
g2462
sg64
(lp2679
g57
(g78
g59
NtRp2680
(dp2681
g62
(dp2682
g82
g83
ssg71
g2676
sg64
(lp2683
S'QUERY_STRING'
p2684
asbag57
(g78
g59
NtRp2685
(dp2686
g62
(dp2687
g89
g90
ssg71
g2676
sg64
(lp2688
S':'
asbag57
(g78
g59
NtRp2689
(dp2690
g62
(dp2691
sg71
g2676
sg64
(lp2692
g57
(g58
g59
NtRp2693
(dp2694
g62
(dp2695
g70
I3
ssg71
g2689
sg64
(lp2696
g1278
asbasbasbag57
(g73
g59
NtRp2697
(dp2698
g62
(dp2699
sg71
g2462
sg64
(lp2700
g57
(g78
g59
NtRp2701
(dp2702
g62
(dp2703
g82
g83
ssg71
g2697
sg64
(lp2704
S'REMOTE_ADDR'
p2705
asbag57
(g78
g59
NtRp2706
(dp2707
g62
(dp2708
g89
g90
ssg71
g2697
sg64
(lp2709
S':'
asbag57
(g78
g59
NtRp2710
(dp2711
g62
(dp2712
sg71
g2697
sg64
(lp2713
g57
(g58
g59
NtRp2714
(dp2715
g62
(dp2716
g70
I3
ssg71
g2710
sg64
(lp2717
g203
asbasbasbag57
(g73
g59
NtRp2718
(dp2719
g62
(dp2720
sg71
g2462
sg64
(lp2721
g57
(g78
g59
NtRp2722
(dp2723
g62
(dp2724
g82
g83
ssg71
g2718
sg64
(lp2725
S'REMOTE_PORT'
p2726
asbag57
(g78
g59
NtRp2727
(dp2728
g62
(dp2729
g89
g90
ssg71
g2718
sg64
(lp2730
S':'
asbag57
(g78
g59
NtRp2731
(dp2732
g62
(dp2733
sg71
g2718
sg64
(lp2734
g57
(g58
g59
NtRp2735
(dp2736
g62
(dp2737
g70
I3
ssg71
g2731
sg64
(lp2738
g1321
asbasbasbag57
(g73
g59
NtRp2739
(dp2740
g62
(dp2741
sg71
g2462
sg64
(lp2742
g57
(g78
g59
NtRp2743
(dp2744
g62
(dp2745
g82
g83
ssg71
g2739
sg64
(lp2746
S'REQUEST_METHOD'
p2747
asbag57
(g78
g59
NtRp2748
(dp2749
g62
(dp2750
g89
g90
ssg71
g2739
sg64
(lp2751
S':'
asbag57
(g78
g59
NtRp2752
(dp2753
g62
(dp2754
sg71
g2739
sg64
(lp2755
g57
(g58
g59
NtRp2756
(dp2757
g62
(dp2758
g70
I3
ssg71
g2752
sg64
(lp2759
g1343
asbasbasbag57
(g73
g59
NtRp2760
(dp2761
g62
(dp2762
sg71
g2462
sg64
(lp2763
g57
(g78
g59
NtRp2764
(dp2765
g62
(dp2766
g82
g83
ssg71
g2760
sg64
(lp2767
S'SCRIPT_NAME'
p2768
asbag57
(g78
g59
NtRp2769
(dp2770
g62
(dp2771
g89
g90
ssg71
g2760
sg64
(lp2772
S':'
asbag57
(g78
g59
NtRp2773
(dp2774
g62
(dp2775
sg71
g2760
sg64
(lp2776
g57
(g58
g59
NtRp2777
(dp2778
g62
(dp2779
g70
I3
ssg71
g2773
sg64
(lp2780
S''
asbasbasbag57
(g73
g59
NtRp2781
(dp2782
g62
(dp2783
sg71
g2462
sg64
(lp2784
g57
(g78
g59
NtRp2785
(dp2786
g62
(dp2787
g82
g83
ssg71
g2781
sg64
(lp2788
S'SERVER_NAME'
p2789
asbag57
(g78
g59
NtRp2790
(dp2791
g62
(dp2792
g89
g90
ssg71
g2781
sg64
(lp2793
S':'
asbag57
(g78
g59
NtRp2794
(dp2795
g62
(dp2796
sg71
g2781
sg64
(lp2797
g57
(g58
g59
NtRp2798
(dp2799
g62
(dp2800
g70
I3
ssg71
g2794
sg64
(lp2801
g1386
asbasbasbag57
(g73
g59
NtRp2802
(dp2803
g62
(dp2804
sg71
g2462
sg64
(lp2805
g57
(g78
g59
NtRp2806
(dp2807
g62
(dp2808
g82
g83
ssg71
g2802
sg64
(lp2809
S'SERVER_PORT'
p2810
asbag57
(g78
g59
NtRp2811
(dp2812
g62
(dp2813
g89
g90
ssg71
g2802
sg64
(lp2814
S':'
asbag57
(g78
g59
NtRp2815
(dp2816
g62
(dp2817
sg71
g2802
sg64
(lp2818
g57
(g58
g59
NtRp2819
(dp2820
g62
(dp2821
g70
I3
ssg71
g2815
sg64
(lp2822
g1408
asbasbasbag57
(g73
g59
NtRp2823
(dp2824
g62
(dp2825
sg71
g2462
sg64
(lp2826
g57
(g78
g59
NtRp2827
(dp2828
g62
(dp2829
g82
g83
ssg71
g2823
sg64
(lp2830
S'SERVER_PROTOCOL'
p2831
asbag57
(g78
g59
NtRp2832
(dp2833
g62
(dp2834
g89
g90
ssg71
g2823
sg64
(lp2835
S':'
asbag57
(g78
g59
NtRp2836
(dp2837
g62
(dp2838
sg71
g2823
sg64
(lp2839
g57
(g58
g59
NtRp2840
(dp2841
g62
(dp2842
g70
I3
ssg71
g2836
sg64
(lp2843
g1430
asbasbasbag57
(g73
g59
NtRp2844
(dp2845
g62
(dp2846
sg71
g2462
sg64
(lp2847
g57
(g78
g59
NtRp2848
(dp2849
g62
(dp2850
g82
g83
ssg71
g2844
sg64
(lp2851
S'SERVER_SOFTWARE'
p2852
asbag57
(g78
g59
NtRp2853
(dp2854
g62
(dp2855
g89
g90
ssg71
g2844
sg64
(lp2856
S':'
asbag57
(g78
g59
NtRp2857
(dp2858
g62
(dp2859
sg71
g2844
sg64
(lp2860
g57
(g58
g59
NtRp2861
(dp2862
g62
(dp2863
g70
I3
ssg71
g2857
sg64
(lp2864
g1452
asbasbasbag57
(g73
g59
NtRp2865
(dp2866
g62
(dp2867
sg71
g2462
sg64
(lp2868
g57
(g78
g59
NtRp2869
(dp2870
g62
(dp2871
g82
g83
ssg71
g2865
sg64
(lp2872
S'wsgi.errors'
p2873
asbag57
(g78
g59
NtRp2874
(dp2875
g62
(dp2876
g89
g90
ssg71
g2865
sg64
(lp2877
S':'
asbag57
(g78
g59
NtRp2878
(dp2879
g62
(dp2880
sg71
g2865
sg64
(lp2881
g57
(g58
g59
NtRp2882
(dp2883
g62
(dp2884
g70
I3
ssg71
g2878
sg64
(lp2885
S"<open file '<stderr>', mode 'w' at 0x100282270>"
p2886
asbasbasbag57
(g73
g59
NtRp2887
(dp2888
g62
(dp2889
sg71
g2462
sg64
(lp2890
g57
(g78
g59
NtRp2891
(dp2892
g62
(dp2893
g82
g83
ssg71
g2887
sg64
(lp2894
S'wsgi.file_wrapper'
p2895
asbag57
(g78
g59
NtRp2896
(dp2897
g62
(dp2898
g89
g90
ssg71
g2887
sg64
(lp2899
S':'
asbag57
(g78
g59
NtRp2900
(dp2901
g62
(dp2902
sg71
g2887
sg64
(lp2903
g57
(g58
g59
NtRp2904
(dp2905
g62
(dp2906
g70
I3
ssg71
g2900
sg64
(lp2907
S'<class wsgiref.util.FileWrapper at 0x101a17328>'
p2908
asbasbasbag57
(g73
g59
NtRp2909
(dp2910
g62
(dp2911
sg71
g2462
sg64
(lp2912
g57
(g78
g59
NtRp2913
(dp2914
g62
(dp2915
g82
g83
ssg71
g2909
sg64
(lp2916
S'wsgi.input'
p2917
asbag57
(g78
g59
NtRp2918
(dp2919
g62
(dp2920
g89
g90
ssg71
g2909
sg64
(lp2921
S':'
asbag57
(g78
g59
NtRp2922
(dp2923
g62
(dp2924
sg71
g2909
sg64
(lp2925
g57
(g58
g59
NtRp2926
(dp2927
g62
(dp2928
g70
I3
ssg71
g2922
sg64
(lp2929
S'<cStringIO.StringO object at 0x108d269d0>'
p2930
asbasbasbag57
(g73
g59
NtRp2931
(dp2932
g62
(dp2933
sg71
g2462
sg64
(lp2934
g57
(g78
g59
NtRp2935
(dp2936
g62
(dp2937
g82
g83
ssg71
g2931
sg64
(lp2938
S'wsgi.multiprocess'
p2939
asbag57
(g78
g59
NtRp2940
(dp2941
g62
(dp2942
g89
g90
ssg71
g2931
sg64
(lp2943
S':'
asbag57
(g78
g59
NtRp2944
(dp2945
g62
(dp2946
sg71
g2931
sg64
(lp2947
g57
(g58
g59
NtRp2948
(dp2949
g62
(dp2950
g70
I3
ssg71
g2944
sg64
(lp2951
g100
asbasbasbag57
(g73
g59
NtRp2952
(dp2953
g62
(dp2954
sg71
g2462
sg64
(lp2955
g57
(g78
g59
NtRp2956
(dp2957
g62
(dp2958
g82
g83
ssg71
g2952
sg64
(lp2959
S'wsgi.multithread'
p2960
asbag57
(g78
g59
NtRp2961
(dp2962
g62
(dp2963
g89
g90
ssg71
g2952
sg64
(lp2964
S':'
asbag57
(g78
g59
NtRp2965
(dp2966
g62
(dp2967
sg71
g2952
sg64
(lp2968
g57
(g58
g59
NtRp2969
(dp2970
g62
(dp2971
g70
I3
ssg71
g2965
sg64
(lp2972
g1692
asbasbasbag57
(g73
g59
NtRp2973
(dp2974
g62
(dp2975
sg71
g2462
sg64
(lp2976
g57
(g78
g59
NtRp2977
(dp2978
g62
(dp2979
g82
g83
ssg71
g2973
sg64
(lp2980
S'wsgi.run_once'
p2981
asbag57
(g78
g59
NtRp2982
(dp2983
g62
(dp2984
g89
g90
ssg71
g2973
sg64
(lp2985
S':'
asbag57
(g78
g59
NtRp2986
(dp2987
g62
(dp2988
sg71
g2973
sg64
(lp2989
g57
(g58
g59
NtRp2990
(dp2991
g62
(dp2992
g70
I3
ssg71
g2986
sg64
(lp2993
g100
asbasbasbag57
(g73
g59
NtRp2994
(dp2995
g62
(dp2996
sg71
g2462
sg64
(lp2997
g57
(g78
g59
NtRp2998
(dp2999
g62
(dp3000
g82
g83
ssg71
g2994
sg64
(lp3001
S'wsgi.url_scheme'
p3002
asbag57
(g78
g59
NtRp3003
(dp3004
g62
(dp3005
g89
g90
ssg71
g2994
sg64
(lp3006
S':'
asbag57
(g78
g59
NtRp3007
(dp3008
g62
(dp3009
sg71
g2994
sg64
(lp3010
g57
(g58
g59
NtRp3011
(dp3012
g62
(dp3013
g70
I3
ssg71
g3007
sg64
(lp3014
g1735
asbasbasbag57
(g73
g59
NtRp3015
(dp3016
g62
(dp3017
sg71
g2462
sg64
(lp3018
g57
(g78
g59
NtRp3019
(dp3020
g62
(dp3021
g82
g83
ssg71
g3015
sg64
(lp3022
S'wsgi.version'
p3023
asbag57
(g78
g59
NtRp3024
(dp3025
g62
(dp3026
g89
g90
ssg71
g3015
sg64
(lp3027
S':'
asbag57
(g78
g59
NtRp3028
(dp3029
g62
(dp3030
sg71
g3015
sg64
(lp3031
g57
(g58
g59
NtRp3032
(dp3033
g62
(dp3034
g70
I3
ssg71
g3028
sg64
(lp3035
S'1'
asbasbasbasbasbasbasbasbasbasbasbasbasbsS'frames'
p3036
(lp3037
(dp3038
S'file'
p3039
S'/Users/hainna01/Desktop/SeniorProject/web2py/gluon/restricted.py'
p3040
sS'dump'
p3041
(dp3042
S'environment'
p3043
S"{'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}"
p3044
sS'ccode'
p3045
S'<code object <module> at 0x10b3e7c30, file "/Use...s/SeniorProject/controllers/default.py", line 13>'
p3046
ssS'lnum'
p3047
I205
sS'lines'
p3048
(dp3049
I200
S'    try:'
p3050
sI201
S'        if type(code) == types.CodeType:'
p3051
sI202
S'            ccode = code'
p3052
sI203
S'        else:'
p3053
sI204
S'            ccode = compile2(code,layer)'
p3054
sI205
S'        exec ccode in environment'
p3055
sI206
S'    except HTTP:'
p3056
sI207
S'        raise'
p3057
sI208
S'    except RestrictedError:'
p3058
sI209
S'        # do not encapsulate (obfuscate) the original RestrictedError'
p3059
ssS'call'
p3060
S"(code='# -*- coding: utf-8 -*-\\n# this file is released ...turn html\\n\\nresponse._vars=response._caller(user)\\n', environment={'A': <class 'gluon.html.A'>, 'Auth': <class 'gluon.tools.Auth'>, 'B': <class 'gluon.html.B'>, 'BEAUTIFY': <class 'gluon.html.BEAUTIFY'>, 'BODY': <class 'gluon.html.BODY'>, 'BR': <class 'gluon.html.BR'>, 'BUTTON': <class 'gluon.html.BUTTON'>, 'CAT': <class 'gluon.html.CAT'>, 'CENTER': <class 'gluon.html.CENTER'>, 'CLEANUP': <class 'gluon.validators.CLEANUP'>, ...}, layer='/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py')"
p3061
sS'func'
p3062
S'restricted'
p3063
sa(dp3064
g3039
S'/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py'
p3065
sg3041
(dp3066
S'setUpFlickrStuff'
p3067
S'<function setUpFlickrStuff>'
p3068
ssg3047
I133
sg3048
(dp3069
I128
S''
sI129
S'#Do all the set-up/initializing that is necessary for using the site (calling the above functions)'
p3070
sI130
S'user = getUser()                            #Get the current user of the site'
p3071
sI131
S'projects = getProjectsForUser(user)         #Get the projects that the user is associated with'
p3072
sI132
S'myProfileForm = getProfileFormForUser(user) #Get the form for the "My Profile" tab'
p3073
sI133
S"setUpFlickrStuff()                          #Make sure all the flickr stuff is good to go (make sure we're authenticated)"
p3074
sI134
S''
sI135
S''
sI136
S'#Called when a new photoForm is submitted (called from showform when the photoForm is accepted)'
p3075
sI137
S'def uploadPhotoToFlickr(photoForm):'
p3076
ssg3060
S'()'
p3077
sg3062
S'<module>'
p3078
sa(dp3079
g3039
S'/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py'
p3080
sg3041
(dp3081
sg3047
I122
sg3048
(dp3082
I117
S'        "api_key":"614fd86a34a00d38293c7e803d14c3ab",'
p3083
sI118
S'        "photo_id":8655391465,'
p3084
sI119
S'        "secret":"",'
p3085
sI120
S'        "format":"json",'
p3086
sI121
S'        "nojsoncallback":1,'
p3087
sI122
S'        "auth_token":"72157632878384274-4abc077968f36490"'
p3088
sI123
S''
sI124
S'    })'
p3089
sI125
S'    import tkMessageBox'
p3090
sI126
S'    tkMessageBox.showinfo(title="Greetings", message=thing)                         #Redirect to that website'
p3091
ssg3060
S'()'
p3092
sg3062
S'setUpFlickrStuff'
p3093
sa(dp3094
g3039
S'/Users/hainna01/Desktop/SeniorProject/web2py/site-packages/flickrapi/__init__.py'
p3095
sg3041
(dp3096
S"''.join"
p3097
S'undefined'
p3098
sS'global md5'
p3099
S'<built-in function openssl_md5>'
p3100
sS'data'
p3101
S"['ad86826c3187eb4d', 'api_key', '614fd86a34a00d38293c7e803d14c3ab', 'auth_token', '72157632878384274-4abc077968f36490', 'format', 'json', 'method', 'flickr.photos.getInfo', 'nojsoncallback', 1, 'photo_id', 8655391465, 'secret', '']"
p3102
sS'md5_hash'
p3103
g3098
ssg3047
I299
sg3048
(dp3104
I294
S'            if isinstance(datum, unicode):'
p3105
sI295
S'                raise IllegalArgumentException("No Unicode allowed, "'
p3106
sI296
S'                        "argument %s (%r) should have been UTF-8 by now"'
p3107
sI297
S'                        % (key, datum))'
p3108
sI298
S'            data.append(datum)'
p3109
sI299
S"        md5_hash = md5(''.join(data))"
p3110
sI300
S'        return md5_hash.hexdigest()'
p3111
sI301
S''
sI302
S'    def encode_and_sign(self, dictionary):'
p3112
sI303
S"        '''URL encodes the data in the dictionary, and signs it using the"
p3113
ssg3060
S'(self=[FlickrAPI for key "614fd86a34a00d38293c7e803d14c3ab"], dictionary={\'api_key\': \'614fd86a34a00d38293c7e803d14c3ab\', \'auth_token\': \'72157632878384274-4abc077968f36490\', \'format\': \'json\', \'method\': \'flickr.photos.getInfo\', \'nojsoncallback\': 1, \'photo_id\': 8655391465, \'secret\': \'\'})'
p3114
sg3062
S'sign'
p3115
sasS'pyver'
p3116
S'Python 2.7.2: /Library/Frameworks/Python.framework/Versions/2.7/Resources/Python.app/Contents/MacOS/Python'
p3117
sS'session'
p3118
g57
(g58
g59
NtRp3119
(dp3120
g62
(dp3121
sg64
(lp3122
g57
(g66
g59
NtRp3123
(dp3124
g62
(dp3125
g70
I5
ssg71
Nsg64
(lp3126
g57
(g73
g59
NtRp3127
(dp3128
g62
(dp3129
sg71
g3123
sg64
(lp3130
g57
(g78
g59
NtRp3131
(dp3132
g62
(dp3133
g82
g83
ssg71
g3127
sg64
(lp3134
S'flash'
p3135
asbag57
(g78
g59
NtRp3136
(dp3137
g62
(dp3138
g89
g90
ssg71
g3127
sg64
(lp3139
S':'
asbag57
(g78
g59
NtRp3140
(dp3141
g62
(dp3142
sg71
g3127
sg64
(lp3143
g57
(g58
g59
NtRp3144
(dp3145
g62
(dp3146
g70
I5
ssg71
g3140
sg64
(lp3147
S''
asbasbasbag57
(g73
g59
NtRp3148
(dp3149
g62
(dp3150
sg71
g3123
sg64
(lp3151
g57
(g78
g59
NtRp3152
(dp3153
g62
(dp3154
g82
g83
ssg71
g3148
sg64
(lp3155
S'last_query'
p3156
asbag57
(g78
g59
NtRp3157
(dp3158
g62
(dp3159
g89
g90
ssg71
g3148
sg64
(lp3160
S':'
asbag57
(g78
g59
NtRp3161
(dp3162
g62
(dp3163
sg71
g3148
sg64
(lp3164
g57
(g58
g59
NtRp3165
(dp3166
g62
(dp3167
g70
I5
ssg71
g3161
sg64
(lp3168
S'db.PhotoToken.id>0'
p3169
asbasbasbasbasbsS'etype'
p3170
S"<type 'exceptions.TypeError'>"
p3171
sS'date'
p3172
S'Tue Apr 16 18:00:33 2013'
p3173
sS'response'
p3174
g57
(g58
g59
NtRp3175
(dp3176
g62
(dp3177
sg64
(lp3178
g57
(g66
g59
NtRp3179
(dp3180
g62
(dp3181
g70
I5
ssg71
Nsg64
(lp3182
g57
(g73
g59
NtRp3183
(dp3184
g62
(dp3185
sg71
g3179
sg64
(lp3186
g57
(g78
g59
NtRp3187
(dp3188
g62
(dp3189
g82
g83
ssg71
g3183
sg64
(lp3190
g168
asbag57
(g78
g59
NtRp3191
(dp3192
g62
(dp3193
g89
g90
ssg71
g3183
sg64
(lp3194
S':'
asbag57
(g78
g59
NtRp3195
(dp3196
g62
(dp3197
sg71
g3183
sg64
(lp3198
g57
(g58
g59
NtRp3199
(dp3200
g62
(dp3201
g70
I5
ssg71
g3195
sg64
(lp3202
S'<cStringIO.StringO object at 0x108d26768>'
p3203
asbasbasbag57
(g73
g59
NtRp3204
(dp3205
g62
(dp3206
sg71
g3179
sg64
(lp3207
g57
(g78
g59
NtRp3208
(dp3209
g62
(dp3210
g82
g83
ssg71
g3204
sg64
(lp3211
g234
asbag57
(g78
g59
NtRp3212
(dp3213
g62
(dp3214
g89
g90
ssg71
g3204
sg64
(lp3215
S':'
asbag57
(g78
g59
NtRp3216
(dp3217
g62
(dp3218
sg71
g3204
sg64
(lp3219
g57
(g58
g59
NtRp3220
(dp3221
g62
(dp3222
g70
I5
ssg71
g3216
sg64
(lp3223
g57
(g66
g59
NtRp3224
(dp3225
g62
(dp3226
g70
I4
ssg71
Nsg64
(lp3227
g57
(g73
g59
NtRp3228
(dp3229
g62
(dp3230
sg71
g3224
sg64
(lp3231
g57
(g78
g59
NtRp3232
(dp3233
g62
(dp3234
g82
g83
ssg71
g3228
sg64
(lp3235
S'session_id_seniorproject'
p3236
asbag57
(g78
g59
NtRp3237
(dp3238
g62
(dp3239
g89
g90
ssg71
g3228
sg64
(lp3240
S':'
asbag57
(g78
g59
NtRp3241
(dp3242
g62
(dp3243
sg71
g3228
sg64
(lp3244
g57
(g58
g59
NtRp3245
(dp3246
g62
(dp3247
g70
I4
ssg71
g3241
sg64
(lp3248
g57
(g66
g59
NtRp3249
(dp3250
g62
(dp3251
g70
I3
ssg71
Nsg64
(lp3252
g57
(g73
g59
NtRp3253
(dp3254
g62
(dp3255
sg71
g3249
sg64
(lp3256
g57
(g78
g59
NtRp3257
(dp3258
g62
(dp3259
g82
g83
ssg71
g3253
sg64
(lp3260
g284
asbag57
(g78
g59
NtRp3261
(dp3262
g62
(dp3263
g89
g90
ssg71
g3253
sg64
(lp3264
S':'
asbag57
(g78
g59
NtRp3265
(dp3266
g62
(dp3267
sg71
g3253
sg64
(lp3268
g57
(g58
g59
NtRp3269
(dp3270
g62
(dp3271
g70
I3
ssg71
g3265
sg64
(lp3272
S''
asbasbasbag57
(g73
g59
NtRp3273
(dp3274
g62
(dp3275
sg71
g3249
sg64
(lp3276
g57
(g78
g59
NtRp3277
(dp3278
g62
(dp3279
g82
g83
ssg71
g3273
sg64
(lp3280
g305
asbag57
(g78
g59
NtRp3281
(dp3282
g62
(dp3283
g89
g90
ssg71
g3273
sg64
(lp3284
S':'
asbag57
(g78
g59
NtRp3285
(dp3286
g62
(dp3287
sg71
g3273
sg64
(lp3288
g57
(g58
g59
NtRp3289
(dp3290
g62
(dp3291
g70
I3
ssg71
g3285
sg64
(lp3292
S''
asbasbasbag57
(g73
g59
NtRp3293
(dp3294
g62
(dp3295
sg71
g3249
sg64
(lp3296
g57
(g78
g59
NtRp3297
(dp3298
g62
(dp3299
g82
g83
ssg71
g3293
sg64
(lp3300
g326
asbag57
(g78
g59
NtRp3301
(dp3302
g62
(dp3303
g89
g90
ssg71
g3293
sg64
(lp3304
S':'
asbag57
(g78
g59
NtRp3305
(dp3306
g62
(dp3307
sg71
g3293
sg64
(lp3308
g57
(g58
g59
NtRp3309
(dp3310
g62
(dp3311
g70
I3
ssg71
g3305
sg64
(lp3312
S''
asbasbasbag57
(g73
g59
NtRp3313
(dp3314
g62
(dp3315
sg71
g3249
sg64
(lp3316
g57
(g78
g59
NtRp3317
(dp3318
g62
(dp3319
g82
g83
ssg71
g3313
sg64
(lp3320
g347
asbag57
(g78
g59
NtRp3321
(dp3322
g62
(dp3323
g89
g90
ssg71
g3313
sg64
(lp3324
S':'
asbag57
(g78
g59
NtRp3325
(dp3326
g62
(dp3327
sg71
g3313
sg64
(lp3328
g57
(g58
g59
NtRp3329
(dp3330
g62
(dp3331
g70
I3
ssg71
g3325
sg64
(lp3332
S''
asbasbasbag57
(g73
g59
NtRp3333
(dp3334
g62
(dp3335
sg71
g3249
sg64
(lp3336
g57
(g78
g59
NtRp3337
(dp3338
g62
(dp3339
g82
g83
ssg71
g3333
sg64
(lp3340
g368
asbag57
(g78
g59
NtRp3341
(dp3342
g62
(dp3343
g89
g90
ssg71
g3333
sg64
(lp3344
S':'
asbag57
(g78
g59
NtRp3345
(dp3346
g62
(dp3347
sg71
g3333
sg64
(lp3348
g57
(g58
g59
NtRp3349
(dp3350
g62
(dp3351
g70
I3
ssg71
g3345
sg64
(lp3352
S''
asbasbasbag57
(g73
g59
NtRp3353
(dp3354
g62
(dp3355
sg71
g3249
sg64
(lp3356
g57
(g78
g59
NtRp3357
(dp3358
g62
(dp3359
g82
g83
ssg71
g3353
sg64
(lp3360
g389
asbag57
(g78
g59
NtRp3361
(dp3362
g62
(dp3363
g89
g90
ssg71
g3353
sg64
(lp3364
S':'
asbag57
(g78
g59
NtRp3365
(dp3366
g62
(dp3367
sg71
g3353
sg64
(lp3368
g57
(g58
g59
NtRp3369
(dp3370
g62
(dp3371
g70
I3
ssg71
g3365
sg64
(lp3372
S'/'
asbasbasbag57
(g73
g59
NtRp3373
(dp3374
g62
(dp3375
sg71
g3249
sg64
(lp3376
g57
(g78
g59
NtRp3377
(dp3378
g62
(dp3379
g82
g83
ssg71
g3373
sg64
(lp3380
g410
asbag57
(g78
g59
NtRp3381
(dp3382
g62
(dp3383
g89
g90
ssg71
g3373
sg64
(lp3384
S':'
asbag57
(g78
g59
NtRp3385
(dp3386
g62
(dp3387
sg71
g3373
sg64
(lp3388
g57
(g58
g59
NtRp3389
(dp3390
g62
(dp3391
g70
I3
ssg71
g3385
sg64
(lp3392
S''
asbasbasbag57
(g73
g59
NtRp3393
(dp3394
g62
(dp3395
sg71
g3249
sg64
(lp3396
g57
(g78
g59
NtRp3397
(dp3398
g62
(dp3399
g82
g83
ssg71
g3393
sg64
(lp3400
g431
asbag57
(g78
g59
NtRp3401
(dp3402
g62
(dp3403
g89
g90
ssg71
g3393
sg64
(lp3404
S':'
asbag57
(g78
g59
NtRp3405
(dp3406
g62
(dp3407
sg71
g3393
sg64
(lp3408
g57
(g58
g59
NtRp3409
(dp3410
g62
(dp3411
g70
I3
ssg71
g3405
sg64
(lp3412
S''
asbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp3413
(dp3414
g62
(dp3415
sg71
g3179
sg64
(lp3416
g57
(g78
g59
NtRp3417
(dp3418
g62
(dp3419
g82
g83
ssg71
g3413
sg64
(lp3420
S'delimiters'
p3421
asbag57
(g78
g59
NtRp3422
(dp3423
g62
(dp3424
g89
g90
ssg71
g3413
sg64
(lp3425
S':'
asbag57
(g78
g59
NtRp3426
(dp3427
g62
(dp3428
sg71
g3413
sg64
(lp3429
g57
(g58
g59
NtRp3430
(dp3431
g62
(dp3432
g70
I5
ssg71
g3426
sg64
(lp3433
g57
(g66
g59
NtRp3434
(dp3435
g62
(dp3436
g70
I4
ssg71
Nsg64
(lp3437
g57
(g73
g59
NtRp3438
(dp3439
g62
(dp3440
sg71
g3434
sg64
(lp3441
g57
(g78
g59
NtRp3442
(dp3443
g62
(dp3444
sg71
g3438
sg64
(lp3445
g57
(g58
g59
NtRp3446
(dp3447
g62
(dp3448
g70
I4
ssg71
g3442
sg64
(lp3449
S'{{'
p3450
asbasbasbag57
(g73
g59
NtRp3451
(dp3452
g62
(dp3453
sg71
g3434
sg64
(lp3454
g57
(g78
g59
NtRp3455
(dp3456
g62
(dp3457
sg71
g3451
sg64
(lp3458
g57
(g58
g59
NtRp3459
(dp3460
g62
(dp3461
g70
I4
ssg71
g3455
sg64
(lp3462
S'}}'
p3463
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3464
(dp3465
g62
(dp3466
sg71
g3179
sg64
(lp3467
g57
(g78
g59
NtRp3468
(dp3469
g62
(dp3470
g82
g83
ssg71
g3464
sg64
(lp3471
S'files'
p3472
asbag57
(g78
g59
NtRp3473
(dp3474
g62
(dp3475
g89
g90
ssg71
g3464
sg64
(lp3476
S':'
asbag57
(g78
g59
NtRp3477
(dp3478
g62
(dp3479
sg71
g3464
sg64
(lp3480
g57
(g58
g59
NtRp3481
(dp3482
g62
(dp3483
g70
I5
ssg71
g3477
sg64
(lp3484
g57
(g66
g59
NtRp3485
(dp3486
g62
(dp3487
g70
I4
ssg71
Nsg64
(lp3488
sbasbasbasbag57
(g73
g59
NtRp3489
(dp3490
g62
(dp3491
sg71
g3179
sg64
(lp3492
g57
(g78
g59
NtRp3493
(dp3494
g62
(dp3495
g82
g83
ssg71
g3489
sg64
(lp3496
S'flash'
p3497
asbag57
(g78
g59
NtRp3498
(dp3499
g62
(dp3500
g89
g90
ssg71
g3489
sg64
(lp3501
S':'
asbag57
(g78
g59
NtRp3502
(dp3503
g62
(dp3504
sg71
g3489
sg64
(lp3505
g57
(g58
g59
NtRp3506
(dp3507
g62
(dp3508
g70
I5
ssg71
g3502
sg64
(lp3509
S''
asbasbasbag57
(g73
g59
NtRp3510
(dp3511
g62
(dp3512
sg71
g3179
sg64
(lp3513
g57
(g78
g59
NtRp3514
(dp3515
g62
(dp3516
g82
g83
ssg71
g3510
sg64
(lp3517
S'generic_patterns'
p3518
asbag57
(g78
g59
NtRp3519
(dp3520
g62
(dp3521
g89
g90
ssg71
g3510
sg64
(lp3522
S':'
asbag57
(g78
g59
NtRp3523
(dp3524
g62
(dp3525
sg71
g3510
sg64
(lp3526
g57
(g58
g59
NtRp3527
(dp3528
g62
(dp3529
g70
I5
ssg71
g3523
sg64
(lp3530
g57
(g66
g59
NtRp3531
(dp3532
g62
(dp3533
g70
I4
ssg71
Nsg64
(lp3534
g57
(g73
g59
NtRp3535
(dp3536
g62
(dp3537
sg71
g3531
sg64
(lp3538
g57
(g78
g59
NtRp3539
(dp3540
g62
(dp3541
sg71
g3535
sg64
(lp3542
g57
(g58
g59
NtRp3543
(dp3544
g62
(dp3545
g70
I4
ssg71
g3539
sg64
(lp3546
S'*'
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3547
(dp3548
g62
(dp3549
sg71
g3179
sg64
(lp3550
g57
(g78
g59
NtRp3551
(dp3552
g62
(dp3553
g82
g83
ssg71
g3547
sg64
(lp3554
S'headers'
p3555
asbag57
(g78
g59
NtRp3556
(dp3557
g62
(dp3558
g89
g90
ssg71
g3547
sg64
(lp3559
S':'
asbag57
(g78
g59
NtRp3560
(dp3561
g62
(dp3562
sg71
g3547
sg64
(lp3563
g57
(g58
g59
NtRp3564
(dp3565
g62
(dp3566
g70
I5
ssg71
g3560
sg64
(lp3567
g57
(g66
g59
NtRp3568
(dp3569
g62
(dp3570
g70
I4
ssg71
Nsg64
(lp3571
g57
(g73
g59
NtRp3572
(dp3573
g62
(dp3574
sg71
g3568
sg64
(lp3575
g57
(g78
g59
NtRp3576
(dp3577
g62
(dp3578
g82
g83
ssg71
g3572
sg64
(lp3579
S'Cache-Control'
p3580
asbag57
(g78
g59
NtRp3581
(dp3582
g62
(dp3583
g89
g90
ssg71
g3572
sg64
(lp3584
S':'
asbag57
(g78
g59
NtRp3585
(dp3586
g62
(dp3587
sg71
g3572
sg64
(lp3588
g57
(g58
g59
NtRp3589
(dp3590
g62
(dp3591
g70
I4
ssg71
g3585
sg64
(lp3592
S'no-store, no-cache, must-revalidate, post-check=0, pre-check=0'
p3593
asbasbasbag57
(g73
g59
NtRp3594
(dp3595
g62
(dp3596
sg71
g3568
sg64
(lp3597
g57
(g78
g59
NtRp3598
(dp3599
g62
(dp3600
g82
g83
ssg71
g3594
sg64
(lp3601
S'Content-Type'
p3602
asbag57
(g78
g59
NtRp3603
(dp3604
g62
(dp3605
g89
g90
ssg71
g3594
sg64
(lp3606
S':'
asbag57
(g78
g59
NtRp3607
(dp3608
g62
(dp3609
sg71
g3594
sg64
(lp3610
g57
(g58
g59
NtRp3611
(dp3612
g62
(dp3613
g70
I4
ssg71
g3607
sg64
(lp3614
S'text/html; charset=utf-8'
p3615
asbasbasbag57
(g73
g59
NtRp3616
(dp3617
g62
(dp3618
sg71
g3568
sg64
(lp3619
g57
(g78
g59
NtRp3620
(dp3621
g62
(dp3622
g82
g83
ssg71
g3616
sg64
(lp3623
S'Expires'
p3624
asbag57
(g78
g59
NtRp3625
(dp3626
g62
(dp3627
g89
g90
ssg71
g3616
sg64
(lp3628
S':'
asbag57
(g78
g59
NtRp3629
(dp3630
g62
(dp3631
sg71
g3616
sg64
(lp3632
g57
(g58
g59
NtRp3633
(dp3634
g62
(dp3635
g70
I4
ssg71
g3629
sg64
(lp3636
S'Tue, 16 Apr 2013 23:00:32 GMT'
p3637
asbasbasbag57
(g73
g59
NtRp3638
(dp3639
g62
(dp3640
sg71
g3568
sg64
(lp3641
g57
(g78
g59
NtRp3642
(dp3643
g62
(dp3644
g82
g83
ssg71
g3638
sg64
(lp3645
S'Pragma'
p3646
asbag57
(g78
g59
NtRp3647
(dp3648
g62
(dp3649
g89
g90
ssg71
g3638
sg64
(lp3650
S':'
asbag57
(g78
g59
NtRp3651
(dp3652
g62
(dp3653
sg71
g3638
sg64
(lp3654
g57
(g58
g59
NtRp3655
(dp3656
g62
(dp3657
g70
I4
ssg71
g3651
sg64
(lp3658
S'no-cache'
p3659
asbasbasbag57
(g73
g59
NtRp3660
(dp3661
g62
(dp3662
sg71
g3568
sg64
(lp3663
g57
(g78
g59
NtRp3664
(dp3665
g62
(dp3666
g82
g83
ssg71
g3660
sg64
(lp3667
S'X-Powered-By'
p3668
asbag57
(g78
g59
NtRp3669
(dp3670
g62
(dp3671
g89
g90
ssg71
g3660
sg64
(lp3672
S':'
asbag57
(g78
g59
NtRp3673
(dp3674
g62
(dp3675
sg71
g3660
sg64
(lp3676
g57
(g58
g59
NtRp3677
(dp3678
g62
(dp3679
g70
I4
ssg71
g3673
sg64
(lp3680
S'web2py'
p3681
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3682
(dp3683
g62
(dp3684
sg71
g3179
sg64
(lp3685
g57
(g78
g59
NtRp3686
(dp3687
g62
(dp3688
g82
g83
ssg71
g3682
sg64
(lp3689
S'menu'
p3690
asbag57
(g78
g59
NtRp3691
(dp3692
g62
(dp3693
g89
g90
ssg71
g3682
sg64
(lp3694
S':'
asbag57
(g78
g59
NtRp3695
(dp3696
g62
(dp3697
sg71
g3682
sg64
(lp3698
g57
(g58
g59
NtRp3699
(dp3700
g62
(dp3701
g70
I5
ssg71
g3695
sg64
(lp3702
g57
(g66
g59
NtRp3703
(dp3704
g62
(dp3705
g70
I4
ssg71
Nsg64
(lp3706
g57
(g73
g59
NtRp3707
(dp3708
g62
(dp3709
sg71
g3703
sg64
(lp3710
g57
(g78
g59
NtRp3711
(dp3712
g62
(dp3713
sg71
g3707
sg64
(lp3714
g57
(g58
g59
NtRp3715
(dp3716
g62
(dp3717
g70
I4
ssg71
g3711
sg64
(lp3718
g57
(g66
g59
NtRp3719
(dp3720
g62
(dp3721
g70
I3
ssg71
Nsg64
(lp3722
g57
(g73
g59
NtRp3723
(dp3724
g62
(dp3725
sg71
g3719
sg64
(lp3726
g57
(g78
g59
NtRp3727
(dp3728
g62
(dp3729
sg71
g3723
sg64
(lp3730
g57
(g58
g59
NtRp3731
(dp3732
g62
(dp3733
g70
I3
ssg71
g3727
sg64
(lp3734
cgluon.languages
lazyT_unpickle
p3735
(S't\x04\x00\x00\x00Home'
tRp3736
asbasbasbag57
(g73
g59
NtRp3737
(dp3738
g62
(dp3739
sg71
g3719
sg64
(lp3740
g57
(g78
g59
NtRp3741
(dp3742
g62
(dp3743
sg71
g3737
sg64
(lp3744
g57
(g58
g59
NtRp3745
(dp3746
g62
(dp3747
g70
I3
ssg71
g3741
sg64
(lp3748
g100
asbasbasbag57
(g73
g59
NtRp3749
(dp3750
g62
(dp3751
sg71
g3719
sg64
(lp3752
g57
(g78
g59
NtRp3753
(dp3754
g62
(dp3755
sg71
g3749
sg64
(lp3756
g57
(g58
g59
NtRp3757
(dp3758
g62
(dp3759
g70
I3
ssg71
g3753
sg64
(lp3760
S'/SeniorProject/default/index'
p3761
asbasbasbag57
(g73
g59
NtRp3762
(dp3763
g62
(dp3764
sg71
g3719
sg64
(lp3765
g57
(g78
g59
NtRp3766
(dp3767
g62
(dp3768
sg71
g3762
sg64
(lp3769
g57
(g58
g59
NtRp3770
(dp3771
g62
(dp3772
g70
I3
ssg71
g3766
sg64
(lp3773
g57
(g66
g59
NtRp3774
(dp3775
g62
(dp3776
g70
I2
ssg71
Nsg64
(lp3777
sbasbasbasbasbasbasbasbag57
(g73
g59
NtRp3778
(dp3779
g62
(dp3780
sg71
g3703
sg64
(lp3781
g57
(g78
g59
NtRp3782
(dp3783
g62
(dp3784
sg71
g3778
sg64
(lp3785
g57
(g58
g59
NtRp3786
(dp3787
g62
(dp3788
g70
I4
ssg71
g3782
sg64
(lp3789
g57
(g66
g59
NtRp3790
(dp3791
g62
(dp3792
g70
I3
ssg71
Nsg64
(lp3793
g57
(g73
g59
NtRp3794
(dp3795
g62
(dp3796
sg71
g3790
sg64
(lp3797
g57
(g78
g59
NtRp3798
(dp3799
g62
(dp3800
sg71
g3794
sg64
(lp3801
g57
(g58
g59
NtRp3802
(dp3803
g62
(dp3804
g70
I3
ssg71
g3798
sg64
(lp3805
g57
(cgluon.html
SPAN
p3806
g59
NtRp3807
(dp3808
g62
(dp3809
g82
S'color:yellow'
p3810
ssg71
Nsg64
(lp3811
g3681
asbasbasbasbag57
(g73
g59
NtRp3812
(dp3813
g62
(dp3814
sg71
g3790
sg64
(lp3815
g57
(g78
g59
NtRp3816
(dp3817
g62
(dp3818
sg71
g3812
sg64
(lp3819
g57
(g58
g59
NtRp3820
(dp3821
g62
(dp3822
g70
I3
ssg71
g3816
sg64
(lp3823
g100
asbasbasbag57
(g73
g59
NtRp3824
(dp3825
g62
(dp3826
sg71
g3790
sg64
(lp3827
g57
(g78
g59
NtRp3828
(dp3829
g62
(dp3830
sg71
g3824
sg64
(lp3831
g57
(g58
g59
NtRp3832
(dp3833
g62
(dp3834
g70
I3
ssg71
g3828
sg64
(lp3835
S'None'
p3836
asbasbasbag57
(g73
g59
NtRp3837
(dp3838
g62
(dp3839
sg71
g3790
sg64
(lp3840
g57
(g78
g59
NtRp3841
(dp3842
g62
(dp3843
sg71
g3837
sg64
(lp3844
g57
(g58
g59
NtRp3845
(dp3846
g62
(dp3847
g70
I3
ssg71
g3841
sg64
(lp3848
g57
(g66
g59
NtRp3849
(dp3850
g62
(dp3851
g70
I2
ssg71
Nsg64
(lp3852
g57
(g73
g59
NtRp3853
(dp3854
g62
(dp3855
sg71
g3849
sg64
(lp3856
g57
(g78
g59
NtRp3857
(dp3858
g62
(dp3859
sg71
g3853
sg64
(lp3860
g57
(g58
g59
NtRp3861
(dp3862
g62
(dp3863
g70
I2
ssg71
g3857
sg64
(lp3864
g57
(g66
g59
NtRp3865
(dp3866
g62
(dp3867
g70
I1
ssg71
Nsg64
(lp3868
g57
(g73
g59
NtRp3869
(dp3870
g62
(dp3871
sg71
g3865
sg64
(lp3872
g57
(g78
g59
NtRp3873
(dp3874
g62
(dp3875
sg71
g3869
sg64
(lp3876
g57
(g58
g59
NtRp3877
(dp3878
g62
(dp3879
g70
I1
ssg71
g3873
sg64
(lp3880
g3735
(S's\x08\x00\x00\x00My Sites'
tRp3881
asbasbasbag57
(g73
g59
NtRp3882
(dp3883
g62
(dp3884
sg71
g3865
sg64
(lp3885
g57
(g78
g59
NtRp3886
(dp3887
g62
(dp3888
sg71
g3882
sg64
(lp3889
g57
(g58
g59
NtRp3890
(dp3891
g62
(dp3892
g70
I1
ssg71
g3886
sg64
(lp3893
I00
asbasbasbag57
(g73
g59
NtRp3894
(dp3895
g62
(dp3896
sg71
g3865
sg64
(lp3897
g57
(g78
g59
NtRp3898
(dp3899
g62
(dp3900
sg71
g3894
sg64
(lp3901
g57
(g58
g59
NtRp3902
(dp3903
g62
(dp3904
g70
I1
ssg71
g3898
sg64
(lp3905
S'/admin/default/site'
p3906
asbasbasbasbasbasbasbag57
(g73
g59
NtRp3907
(dp3908
g62
(dp3909
sg71
g3849
sg64
(lp3910
g57
(g78
g59
NtRp3911
(dp3912
g62
(dp3913
sg71
g3907
sg64
(lp3914
g57
(g58
g59
NtRp3915
(dp3916
g62
(dp3917
g70
I2
ssg71
g3911
sg64
(lp3918
g57
(g66
g59
NtRp3919
(dp3920
g62
(dp3921
g70
I1
ssg71
Nsg64
(lp3922
g57
(g73
g59
NtRp3923
(dp3924
g62
(dp3925
sg71
g3919
sg64
(lp3926
g57
(g78
g59
NtRp3927
(dp3928
g62
(dp3929
sg71
g3923
sg64
(lp3930
g57
(g58
g59
NtRp3931
(dp3932
g62
(dp3933
g70
I1
ssg71
g3927
sg64
(lp3934
g3735
(S's\x08\x00\x00\x00This App'
tRp3935
asbasbasbag57
(g73
g59
NtRp3936
(dp3937
g62
(dp3938
sg71
g3919
sg64
(lp3939
g57
(g78
g59
NtRp3940
(dp3941
g62
(dp3942
sg71
g3936
sg64
(lp3943
g57
(g58
g59
NtRp3944
(dp3945
g62
(dp3946
g70
I1
ssg71
g3940
sg64
(lp3947
I00
asbasbasbag57
(g73
g59
NtRp3948
(dp3949
g62
(dp3950
sg71
g3919
sg64
(lp3951
g57
(g78
g59
NtRp3952
(dp3953
g62
(dp3954
sg71
g3948
sg64
(lp3955
g57
(g58
g59
NtRp3956
(dp3957
g62
(dp3958
g70
I1
ssg71
g3952
sg64
(lp3959
S'/admin/default/design/SeniorProject'
p3960
asbasbasbag57
(g73
g59
NtRp3961
(dp3962
g62
(dp3963
sg71
g3919
sg64
(lp3964
g57
(g78
g59
NtRp3965
(dp3966
g62
(dp3967
sg71
g3961
sg64
(lp3968
g57
(g58
g59
NtRp3969
(dp3970
g62
(dp3971
g70
I1
ssg71
g3965
sg64
(lp3972
(lp3973
(g3735
(S't\n\x00\x00\x00Controller'
tRp3974
I00
S'/admin/default/edit/SeniorProject/controllers/default.py'
tp3975
a(g3735
(S't\x04\x00\x00\x00View'
tRp3976
I00
S'/admin/default/edit/SeniorProject/views/default/user.html'
tp3977
a(g3735
(S't\x06\x00\x00\x00Layout'
tRp3978
I00
S'/admin/default/edit/SeniorProject/views/layout.html'
tp3979
a(g3735
(S't\n\x00\x00\x00Stylesheet'
tRp3980
I00
S'/admin/default/edit/SeniorProject/static/css/web2py.css'
tp3981
a(g3735
(S's\x08\x00\x00\x00DB Model'
tRp3982
I00
S'/admin/default/edit/SeniorProject/models/db.py'
tp3983
a(g3735
(S's\n\x00\x00\x00Menu Model'
tRp3984
I00
S'/admin/default/edit/SeniorProject/models/menu.py'
tp3985
a(g3735
(S't\x08\x00\x00\x00Database'
tRp3986
I00
S'/SeniorProject/appadmin/index'
tp3987
a(g3735
(S't\x06\x00\x00\x00Errors'
tRp3988
I00
S'/admin/default/errors/SeniorProject'
tp3989
a(g3735
(S't\x05\x00\x00\x00About'
tRp3990
I00
S'/admin/default/about/SeniorProject'
tp3991
aasbasbasbasbasbasbasbag57
(g73
g59
NtRp3992
(dp3993
g62
(dp3994
sg71
g3849
sg64
(lp3995
g57
(g78
g59
NtRp3996
(dp3997
g62
(dp3998
sg71
g3992
sg64
(lp3999
g57
(g58
g59
NtRp4000
(dp4001
g62
(dp4002
g70
I2
ssg71
g3996
sg64
(lp4003
g57
(g66
g59
NtRp4004
(dp4005
g62
(dp4006
g70
I1
ssg71
Nsg64
(lp4007
g57
(g73
g59
NtRp4008
(dp4009
g62
(dp4010
sg71
g4004
sg64
(lp4011
g57
(g78
g59
NtRp4012
(dp4013
g62
(dp4014
sg71
g4008
sg64
(lp4015
g57
(g58
g59
NtRp4016
(dp4017
g62
(dp4018
g70
I1
ssg71
g4012
sg64
(lp4019
S'web2py.com'
p4020
asbasbasbag57
(g73
g59
NtRp4021
(dp4022
g62
(dp4023
sg71
g4004
sg64
(lp4024
g57
(g78
g59
NtRp4025
(dp4026
g62
(dp4027
sg71
g4021
sg64
(lp4028
g57
(g58
g59
NtRp4029
(dp4030
g62
(dp4031
g70
I1
ssg71
g4025
sg64
(lp4032
I00
asbasbasbag57
(g73
g59
NtRp4033
(dp4034
g62
(dp4035
sg71
g4004
sg64
(lp4036
g57
(g78
g59
NtRp4037
(dp4038
g62
(dp4039
sg71
g4033
sg64
(lp4040
g57
(g58
g59
NtRp4041
(dp4042
g62
(dp4043
g70
I1
ssg71
g4037
sg64
(lp4044
S'http://www.web2py.com'
p4045
asbasbasbag57
(g73
g59
NtRp4046
(dp4047
g62
(dp4048
sg71
g4004
sg64
(lp4049
g57
(g78
g59
NtRp4050
(dp4051
g62
(dp4052
sg71
g4046
sg64
(lp4053
g57
(g58
g59
NtRp4054
(dp4055
g62
(dp4056
g70
I1
ssg71
g4050
sg64
(lp4057
(lp4058
(g3735
(S't\x08\x00\x00\x00Download'
tRp4059
I00
S'http://www.web2py.com/examples/default/download'
p4060
tp4061
a(g3735
(S't\x07\x00\x00\x00Support'
tRp4062
I00
S'http://www.web2py.com/examples/default/support'
p4063
tp4064
a(g3735
(S't\x04\x00\x00\x00Demo'
tRp4065
I00
S'http://web2py.com/demo_admin'
p4066
tp4067
a(g3735
(S's\x0e\x00\x00\x00Quick Examples'
tRp4068
I00
S'http://web2py.com/examples/default/examples'
p4069
tp4070
a(g3735
(S't\x03\x00\x00\x00FAQ'
tRp4071
I00
S'http://web2py.com/AlterEgo'
p4072
tp4073
a(g3735
(S't\x06\x00\x00\x00Videos'
tRp4074
I00
S'http://www.web2py.com/examples/default/videos/'
p4075
tp4076
a(g3735
(S's\x11\x00\x00\x00Free Applications'
tRp4077
I00
S'http://web2py.com/appliances'
p4078
tp4079
a(g3735
(S't\x07\x00\x00\x00Plugins'
tRp4080
I00
S'http://web2py.com/plugins'
p4081
tp4082
a(g3735
(S't\x07\x00\x00\x00Layouts'
tRp4083
I00
S'http://web2py.com/layouts'
p4084
tp4085
a(g3735
(S't\x07\x00\x00\x00Recipes'
tRp4086
I00
S'http://web2pyslices.com/'
p4087
tp4088
a(g3735
(S't\x08\x00\x00\x00Semantic'
tRp4089
I00
S'http://web2py.com/semantic'
p4090
tp4091
aasbasbasbasbasbasbasbag57
(g73
g59
NtRp4092
(dp4093
g62
(dp4094
sg71
g3849
sg64
(lp4095
g57
(g78
g59
NtRp4096
(dp4097
g62
(dp4098
sg71
g4092
sg64
(lp4099
g57
(g58
g59
NtRp4100
(dp4101
g62
(dp4102
g70
I2
ssg71
g4096
sg64
(lp4103
g57
(g66
g59
NtRp4104
(dp4105
g62
(dp4106
g70
I1
ssg71
Nsg64
(lp4107
g57
(g73
g59
NtRp4108
(dp4109
g62
(dp4110
sg71
g4104
sg64
(lp4111
g57
(g78
g59
NtRp4112
(dp4113
g62
(dp4114
sg71
g4108
sg64
(lp4115
g57
(g58
g59
NtRp4116
(dp4117
g62
(dp4118
g70
I1
ssg71
g4112
sg64
(lp4119
g3735
(S't\r\x00\x00\x00Documentation'
tRp4120
asbasbasbag57
(g73
g59
NtRp4121
(dp4122
g62
(dp4123
sg71
g4104
sg64
(lp4124
g57
(g78
g59
NtRp4125
(dp4126
g62
(dp4127
sg71
g4121
sg64
(lp4128
g57
(g58
g59
NtRp4129
(dp4130
g62
(dp4131
g70
I1
ssg71
g4125
sg64
(lp4132
I00
asbasbasbag57
(g73
g59
NtRp4133
(dp4134
g62
(dp4135
sg71
g4104
sg64
(lp4136
g57
(g78
g59
NtRp4137
(dp4138
g62
(dp4139
sg71
g4133
sg64
(lp4140
g57
(g58
g59
NtRp4141
(dp4142
g62
(dp4143
g70
I1
ssg71
g4137
sg64
(lp4144
S'http://www.web2py.com/book'
p4145
asbasbasbag57
(g73
g59
NtRp4146
(dp4147
g62
(dp4148
sg71
g4104
sg64
(lp4149
g57
(g78
g59
NtRp4150
(dp4151
g62
(dp4152
sg71
g4146
sg64
(lp4153
g57
(g58
g59
NtRp4154
(dp4155
g62
(dp4156
g70
I1
ssg71
g4150
sg64
(lp4157
(lp4158
(g3735
(S't\x07\x00\x00\x00Preface'
tRp4159
I00
S'http://www.web2py.com/book/default/chapter/00'
p4160
tp4161
a(g3735
(S't\x0c\x00\x00\x00Introduction'
tRp4162
I00
S'http://www.web2py.com/book/default/chapter/01'
p4163
tp4164
a(g3735
(S't\x06\x00\x00\x00Python'
tRp4165
I00
S'http://www.web2py.com/book/default/chapter/02'
p4166
tp4167
a(g3735
(S't\x08\x00\x00\x00Overview'
tRp4168
I00
S'http://www.web2py.com/book/default/chapter/03'
p4169
tp4170
a(g3735
(S's\x08\x00\x00\x00The Core'
tRp4171
I00
S'http://www.web2py.com/book/default/chapter/04'
p4172
tp4173
a(g3735
(S's\t\x00\x00\x00The Views'
tRp4174
I00
S'http://www.web2py.com/book/default/chapter/05'
p4175
tp4176
a(g3735
(S't\x08\x00\x00\x00Database'
tRp4177
I00
S'http://www.web2py.com/book/default/chapter/06'
p4178
tp4179
a(g3735
(S's\x14\x00\x00\x00Forms and Validators'
tRp4180
I00
S'http://www.web2py.com/book/default/chapter/07'
p4181
tp4182
a(g3735
(S's\r\x00\x00\x00Email and SMS'
tRp4183
I00
S'http://www.web2py.com/book/default/chapter/08'
p4184
tp4185
a(g3735
(S's\x0e\x00\x00\x00Access Control'
tRp4186
I00
S'http://www.web2py.com/book/default/chapter/09'
p4187
tp4188
a(g3735
(S't\x08\x00\x00\x00Services'
tRp4189
I00
S'http://www.web2py.com/book/default/chapter/10'
p4190
tp4191
a(g3735
(S's\x0c\x00\x00\x00Ajax Recipes'
tRp4192
I00
S'http://www.web2py.com/book/default/chapter/11'
p4193
tp4194
a(g3735
(S's\x16\x00\x00\x00Components and Plugins'
tRp4195
I00
S'http://www.web2py.com/book/default/chapter/12'
p4196
tp4197
a(g3735
(S's\x12\x00\x00\x00Deployment Recipes'
tRp4198
I00
S'http://www.web2py.com/book/default/chapter/13'
p4199
tp4200
a(g3735
(S's\r\x00\x00\x00Other Recipes'
tRp4201
I00
S'http://www.web2py.com/book/default/chapter/14'
p4202
tp4203
a(g3735
(S's\r\x00\x00\x00Buy this book'
tRp4204
I00
S'http://stores.lulu.com/web2py'
p4205
tp4206
aasbasbasbasbasbasbasbag57
(g73
g59
NtRp4207
(dp4208
g62
(dp4209
sg71
g3849
sg64
(lp4210
g57
(g78
g59
NtRp4211
(dp4212
g62
(dp4213
sg71
g4207
sg64
(lp4214
g57
(g58
g59
NtRp4215
(dp4216
g62
(dp4217
g70
I2
ssg71
g4211
sg64
(lp4218
g57
(g66
g59
NtRp4219
(dp4220
g62
(dp4221
g70
I1
ssg71
Nsg64
(lp4222
g57
(g73
g59
NtRp4223
(dp4224
g62
(dp4225
sg71
g4219
sg64
(lp4226
g57
(g78
g59
NtRp4227
(dp4228
g62
(dp4229
sg71
g4223
sg64
(lp4230
g57
(g58
g59
NtRp4231
(dp4232
g62
(dp4233
g70
I1
ssg71
g4227
sg64
(lp4234
g3735
(S't\t\x00\x00\x00Community'
tRp4235
asbasbasbag57
(g73
g59
NtRp4236
(dp4237
g62
(dp4238
sg71
g4219
sg64
(lp4239
g57
(g78
g59
NtRp4240
(dp4241
g62
(dp4242
sg71
g4236
sg64
(lp4243
g57
(g58
g59
NtRp4244
(dp4245
g62
(dp4246
g70
I1
ssg71
g4240
sg64
(lp4247
I00
asbasbasbag57
(g73
g59
NtRp4248
(dp4249
g62
(dp4250
sg71
g4219
sg64
(lp4251
g57
(g78
g59
NtRp4252
(dp4253
g62
(dp4254
sg71
g4248
sg64
(lp4255
g57
(g58
g59
NtRp4256
(dp4257
g62
(dp4258
g70
I1
ssg71
g4252
sg64
(lp4259
Nasbasbasbag57
(g73
g59
NtRp4260
(dp4261
g62
(dp4262
sg71
g4219
sg64
(lp4263
g57
(g78
g59
NtRp4264
(dp4265
g62
(dp4266
sg71
g4260
sg64
(lp4267
g57
(g58
g59
NtRp4268
(dp4269
g62
(dp4270
g70
I1
ssg71
g4264
sg64
(lp4271
(lp4272
(g3735
(S't\x06\x00\x00\x00Groups'
tRp4273
I00
S'http://www.web2py.com/examples/default/usergroups'
p4274
tp4275
a(g3735
(S't\x07\x00\x00\x00Twitter'
tRp4276
I00
S'http://twitter.com/web2py'
p4277
tp4278
a(g3735
(S's\t\x00\x00\x00Live Chat'
tRp4279
I00
S'http://webchat.freenode.net/?channels=web2py'
p4280
tp4281
aasbasbasbasbasbasbasbag57
(g73
g59
NtRp4282
(dp4283
g62
(dp4284
sg71
g3849
sg64
(lp4285
g57
(g78
g59
NtRp4286
(dp4287
g62
(dp4288
sg71
g4282
sg64
(lp4289
g57
(g58
g59
NtRp4290
(dp4291
g62
(dp4292
g70
I2
ssg71
g4286
sg64
(lp4293
g57
(g66
g59
NtRp4294
(dp4295
g62
(dp4296
g70
I1
ssg71
Nsg64
(lp4297
g57
(g73
g59
NtRp4298
(dp4299
g62
(dp4300
sg71
g4294
sg64
(lp4301
g57
(g78
g59
NtRp4302
(dp4303
g62
(dp4304
sg71
g4298
sg64
(lp4305
g57
(g58
g59
NtRp4306
(dp4307
g62
(dp4308
g70
I1
ssg71
g4302
sg64
(lp4309
g3735
(S't\x07\x00\x00\x00Plugins'
tRp4310
asbasbasbag57
(g73
g59
NtRp4311
(dp4312
g62
(dp4313
sg71
g4294
sg64
(lp4314
g57
(g78
g59
NtRp4315
(dp4316
g62
(dp4317
sg71
g4311
sg64
(lp4318
g57
(g58
g59
NtRp4319
(dp4320
g62
(dp4321
g70
I1
ssg71
g4315
sg64
(lp4322
I00
asbasbasbag57
(g73
g59
NtRp4323
(dp4324
g62
(dp4325
sg71
g4294
sg64
(lp4326
g57
(g78
g59
NtRp4327
(dp4328
g62
(dp4329
sg71
g4323
sg64
(lp4330
g57
(g58
g59
NtRp4331
(dp4332
g62
(dp4333
g70
I1
ssg71
g4327
sg64
(lp4334
Nasbasbasbag57
(g73
g59
NtRp4335
(dp4336
g62
(dp4337
sg71
g4294
sg64
(lp4338
g57
(g78
g59
NtRp4339
(dp4340
g62
(dp4341
sg71
g4335
sg64
(lp4342
g57
(g58
g59
NtRp4343
(dp4344
g62
(dp4345
g70
I1
ssg71
g4339
sg64
(lp4346
(lp4347
(S'plugin_wiki'
p4348
I00
S'http://web2py.com/examples/default/download'
p4349
tp4350
a(g3735
(S's\r\x00\x00\x00Other Plugins'
tRp4351
I00
g4081
tp4352
a(g3735
(S's\x0e\x00\x00\x00Layout Plugins'
tRp4353
I00
g4084
tp4354
aasbasbasbasbasbasbasbasbasbasbasbasbasbasbasbasbasbasbasbag57
(g73
g59
NtRp4355
(dp4356
g62
(dp4357
sg71
g3179
sg64
(lp4358
g57
(g78
g59
NtRp4359
(dp4360
g62
(dp4361
g82
g83
ssg71
g4355
sg64
(lp4362
S'meta'
p4363
asbag57
(g78
g59
NtRp4364
(dp4365
g62
(dp4366
g89
g90
ssg71
g4355
sg64
(lp4367
S':'
asbag57
(g78
g59
NtRp4368
(dp4369
g62
(dp4370
sg71
g4355
sg64
(lp4371
g57
(g58
g59
NtRp4372
(dp4373
g62
(dp4374
g70
I5
ssg71
g4368
sg64
(lp4375
g57
(g66
g59
NtRp4376
(dp4377
g62
(dp4378
g70
I4
ssg71
Nsg64
(lp4379
g57
(g73
g59
NtRp4380
(dp4381
g62
(dp4382
sg71
g4376
sg64
(lp4383
g57
(g78
g59
NtRp4384
(dp4385
g62
(dp4386
g82
g83
ssg71
g4380
sg64
(lp4387
S'author'
p4388
asbag57
(g78
g59
NtRp4389
(dp4390
g62
(dp4391
g89
g90
ssg71
g4380
sg64
(lp4392
S':'
asbag57
(g78
g59
NtRp4393
(dp4394
g62
(dp4395
sg71
g4380
sg64
(lp4396
g57
(g58
g59
NtRp4397
(dp4398
g62
(dp4399
g70
I4
ssg71
g4393
sg64
(lp4400
S'Your Name <you@example.com>'
p4401
asbasbasbag57
(g73
g59
NtRp4402
(dp4403
g62
(dp4404
sg71
g4376
sg64
(lp4405
g57
(g78
g59
NtRp4406
(dp4407
g62
(dp4408
g82
g83
ssg71
g4402
sg64
(lp4409
S'copyright'
p4410
asbag57
(g78
g59
NtRp4411
(dp4412
g62
(dp4413
g89
g90
ssg71
g4402
sg64
(lp4414
S':'
asbag57
(g78
g59
NtRp4415
(dp4416
g62
(dp4417
sg71
g4402
sg64
(lp4418
g57
(g58
g59
NtRp4419
(dp4420
g62
(dp4421
g70
I4
ssg71
g4415
sg64
(lp4422
S'Copyright 2011'
p4423
asbasbasbag57
(g73
g59
NtRp4424
(dp4425
g62
(dp4426
sg71
g4376
sg64
(lp4427
g57
(g78
g59
NtRp4428
(dp4429
g62
(dp4430
g82
g83
ssg71
g4424
sg64
(lp4431
S'description'
p4432
asbag57
(g78
g59
NtRp4433
(dp4434
g62
(dp4435
g89
g90
ssg71
g4424
sg64
(lp4436
S':'
asbag57
(g78
g59
NtRp4437
(dp4438
g62
(dp4439
sg71
g4424
sg64
(lp4440
g57
(g58
g59
NtRp4441
(dp4442
g62
(dp4443
g70
I4
ssg71
g4437
sg64
(lp4444
S'a cool new app'
p4445
asbasbasbag57
(g73
g59
NtRp4446
(dp4447
g62
(dp4448
sg71
g4376
sg64
(lp4449
g57
(g78
g59
NtRp4450
(dp4451
g62
(dp4452
g82
g83
ssg71
g4446
sg64
(lp4453
S'generator'
p4454
asbag57
(g78
g59
NtRp4455
(dp4456
g62
(dp4457
g89
g90
ssg71
g4446
sg64
(lp4458
S':'
asbag57
(g78
g59
NtRp4459
(dp4460
g62
(dp4461
sg71
g4446
sg64
(lp4462
g57
(g58
g59
NtRp4463
(dp4464
g62
(dp4465
g70
I4
ssg71
g4459
sg64
(lp4466
S'Web2py Web Framework'
p4467
asbasbasbag57
(g73
g59
NtRp4468
(dp4469
g62
(dp4470
sg71
g4376
sg64
(lp4471
g57
(g78
g59
NtRp4472
(dp4473
g62
(dp4474
g82
g83
ssg71
g4468
sg64
(lp4475
S'keywords'
p4476
asbag57
(g78
g59
NtRp4477
(dp4478
g62
(dp4479
g89
g90
ssg71
g4468
sg64
(lp4480
S':'
asbag57
(g78
g59
NtRp4481
(dp4482
g62
(dp4483
sg71
g4468
sg64
(lp4484
g57
(g58
g59
NtRp4485
(dp4486
g62
(dp4487
g70
I4
ssg71
g4481
sg64
(lp4488
S'web2py, python, framework'
p4489
asbasbasbasbasbasbasbag57
(g73
g59
NtRp4490
(dp4491
g62
(dp4492
sg71
g3179
sg64
(lp4493
g57
(g78
g59
NtRp4494
(dp4495
g62
(dp4496
g82
g83
ssg71
g4490
sg64
(lp4497
S'postprocessing'
p4498
asbag57
(g78
g59
NtRp4499
(dp4500
g62
(dp4501
g89
g90
ssg71
g4490
sg64
(lp4502
S':'
asbag57
(g78
g59
NtRp4503
(dp4504
g62
(dp4505
sg71
g4490
sg64
(lp4506
g57
(g58
g59
NtRp4507
(dp4508
g62
(dp4509
g70
I5
ssg71
g4503
sg64
(lp4510
g57
(g66
g59
NtRp4511
(dp4512
g62
(dp4513
g70
I4
ssg71
Nsg64
(lp4514
sbasbasbasbag57
(g73
g59
NtRp4515
(dp4516
g62
(dp4517
sg71
g3179
sg64
(lp4518
g57
(g78
g59
NtRp4519
(dp4520
g62
(dp4521
g82
g83
ssg71
g4515
sg64
(lp4522
S'session_file'
p4523
asbag57
(g78
g59
NtRp4524
(dp4525
g62
(dp4526
g89
g90
ssg71
g4515
sg64
(lp4527
S':'
asbag57
(g78
g59
NtRp4528
(dp4529
g62
(dp4530
sg71
g4515
sg64
(lp4531
g57
(g58
g59
NtRp4532
(dp4533
g62
(dp4534
g70
I5
ssg71
g4528
sg64
(lp4535
S"<open file '/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/sessions/127.0.0.1-bfae3cf7-324d-4fba-81a6-e00fd8a1cd5b', mode 'rb+' at 0x10b33bd20>"
p4536
asbasbasbag57
(g73
g59
NtRp4537
(dp4538
g62
(dp4539
sg71
g3179
sg64
(lp4540
g57
(g78
g59
NtRp4541
(dp4542
g62
(dp4543
g82
g83
ssg71
g4537
sg64
(lp4544
S'session_filename'
p4545
asbag57
(g78
g59
NtRp4546
(dp4547
g62
(dp4548
g89
g90
ssg71
g4537
sg64
(lp4549
S':'
asbag57
(g78
g59
NtRp4550
(dp4551
g62
(dp4552
sg71
g4537
sg64
(lp4553
g57
(g58
g59
NtRp4554
(dp4555
g62
(dp4556
g70
I5
ssg71
g4550
sg64
(lp4557
S'/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/sessions/127.0.0.1-bfae3cf7-324d-4fba-81a6-e00fd8a1cd5b'
p4558
asbasbasbag57
(g73
g59
NtRp4559
(dp4560
g62
(dp4561
sg71
g3179
sg64
(lp4562
g57
(g78
g59
NtRp4563
(dp4564
g62
(dp4565
g82
g83
ssg71
g4559
sg64
(lp4566
S'session_id'
p4567
asbag57
(g78
g59
NtRp4568
(dp4569
g62
(dp4570
g89
g90
ssg71
g4559
sg64
(lp4571
S':'
asbag57
(g78
g59
NtRp4572
(dp4573
g62
(dp4574
sg71
g4559
sg64
(lp4575
g57
(g58
g59
NtRp4576
(dp4577
g62
(dp4578
g70
I5
ssg71
g4572
sg64
(lp4579
S'127.0.0.1-bfae3cf7-324d-4fba-81a6-e00fd8a1cd5b'
p4580
asbasbasbag57
(g73
g59
NtRp4581
(dp4582
g62
(dp4583
sg71
g3179
sg64
(lp4584
g57
(g78
g59
NtRp4585
(dp4586
g62
(dp4587
g82
g83
ssg71
g4581
sg64
(lp4588
S'session_id_name'
p4589
asbag57
(g78
g59
NtRp4590
(dp4591
g62
(dp4592
g89
g90
ssg71
g4581
sg64
(lp4593
S':'
asbag57
(g78
g59
NtRp4594
(dp4595
g62
(dp4596
sg71
g4581
sg64
(lp4597
g57
(g58
g59
NtRp4598
(dp4599
g62
(dp4600
g70
I5
ssg71
g4594
sg64
(lp4601
g3236
asbasbasbag57
(g73
g59
NtRp4602
(dp4603
g62
(dp4604
sg71
g3179
sg64
(lp4605
g57
(g78
g59
NtRp4606
(dp4607
g62
(dp4608
g82
g83
ssg71
g4602
sg64
(lp4609
S'session_locked'
p4610
asbag57
(g78
g59
NtRp4611
(dp4612
g62
(dp4613
g89
g90
ssg71
g4602
sg64
(lp4614
S':'
asbag57
(g78
g59
NtRp4615
(dp4616
g62
(dp4617
sg71
g4602
sg64
(lp4618
g57
(g58
g59
NtRp4619
(dp4620
g62
(dp4621
g70
I5
ssg71
g4615
sg64
(lp4622
g1692
asbasbasbag57
(g73
g59
NtRp4623
(dp4624
g62
(dp4625
sg71
g3179
sg64
(lp4626
g57
(g78
g59
NtRp4627
(dp4628
g62
(dp4629
g82
g83
ssg71
g4623
sg64
(lp4630
S'session_new'
p4631
asbag57
(g78
g59
NtRp4632
(dp4633
g62
(dp4634
g89
g90
ssg71
g4623
sg64
(lp4635
S':'
asbag57
(g78
g59
NtRp4636
(dp4637
g62
(dp4638
sg71
g4623
sg64
(lp4639
g57
(g58
g59
NtRp4640
(dp4641
g62
(dp4642
g70
I5
ssg71
g4636
sg64
(lp4643
g100
asbasbasbag57
(g73
g59
NtRp4644
(dp4645
g62
(dp4646
sg71
g3179
sg64
(lp4647
g57
(g78
g59
NtRp4648
(dp4649
g62
(dp4650
g82
g83
ssg71
g4644
sg64
(lp4651
S'status'
p4652
asbag57
(g78
g59
NtRp4653
(dp4654
g62
(dp4655
g89
g90
ssg71
g4644
sg64
(lp4656
S':'
asbag57
(g78
g59
NtRp4657
(dp4658
g62
(dp4659
sg71
g4644
sg64
(lp4660
g57
(g58
g59
NtRp4661
(dp4662
g62
(dp4663
g70
I5
ssg71
g4657
sg64
(lp4664
S'200'
p4665
asbasbasbag57
(g73
g59
NtRp4666
(dp4667
g62
(dp4668
sg71
g3179
sg64
(lp4669
g57
(g78
g59
NtRp4670
(dp4671
g62
(dp4672
g82
g83
ssg71
g4666
sg64
(lp4673
S'subtitle'
p4674
asbag57
(g78
g59
NtRp4675
(dp4676
g62
(dp4677
g89
g90
ssg71
g4666
sg64
(lp4678
S':'
asbag57
(g78
g59
NtRp4679
(dp4680
g62
(dp4681
sg71
g4666
sg64
(lp4682
g57
(g58
g59
NtRp4683
(dp4684
g62
(dp4685
g70
I5
ssg71
g4679
sg64
(lp4686
g3735
(S's\r\x00\x00\x00customize me!'
tRp4687
asbasbasbag57
(g73
g59
NtRp4688
(dp4689
g62
(dp4690
sg71
g3179
sg64
(lp4691
g57
(g78
g59
NtRp4692
(dp4693
g62
(dp4694
g82
g83
ssg71
g4688
sg64
(lp4695
S'title'
p4696
asbag57
(g78
g59
NtRp4697
(dp4698
g62
(dp4699
g89
g90
ssg71
g4688
sg64
(lp4700
S':'
asbag57
(g78
g59
NtRp4701
(dp4702
g62
(dp4703
sg71
g4688
sg64
(lp4704
g57
(g58
g59
NtRp4705
(dp4706
g62
(dp4707
g70
I5
ssg71
g4701
sg64
(lp4708
S'Seniorproject'
p4709
asbasbasbag57
(g73
g59
NtRp4710
(dp4711
g62
(dp4712
sg71
g3179
sg64
(lp4713
g57
(g78
g59
NtRp4714
(dp4715
g62
(dp4716
g82
g83
ssg71
g4710
sg64
(lp4717
g2377
asbag57
(g78
g59
NtRp4718
(dp4719
g62
(dp4720
g89
g90
ssg71
g4710
sg64
(lp4721
S':'
asbag57
(g78
g59
NtRp4722
(dp4723
g62
(dp4724
sg71
g4710
sg64
(lp4725
g57
(g58
g59
NtRp4726
(dp4727
g62
(dp4728
g70
I5
ssg71
g4722
sg64
(lp4729
g2390
asbasbasbag57
(g73
g59
NtRp4730
(dp4731
g62
(dp4732
sg71
g3179
sg64
(lp4733
g57
(g78
g59
NtRp4734
(dp4735
g62
(dp4736
g82
g83
ssg71
g4730
sg64
(lp4737
S'view'
p4738
asbag57
(g78
g59
NtRp4739
(dp4740
g62
(dp4741
g89
g90
ssg71
g4730
sg64
(lp4742
S':'
asbag57
(g78
g59
NtRp4743
(dp4744
g62
(dp4745
sg71
g4730
sg64
(lp4746
g57
(g58
g59
NtRp4747
(dp4748
g62
(dp4749
g70
I5
ssg71
g4743
sg64
(lp4750
S'default/user.html'
p4751
asbasbasbasbasbsS'locals'
p4752
(dp4753
S'datum'
p4754
S"''"
p4755
sS'self'
p4756
S'[FlickrAPI for key "614fd86a34a00d38293c7e803d14c3ab"]'
p4757
sS'data'
p4758
S"['ad86826c3187eb4d', 'api_key', '614fd86a34a00d38293c7e803d14c3ab', 'auth_token', '72157632878384274-4abc077968f36490', 'format', 'json', 'method', 'flickr.photos.getInfo', 'nojsoncallback', 1, 'photo_id', 8655391465, 'secret', '']"
p4759
sS'key'
p4760
S"'secret'"
p4761
sS'dictionary'
p4762
S"{'api_key': '614fd86a34a00d38293c7e803d14c3ab', 'auth_token': '72157632878384274-4abc077968f36490', 'format': 'json', 'method': 'flickr.photos.getInfo', 'nojsoncallback': 1, 'photo_id': 8655391465, 'secret': ''}"
p4763
sssS'traceback'
p4764
S'Traceback (most recent call last):\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py", line 133, in <module>\n    setUpFlickrStuff()                          #Make sure all the flickr stuff is good to go (make sure we\'re authenticated)\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/applications/SeniorProject/controllers/default.py", line 122, in setUpFlickrStuff\n    "auth_token":"72157632878384274-4abc077968f36490"\n  File "/Users/hainna01/Desktop/SeniorProject/web2py/site-packages/flickrapi/__init__.py", line 299, in sign\n    md5_hash = md5(\'\'.join(data))\nTypeError: sequence item 10: expected string, int found\n'
p4765
s.