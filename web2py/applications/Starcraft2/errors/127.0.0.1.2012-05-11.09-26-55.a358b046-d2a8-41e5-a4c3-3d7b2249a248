(dp1
S'output'
p2
S"<type 'exceptions.UnboundLocalError'> local variable 'soup' referenced before assignment"
p3
sS'layer'
p4
S'/Users/hainna01/Downloads/web2py/applications/Starcraft2/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a samples controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport requests\nimport bs4\nimport re\n\nr = requests.get(\'http://sc2pod.com/feeds/news.xml\')\nsoup = bs4.BeautifulSoup(r.text)\n\n\n@auth.requires_login()\ndef index():\n\t\n\n\t\n\ttable = db(db.Unit)\n\tif len(table.select())<1:\n\t\t\n\t\tlinks = [\'http://sc2armory.com/game/protoss/units\',\'http://sc2armory.com/game/protoss/buildings\',\'http://sc2armory.com/game/zerg/units\',\'http://sc2armory.com/game/zerg/buildings\',\'http://sc2armory.com/game/terran/units\',\'http://sc2armory.com/game/terran/buildings\']\n\n\t\tfor alink in links:\n\t\t\tr = requests.get(alink)\n\t\t\tsoup = bs4.BeautifulSoup(r.text)\n\t\t\ttable = soup.find(\'table\')\n\n\t\t\trows = table.findAll(\'tr\')\n\n\t\t\tfor i in range(1,len(rows)):\n\t\t\t\trow = rows[i].find_all(\'td\')\n\t\t\t\tm = re.search(\'(\\w+)<\',str(row[1]))\n\t\t\t\tn = re.search(\'\\/img(.+)([0-9]{9,10})\',str(row))\n\t\t\t\talink = \'http://sc2armory.com/img\'\n\t\t\t\tfor item in n.groups(0):\n\t\t\t\t\talink = alink +str(item)\n\t\t\t\tif \'terran\' in alink:\n\t\t\t\t\tarace = \'terran\'\n\t\t\t\telse:\n\t\t\t\t\tif \'zerg\' in alink:\n\t\t\t\t\t\tarace=\'zerg\'\n\t\t\t\t\telse:\n\t\t\t\t\t\tarace = \'protoss\'\n\t\t\t\tdb.Unit.insert(name=str(m.groups(0)[0]),link=str(alink),race=str(arace))\n\t\t\t\n\t"""\n\texample action using the internationalization operator T and flash\n\trendered by views/default/index.html or views/generic.html\n\t"""\n\n\treturn dict(message=db(db.Unit).select(),feed=soup)\n\ndef user():\n\t"""\n\texposes:\n\thttp://..../[app]/default/user/login\n\thttp://..../[app]/default/user/logout\n\thttp://..../[app]/default/user/register\n\thttp://..../[app]/default/user/profile\n\thttp://..../[app]/default/user/retrieve_password\n\thttp://..../[app]/default/user/change_password\n\tuse @auth.requires_login()\n\t\t@auth.requires_membership(\'group name\')\n\t\t@auth.requires_permission(\'read\',\'table name\',record_id)\n\tto decorate functions that need access control\n\t"""\n\treturn dict(form=auth())\n\n\ndef download():\n\t"""\n\tallows downloading of uploaded files\n\thttp://..../[app]/default/download/[filename]\n\t"""\n\treturn response.download(request,db)\n\n\ndef call():\n\t"""\n\texposes services. for example:\n\thttp://..../[app]/default/call/jsonrpc\n\tdecorate with @services.jsonrpc the functions to expose\n\tsupports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n\t"""\n\treturn service()\n\n\n@auth.requires_signature()\ndef data():\n\t"""\n\thttp://..../[app]/default/data/tables\n\thttp://..../[app]/default/data/create/[table]\n\thttp://..../[app]/default/data/read/[table]/[id]\n\thttp://..../[app]/default/data/update/[table]/[id]\n\thttp://..../[app]/default/data/delete/[table]/[id]\n\thttp://..../[app]/default/data/select/[table]\n\thttp://..../[app]/default/data/search/[table]\n\tbut URLs must be signed, i.e. linked with\n\t  A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n\tor with the signed load operator\n\t  LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n\t"""\n\treturn dict(form=crud())\n\ndef build():\n\t\n\tmessage= db(db.Unit.race==request.vars.race).select().as_list()\n\tnumlist = []\n\tfor i in range(5,151):\n\t\tnumlist.append(i)\n\talist= []\n\tfor unit in message:\n\t\talist.append(unit[\'name\'])\n\tif request.vars.Unit:\n\t\tnumlist = filter(lambda a:a>int(request.vars.Supply),numlist)\n\t\tmybuild = db(db.Build.id==request.vars.build).select().first()\n\t\tform = SQLFORM.factory(Field(\'Unit\',requires=IS_IN_SET(alist),default=alist[0]),Field(\'Supply\',requires=IS_IN_SET(numlist),default=2),hidden=dict(race=request.vars.race,unit=request.vars.unit+request.vars.Unit+\'||\',supply=request.vars.supply+request.vars.Supply+\'||\',build=request.vars.build,buildname=request.vars.buildname))\n\t\tunitlist = request.vars.unit +request.vars.Unit+\'||\'\n\t\tsupplylist = request.vars.supply + request.vars.Supply + \'||\'\n\t\tmybuild.update_record(unitList=unitlist)\n\t\tmybuild.update_record(supplyList=supplylist)\n\t\t\n\telse:\n\t\tbuildNum=db.Build.insert(name=request.vars.buildname,userid=auth.user.id,unitList=\'\',supplyList=\'\')\n\t\tform = SQLFORM.factory(Field(\'Unit\',requires=IS_IN_SET(alist),default=alist[0]),Field(\'Supply\',requires=IS_IN_SET(numlist),default=5),hidden=dict(race=request.vars.race,unit=request.vars.unit,supply=request.vars.supply,build=buildNum,buildname=request.vars.buildname))\n\t\tunitlist=\'\'\n\t\tsupplylist=\'\'\n\t\t\n\tunitlist = unitlist.split(\'||\')\n\tunitlist = filter(lambda a:a!=\'\',unitlist)\n\tsupplylist = supplylist.split(\'||\')\n\tsupplylist = filter(lambda a:a!=\'\',supplylist)\n\tfor i in range(len(unitlist)):\n\t\trow = db(db.Unit.name==unitlist[i]).select()\n\t\tunitlist[i] = row.as_list()\n\treturn dict(form=form,unitlist=unitlist,supplylist=supplylist,feed=soup)\n\t\ndef mybuild():\n\tbuildUnits = []\n\tbuildSupplies = []\n\tbuildNames=[]\n\tbuildIDs=[]\n\tbuilds = db(db.Build.userid==auth.user.id).select()\n\tfor build in builds:\n\t\tbuildIDs.append(build.id)\n\t\tbuildNames.append(build.name)\n\t\tunitlist = build.unitList.split(\'||\')\n\t\tunitlist = filter(lambda a:a!=\'\',unitlist)\n\t\tsupplylist = build.supplyList.split(\'||\')\n\t\tsupplylist = filter(lambda a:a!=\'\',supplylist)\n\t\tbuildUnits.append(unitlist)\n\t\tbuildSupplies.append(supplylist)\n\treturn dict(buildUnits=buildUnits,buildSupplies=buildSupplies,buildNames=buildNames,buildIDs=buildIDs,feed=soup)\n\t\ndef delete():\n\tquery = db(db.Build.id==request.args(0).replace(\'_\',\' \')).select().first()\n\tremove = db(db.Build.id==query).delete()\n\tif remove:\n\t\t redirect(URL(\'Starcraft2\',\'default\',\'mybuild\'))\n\treturn dict(remove=remove)\n\nresponse._vars=response._caller(index)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/hainna01/Downloads/web2py/gluon/restricted.py", line 205, in restricted\n    exec ccode in environment\n  File "/Users/hainna01/Downloads/web2py/applications/Starcraft2/controllers/default.py", line 168, in <module>\n  File "/Users/hainna01/Downloads/web2py/gluon/globals.py", line 173, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/hainna01/Downloads/web2py/gluon/tools.py", line 2575, in f\n    return action(*a, **b)\n  File "/Users/hainna01/Downloads/web2py/applications/Starcraft2/controllers/default.py", line 57, in index\n    return dict(message=db(db.Unit).select(),feed=soup)\nUnboundLocalError: local variable \'soup\' referenced before assignment\n'
p11
s.